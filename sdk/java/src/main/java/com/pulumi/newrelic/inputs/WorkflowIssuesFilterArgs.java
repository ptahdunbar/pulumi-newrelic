// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.newrelic.inputs.WorkflowIssuesFilterPredicateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkflowIssuesFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowIssuesFilterArgs Empty = new WorkflowIssuesFilterArgs();

    @Import(name="filterId")
    private @Nullable Output<String> filterId;

    public Optional<Output<String>> filterId() {
        return Optional.ofNullable(this.filterId);
    }

    /**
     * A nrql enrichment name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A nrql enrichment name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="predicates")
    private @Nullable Output<List<WorkflowIssuesFilterPredicateArgs>> predicates;

    public Optional<Output<List<WorkflowIssuesFilterPredicateArgs>>> predicates() {
        return Optional.ofNullable(this.predicates);
    }

    /**
     * the filter&#39;s type.   One of: `FILTER` or `VIEW`.
     * * `predicates`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return the filter&#39;s type.   One of: `FILTER` or `VIEW`.
     * * `predicates`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private WorkflowIssuesFilterArgs() {}

    private WorkflowIssuesFilterArgs(WorkflowIssuesFilterArgs $) {
        this.filterId = $.filterId;
        this.name = $.name;
        this.predicates = $.predicates;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkflowIssuesFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkflowIssuesFilterArgs $;

        public Builder() {
            $ = new WorkflowIssuesFilterArgs();
        }

        public Builder(WorkflowIssuesFilterArgs defaults) {
            $ = new WorkflowIssuesFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder filterId(@Nullable Output<String> filterId) {
            $.filterId = filterId;
            return this;
        }

        public Builder filterId(String filterId) {
            return filterId(Output.of(filterId));
        }

        /**
         * @param name A nrql enrichment name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A nrql enrichment name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder predicates(@Nullable Output<List<WorkflowIssuesFilterPredicateArgs>> predicates) {
            $.predicates = predicates;
            return this;
        }

        public Builder predicates(List<WorkflowIssuesFilterPredicateArgs> predicates) {
            return predicates(Output.of(predicates));
        }

        public Builder predicates(WorkflowIssuesFilterPredicateArgs... predicates) {
            return predicates(List.of(predicates));
        }

        /**
         * @param type the filter&#39;s type.   One of: `FILTER` or `VIEW`.
         * * `predicates`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type the filter&#39;s type.   One of: `FILTER` or `VIEW`.
         * * `predicates`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public WorkflowIssuesFilterArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
