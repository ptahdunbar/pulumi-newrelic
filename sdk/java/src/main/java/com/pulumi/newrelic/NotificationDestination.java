// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.newrelic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.newrelic.NotificationDestinationArgs;
import com.pulumi.newrelic.Utilities;
import com.pulumi.newrelic.inputs.NotificationDestinationState;
import com.pulumi.newrelic.outputs.NotificationDestinationAuthBasic;
import com.pulumi.newrelic.outputs.NotificationDestinationAuthToken;
import com.pulumi.newrelic.outputs.NotificationDestinationProperty;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Use this resource to create and manage New Relic notification destinations. Details regarding supported products and permissions can be found [here](https://docs.newrelic.com/docs/alerts-applied-intelligence/notifications/destinations).
 * 
 * ## Example Usage
 * 
 * ##### [Webhook](https://docs.newrelic.com/docs/alerts-applied-intelligence/notifications/notification-integrations/#webhook)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.NotificationDestination;
 * import com.pulumi.newrelic.NotificationDestinationArgs;
 * import com.pulumi.newrelic.inputs.NotificationDestinationAuthBasicArgs;
 * import com.pulumi.newrelic.inputs.NotificationDestinationPropertyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new NotificationDestination(&#34;foo&#34;, NotificationDestinationArgs.builder()        
 *             .accountId(12345678)
 *             .authBasic(NotificationDestinationAuthBasicArgs.builder()
 *                 .password(&#34;password&#34;)
 *                 .user(&#34;username&#34;)
 *                 .build())
 *             .properties(NotificationDestinationPropertyArgs.builder()
 *                 .key(&#34;url&#34;)
 *                 .value(&#34;https://webhook.site/&#34;)
 *                 .build())
 *             .type(&#34;WEBHOOK&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * See additional examples.
 * ## Additional Examples
 * 
 * ##### [ServiceNow](https://docs.newrelic.com/docs/alerts-applied-intelligence/notifications/notification-integrations/#servicenow)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.NotificationDestination;
 * import com.pulumi.newrelic.NotificationDestinationArgs;
 * import com.pulumi.newrelic.inputs.NotificationDestinationAuthBasicArgs;
 * import com.pulumi.newrelic.inputs.NotificationDestinationPropertyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new NotificationDestination(&#34;foo&#34;, NotificationDestinationArgs.builder()        
 *             .accountId(12345678)
 *             .authBasic(NotificationDestinationAuthBasicArgs.builder()
 *                 .password(&#34;password&#34;)
 *                 .user(&#34;username&#34;)
 *                 .build())
 *             .properties(            
 *                 NotificationDestinationPropertyArgs.builder()
 *                     .key(&#34;url&#34;)
 *                     .value(&#34;https://service-now.com/&#34;)
 *                     .build(),
 *                 NotificationDestinationPropertyArgs.builder()
 *                     .key(&#34;two_way_integration&#34;)
 *                     .value(&#34;true&#34;)
 *                     .build())
 *             .type(&#34;SERVICE_NOW&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ##### [Email](https://docs.newrelic.com/docs/alerts-applied-intelligence/notifications/notification-integrations/#email)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.NotificationDestination;
 * import com.pulumi.newrelic.NotificationDestinationArgs;
 * import com.pulumi.newrelic.inputs.NotificationDestinationPropertyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new NotificationDestination(&#34;foo&#34;, NotificationDestinationArgs.builder()        
 *             .accountId(12345678)
 *             .properties(NotificationDestinationPropertyArgs.builder()
 *                 .key(&#34;email&#34;)
 *                 .value(&#34;email@email.com,email2@email.com&#34;)
 *                 .build())
 *             .type(&#34;EMAIL&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ##### [Jira](https://docs.newrelic.com/docs/alerts-applied-intelligence/notifications/notification-integrations/#jira)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.NotificationDestination;
 * import com.pulumi.newrelic.NotificationDestinationArgs;
 * import com.pulumi.newrelic.inputs.NotificationDestinationAuthBasicArgs;
 * import com.pulumi.newrelic.inputs.NotificationDestinationPropertyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new NotificationDestination(&#34;foo&#34;, NotificationDestinationArgs.builder()        
 *             .accountId(12345678)
 *             .authBasic(NotificationDestinationAuthBasicArgs.builder()
 *                 .password(&#34;password&#34;)
 *                 .user(&#34;example@email.com&#34;)
 *                 .build())
 *             .properties(NotificationDestinationPropertyArgs.builder()
 *                 .key(&#34;url&#34;)
 *                 .value(&#34;https://example.atlassian.net&#34;)
 *                 .build())
 *             .type(&#34;JIRA&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ##### [PagerDuty with service integration](https://docs.newrelic.com/docs/alerts-applied-intelligence/notifications/notification-integrations/#pagerduty-sli)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.NotificationDestination;
 * import com.pulumi.newrelic.NotificationDestinationArgs;
 * import com.pulumi.newrelic.inputs.NotificationDestinationAuthTokenArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new NotificationDestination(&#34;foo&#34;, NotificationDestinationArgs.builder()        
 *             .accountId(12345678)
 *             .authToken(NotificationDestinationAuthTokenArgs.builder()
 *                 .prefix(&#34;Token token=&#34;)
 *                 .token(&#34;10567a689d984d03c021034b22a789e2&#34;)
 *                 .build())
 *             .type(&#34;PAGERDUTY_SERVICE_INTEGRATION&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ##### [PagerDuty with account integration](https://docs.newrelic.com/docs/alerts-applied-intelligence/notifications/notification-integrations/#pagerduty-ali)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.newrelic.NotificationDestination;
 * import com.pulumi.newrelic.NotificationDestinationArgs;
 * import com.pulumi.newrelic.inputs.NotificationDestinationAuthTokenArgs;
 * import com.pulumi.newrelic.inputs.NotificationDestinationPropertyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new NotificationDestination(&#34;foo&#34;, NotificationDestinationArgs.builder()        
 *             .accountId(12345678)
 *             .authToken(NotificationDestinationAuthTokenArgs.builder()
 *                 .prefix(&#34;Token token=&#34;)
 *                 .token(&#34;u+E8EU3MhsZwLfZ1ic1A&#34;)
 *                 .build())
 *             .properties(NotificationDestinationPropertyArgs.builder()
 *                 .key(&#34;two_way_integration&#34;)
 *                 .value(&#34;true&#34;)
 *                 .build())
 *             .type(&#34;PAGERDUTY_ACCOUNT_INTEGRATION&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * &gt; **NOTE:** Sensitive data such as destination API keys, service keys, auth object, etc are not returned from the underlying API for security reasons and may not be set in state when importing.
 * 
 * ## Additional Information
 * 
 * More information about destinations integrations can be found in NewRelic [documentation](https://docs.newrelic.com/docs/alerts-applied-intelligence/notifications/notification-integrations/).
 * More details about the destinations API can be found [here](https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-api-notifications-destinations).
 * 
 */
@ResourceType(type="newrelic:index/notificationDestination:NotificationDestination")
public class NotificationDestination extends com.pulumi.resources.CustomResource {
    /**
     * Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
     * 
     */
    @Export(name="accountId", type=Integer.class, parameters={})
    private Output<Integer> accountId;

    /**
     * @return Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.
     * 
     */
    public Output<Integer> accountId() {
        return this.accountId;
    }
    /**
     * Indicates whether the destination is active.
     * 
     */
    @Export(name="active", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> active;

    /**
     * @return Indicates whether the destination is active.
     * 
     */
    public Output<Optional<Boolean>> active() {
        return Codegen.optional(this.active);
    }
    /**
     * A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.
     * 
     */
    @Export(name="authBasic", type=NotificationDestinationAuthBasic.class, parameters={})
    private Output</* @Nullable */ NotificationDestinationAuthBasic> authBasic;

    /**
     * @return A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.
     * 
     */
    public Output<Optional<NotificationDestinationAuthBasic>> authBasic() {
        return Codegen.optional(this.authBasic);
    }
    /**
     * A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.
     * 
     */
    @Export(name="authToken", type=NotificationDestinationAuthToken.class, parameters={})
    private Output</* @Nullable */ NotificationDestinationAuthToken> authToken;

    /**
     * @return A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.
     * 
     */
    public Output<Optional<NotificationDestinationAuthToken>> authToken() {
        return Codegen.optional(this.authToken);
    }
    /**
     * Indicates whether the user is authenticated with the destination.
     * 
     */
    @Export(name="isUserAuthenticated", type=Boolean.class, parameters={})
    private Output<Boolean> isUserAuthenticated;

    /**
     * @return Indicates whether the user is authenticated with the destination.
     * 
     */
    public Output<Boolean> isUserAuthenticated() {
        return this.isUserAuthenticated;
    }
    /**
     * The last time a notification was sent.
     * 
     */
    @Export(name="lastSent", type=String.class, parameters={})
    private Output<String> lastSent;

    /**
     * @return The last time a notification was sent.
     * 
     */
    public Output<String> lastSent() {
        return this.lastSent;
    }
    /**
     * The name of the destination.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the destination.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A nested block that describes a notification destination property. See Nested property blocks below for details.
     * 
     */
    @Export(name="properties", type=List.class, parameters={NotificationDestinationProperty.class})
    private Output<List<NotificationDestinationProperty>> properties;

    /**
     * @return A nested block that describes a notification destination property. See Nested property blocks below for details.
     * 
     */
    public Output<List<NotificationDestinationProperty>> properties() {
        return this.properties;
    }
    /**
     * The status of the destination.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The status of the destination.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The type of destination.  One of: `EMAIL`, `SERVICE_NOW`, `WEBHOOK`, `JIRA`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of destination.  One of: `EMAIL`, `SERVICE_NOW`, `WEBHOOK`, `JIRA`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NotificationDestination(String name) {
        this(name, NotificationDestinationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NotificationDestination(String name, NotificationDestinationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NotificationDestination(String name, NotificationDestinationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/notificationDestination:NotificationDestination", name, args == null ? NotificationDestinationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private NotificationDestination(String name, Output<String> id, @Nullable NotificationDestinationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("newrelic:index/notificationDestination:NotificationDestination", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NotificationDestination get(String name, Output<String> id, @Nullable NotificationDestinationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NotificationDestination(name, id, state, options);
    }
}
