// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type OneDashboardRaw struct {
	pulumi.CustomResourceState

	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntOutput `pulumi:"accountId"`
	// Brief text describing the dashboard.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid pulumi.StringOutput `pulumi:"guid"`
	// The title of the dashboard.
	Name pulumi.StringOutput `pulumi:"name"`
	// A nested block that describes a page. See Nested page blocks below for details.
	Pages OneDashboardRawPageArrayOutput `pulumi:"pages"`
	// The URL for viewing the dashboard.
	Permalink pulumi.StringOutput `pulumi:"permalink"`
	// Determines who can see the dashboard in an account. Valid values are `private`, `publicReadOnly`, or `publicReadWrite`. Defaults to `publicReadOnly`.
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
}

// NewOneDashboardRaw registers a new resource with the given unique name, arguments, and options.
func NewOneDashboardRaw(ctx *pulumi.Context,
	name string, args *OneDashboardRawArgs, opts ...pulumi.ResourceOption) (*OneDashboardRaw, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Pages == nil {
		return nil, errors.New("invalid value for required argument 'Pages'")
	}
	var resource OneDashboardRaw
	err := ctx.RegisterResource("newrelic:index/oneDashboardRaw:OneDashboardRaw", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOneDashboardRaw gets an existing OneDashboardRaw resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOneDashboardRaw(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OneDashboardRawState, opts ...pulumi.ResourceOption) (*OneDashboardRaw, error) {
	var resource OneDashboardRaw
	err := ctx.ReadResource("newrelic:index/oneDashboardRaw:OneDashboardRaw", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OneDashboardRaw resources.
type oneDashboardRawState struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// Brief text describing the dashboard.
	Description *string `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid *string `pulumi:"guid"`
	// The title of the dashboard.
	Name *string `pulumi:"name"`
	// A nested block that describes a page. See Nested page blocks below for details.
	Pages []OneDashboardRawPage `pulumi:"pages"`
	// The URL for viewing the dashboard.
	Permalink *string `pulumi:"permalink"`
	// Determines who can see the dashboard in an account. Valid values are `private`, `publicReadOnly`, or `publicReadWrite`. Defaults to `publicReadOnly`.
	Permissions *string `pulumi:"permissions"`
}

type OneDashboardRawState struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput
	// Brief text describing the dashboard.
	Description pulumi.StringPtrInput
	// The unique entity identifier of the dashboard page in New Relic.
	Guid pulumi.StringPtrInput
	// The title of the dashboard.
	Name pulumi.StringPtrInput
	// A nested block that describes a page. See Nested page blocks below for details.
	Pages OneDashboardRawPageArrayInput
	// The URL for viewing the dashboard.
	Permalink pulumi.StringPtrInput
	// Determines who can see the dashboard in an account. Valid values are `private`, `publicReadOnly`, or `publicReadWrite`. Defaults to `publicReadOnly`.
	Permissions pulumi.StringPtrInput
}

func (OneDashboardRawState) ElementType() reflect.Type {
	return reflect.TypeOf((*oneDashboardRawState)(nil)).Elem()
}

type oneDashboardRawArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// Brief text describing the dashboard.
	Description *string `pulumi:"description"`
	// The title of the dashboard.
	Name *string `pulumi:"name"`
	// A nested block that describes a page. See Nested page blocks below for details.
	Pages []OneDashboardRawPage `pulumi:"pages"`
	// Determines who can see the dashboard in an account. Valid values are `private`, `publicReadOnly`, or `publicReadWrite`. Defaults to `publicReadOnly`.
	Permissions *string `pulumi:"permissions"`
}

// The set of arguments for constructing a OneDashboardRaw resource.
type OneDashboardRawArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput
	// Brief text describing the dashboard.
	Description pulumi.StringPtrInput
	// The title of the dashboard.
	Name pulumi.StringPtrInput
	// A nested block that describes a page. See Nested page blocks below for details.
	Pages OneDashboardRawPageArrayInput
	// Determines who can see the dashboard in an account. Valid values are `private`, `publicReadOnly`, or `publicReadWrite`. Defaults to `publicReadOnly`.
	Permissions pulumi.StringPtrInput
}

func (OneDashboardRawArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oneDashboardRawArgs)(nil)).Elem()
}

type OneDashboardRawInput interface {
	pulumi.Input

	ToOneDashboardRawOutput() OneDashboardRawOutput
	ToOneDashboardRawOutputWithContext(ctx context.Context) OneDashboardRawOutput
}

func (*OneDashboardRaw) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardRaw)(nil))
}

func (i *OneDashboardRaw) ToOneDashboardRawOutput() OneDashboardRawOutput {
	return i.ToOneDashboardRawOutputWithContext(context.Background())
}

func (i *OneDashboardRaw) ToOneDashboardRawOutputWithContext(ctx context.Context) OneDashboardRawOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawOutput)
}

func (i *OneDashboardRaw) ToOneDashboardRawPtrOutput() OneDashboardRawPtrOutput {
	return i.ToOneDashboardRawPtrOutputWithContext(context.Background())
}

func (i *OneDashboardRaw) ToOneDashboardRawPtrOutputWithContext(ctx context.Context) OneDashboardRawPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawPtrOutput)
}

type OneDashboardRawPtrInput interface {
	pulumi.Input

	ToOneDashboardRawPtrOutput() OneDashboardRawPtrOutput
	ToOneDashboardRawPtrOutputWithContext(ctx context.Context) OneDashboardRawPtrOutput
}

type oneDashboardRawPtrType OneDashboardRawArgs

func (*oneDashboardRawPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OneDashboardRaw)(nil))
}

func (i *oneDashboardRawPtrType) ToOneDashboardRawPtrOutput() OneDashboardRawPtrOutput {
	return i.ToOneDashboardRawPtrOutputWithContext(context.Background())
}

func (i *oneDashboardRawPtrType) ToOneDashboardRawPtrOutputWithContext(ctx context.Context) OneDashboardRawPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawPtrOutput)
}

// OneDashboardRawArrayInput is an input type that accepts OneDashboardRawArray and OneDashboardRawArrayOutput values.
// You can construct a concrete instance of `OneDashboardRawArrayInput` via:
//
//          OneDashboardRawArray{ OneDashboardRawArgs{...} }
type OneDashboardRawArrayInput interface {
	pulumi.Input

	ToOneDashboardRawArrayOutput() OneDashboardRawArrayOutput
	ToOneDashboardRawArrayOutputWithContext(context.Context) OneDashboardRawArrayOutput
}

type OneDashboardRawArray []OneDashboardRawInput

func (OneDashboardRawArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*OneDashboardRaw)(nil))
}

func (i OneDashboardRawArray) ToOneDashboardRawArrayOutput() OneDashboardRawArrayOutput {
	return i.ToOneDashboardRawArrayOutputWithContext(context.Background())
}

func (i OneDashboardRawArray) ToOneDashboardRawArrayOutputWithContext(ctx context.Context) OneDashboardRawArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawArrayOutput)
}

// OneDashboardRawMapInput is an input type that accepts OneDashboardRawMap and OneDashboardRawMapOutput values.
// You can construct a concrete instance of `OneDashboardRawMapInput` via:
//
//          OneDashboardRawMap{ "key": OneDashboardRawArgs{...} }
type OneDashboardRawMapInput interface {
	pulumi.Input

	ToOneDashboardRawMapOutput() OneDashboardRawMapOutput
	ToOneDashboardRawMapOutputWithContext(context.Context) OneDashboardRawMapOutput
}

type OneDashboardRawMap map[string]OneDashboardRawInput

func (OneDashboardRawMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*OneDashboardRaw)(nil))
}

func (i OneDashboardRawMap) ToOneDashboardRawMapOutput() OneDashboardRawMapOutput {
	return i.ToOneDashboardRawMapOutputWithContext(context.Background())
}

func (i OneDashboardRawMap) ToOneDashboardRawMapOutputWithContext(ctx context.Context) OneDashboardRawMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawMapOutput)
}

type OneDashboardRawOutput struct {
	*pulumi.OutputState
}

func (OneDashboardRawOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardRaw)(nil))
}

func (o OneDashboardRawOutput) ToOneDashboardRawOutput() OneDashboardRawOutput {
	return o
}

func (o OneDashboardRawOutput) ToOneDashboardRawOutputWithContext(ctx context.Context) OneDashboardRawOutput {
	return o
}

func (o OneDashboardRawOutput) ToOneDashboardRawPtrOutput() OneDashboardRawPtrOutput {
	return o.ToOneDashboardRawPtrOutputWithContext(context.Background())
}

func (o OneDashboardRawOutput) ToOneDashboardRawPtrOutputWithContext(ctx context.Context) OneDashboardRawPtrOutput {
	return o.ApplyT(func(v OneDashboardRaw) *OneDashboardRaw {
		return &v
	}).(OneDashboardRawPtrOutput)
}

type OneDashboardRawPtrOutput struct {
	*pulumi.OutputState
}

func (OneDashboardRawPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OneDashboardRaw)(nil))
}

func (o OneDashboardRawPtrOutput) ToOneDashboardRawPtrOutput() OneDashboardRawPtrOutput {
	return o
}

func (o OneDashboardRawPtrOutput) ToOneDashboardRawPtrOutputWithContext(ctx context.Context) OneDashboardRawPtrOutput {
	return o
}

type OneDashboardRawArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardRawArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardRaw)(nil))
}

func (o OneDashboardRawArrayOutput) ToOneDashboardRawArrayOutput() OneDashboardRawArrayOutput {
	return o
}

func (o OneDashboardRawArrayOutput) ToOneDashboardRawArrayOutputWithContext(ctx context.Context) OneDashboardRawArrayOutput {
	return o
}

func (o OneDashboardRawArrayOutput) Index(i pulumi.IntInput) OneDashboardRawOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardRaw {
		return vs[0].([]OneDashboardRaw)[vs[1].(int)]
	}).(OneDashboardRawOutput)
}

type OneDashboardRawMapOutput struct{ *pulumi.OutputState }

func (OneDashboardRawMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OneDashboardRaw)(nil))
}

func (o OneDashboardRawMapOutput) ToOneDashboardRawMapOutput() OneDashboardRawMapOutput {
	return o
}

func (o OneDashboardRawMapOutput) ToOneDashboardRawMapOutputWithContext(ctx context.Context) OneDashboardRawMapOutput {
	return o
}

func (o OneDashboardRawMapOutput) MapIndex(k pulumi.StringInput) OneDashboardRawOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OneDashboardRaw {
		return vs[0].(map[string]OneDashboardRaw)[vs[1].(string)]
	}).(OneDashboardRawOutput)
}

func init() {
	pulumi.RegisterOutputType(OneDashboardRawOutput{})
	pulumi.RegisterOutputType(OneDashboardRawPtrOutput{})
	pulumi.RegisterOutputType(OneDashboardRawArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardRawMapOutput{})
}
