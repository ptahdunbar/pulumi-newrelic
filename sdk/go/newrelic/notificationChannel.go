// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NotificationChannel struct {
	pulumi.CustomResourceState

	// (Required) The id of the destination.
	DestinationId pulumi.StringOutput `pulumi:"destinationId"`
	// (Required) The name of the channel.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Required) The type of the channel product. One of: (ALERTS, DISCUSSIONS, ERROR_TRACKING, NTFC, SHARING, PD, IINT).
	Product pulumi.StringOutput `pulumi:"product"`
	// List of notification channel property types.
	Properties NotificationChannelPropertyArrayOutput `pulumi:"properties"`
	// (Required) The type of the channel. One of: (WEBHOOK, EMAIL, SERVICENOW_INCIDENTS, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNotificationChannel registers a new resource with the given unique name, arguments, and options.
func NewNotificationChannel(ctx *pulumi.Context,
	name string, args *NotificationChannelArgs, opts ...pulumi.ResourceOption) (*NotificationChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationId == nil {
		return nil, errors.New("invalid value for required argument 'DestinationId'")
	}
	if args.Product == nil {
		return nil, errors.New("invalid value for required argument 'Product'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource NotificationChannel
	err := ctx.RegisterResource("newrelic:index/notificationChannel:NotificationChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationChannel gets an existing NotificationChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationChannelState, opts ...pulumi.ResourceOption) (*NotificationChannel, error) {
	var resource NotificationChannel
	err := ctx.ReadResource("newrelic:index/notificationChannel:NotificationChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationChannel resources.
type notificationChannelState struct {
	// (Required) The id of the destination.
	DestinationId *string `pulumi:"destinationId"`
	// (Required) The name of the channel.
	Name *string `pulumi:"name"`
	// (Required) The type of the channel product. One of: (ALERTS, DISCUSSIONS, ERROR_TRACKING, NTFC, SHARING, PD, IINT).
	Product *string `pulumi:"product"`
	// List of notification channel property types.
	Properties []NotificationChannelProperty `pulumi:"properties"`
	// (Required) The type of the channel. One of: (WEBHOOK, EMAIL, SERVICENOW_INCIDENTS, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION).
	Type *string `pulumi:"type"`
}

type NotificationChannelState struct {
	// (Required) The id of the destination.
	DestinationId pulumi.StringPtrInput
	// (Required) The name of the channel.
	Name pulumi.StringPtrInput
	// (Required) The type of the channel product. One of: (ALERTS, DISCUSSIONS, ERROR_TRACKING, NTFC, SHARING, PD, IINT).
	Product pulumi.StringPtrInput
	// List of notification channel property types.
	Properties NotificationChannelPropertyArrayInput
	// (Required) The type of the channel. One of: (WEBHOOK, EMAIL, SERVICENOW_INCIDENTS, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION).
	Type pulumi.StringPtrInput
}

func (NotificationChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationChannelState)(nil)).Elem()
}

type notificationChannelArgs struct {
	// (Required) The id of the destination.
	DestinationId string `pulumi:"destinationId"`
	// (Required) The name of the channel.
	Name *string `pulumi:"name"`
	// (Required) The type of the channel product. One of: (ALERTS, DISCUSSIONS, ERROR_TRACKING, NTFC, SHARING, PD, IINT).
	Product string `pulumi:"product"`
	// List of notification channel property types.
	Properties []NotificationChannelProperty `pulumi:"properties"`
	// (Required) The type of the channel. One of: (WEBHOOK, EMAIL, SERVICENOW_INCIDENTS, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION).
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NotificationChannel resource.
type NotificationChannelArgs struct {
	// (Required) The id of the destination.
	DestinationId pulumi.StringInput
	// (Required) The name of the channel.
	Name pulumi.StringPtrInput
	// (Required) The type of the channel product. One of: (ALERTS, DISCUSSIONS, ERROR_TRACKING, NTFC, SHARING, PD, IINT).
	Product pulumi.StringInput
	// List of notification channel property types.
	Properties NotificationChannelPropertyArrayInput
	// (Required) The type of the channel. One of: (WEBHOOK, EMAIL, SERVICENOW_INCIDENTS, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION).
	Type pulumi.StringInput
}

func (NotificationChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationChannelArgs)(nil)).Elem()
}

type NotificationChannelInput interface {
	pulumi.Input

	ToNotificationChannelOutput() NotificationChannelOutput
	ToNotificationChannelOutputWithContext(ctx context.Context) NotificationChannelOutput
}

func (*NotificationChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationChannel)(nil)).Elem()
}

func (i *NotificationChannel) ToNotificationChannelOutput() NotificationChannelOutput {
	return i.ToNotificationChannelOutputWithContext(context.Background())
}

func (i *NotificationChannel) ToNotificationChannelOutputWithContext(ctx context.Context) NotificationChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelOutput)
}

// NotificationChannelArrayInput is an input type that accepts NotificationChannelArray and NotificationChannelArrayOutput values.
// You can construct a concrete instance of `NotificationChannelArrayInput` via:
//
//          NotificationChannelArray{ NotificationChannelArgs{...} }
type NotificationChannelArrayInput interface {
	pulumi.Input

	ToNotificationChannelArrayOutput() NotificationChannelArrayOutput
	ToNotificationChannelArrayOutputWithContext(context.Context) NotificationChannelArrayOutput
}

type NotificationChannelArray []NotificationChannelInput

func (NotificationChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationChannel)(nil)).Elem()
}

func (i NotificationChannelArray) ToNotificationChannelArrayOutput() NotificationChannelArrayOutput {
	return i.ToNotificationChannelArrayOutputWithContext(context.Background())
}

func (i NotificationChannelArray) ToNotificationChannelArrayOutputWithContext(ctx context.Context) NotificationChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelArrayOutput)
}

// NotificationChannelMapInput is an input type that accepts NotificationChannelMap and NotificationChannelMapOutput values.
// You can construct a concrete instance of `NotificationChannelMapInput` via:
//
//          NotificationChannelMap{ "key": NotificationChannelArgs{...} }
type NotificationChannelMapInput interface {
	pulumi.Input

	ToNotificationChannelMapOutput() NotificationChannelMapOutput
	ToNotificationChannelMapOutputWithContext(context.Context) NotificationChannelMapOutput
}

type NotificationChannelMap map[string]NotificationChannelInput

func (NotificationChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationChannel)(nil)).Elem()
}

func (i NotificationChannelMap) ToNotificationChannelMapOutput() NotificationChannelMapOutput {
	return i.ToNotificationChannelMapOutputWithContext(context.Background())
}

func (i NotificationChannelMap) ToNotificationChannelMapOutputWithContext(ctx context.Context) NotificationChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationChannelMapOutput)
}

type NotificationChannelOutput struct{ *pulumi.OutputState }

func (NotificationChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationChannel)(nil)).Elem()
}

func (o NotificationChannelOutput) ToNotificationChannelOutput() NotificationChannelOutput {
	return o
}

func (o NotificationChannelOutput) ToNotificationChannelOutputWithContext(ctx context.Context) NotificationChannelOutput {
	return o
}

// (Required) The id of the destination.
func (o NotificationChannelOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

// (Required) The name of the channel.
func (o NotificationChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Required) The type of the channel product. One of: (ALERTS, DISCUSSIONS, ERROR_TRACKING, NTFC, SHARING, PD, IINT).
func (o NotificationChannelOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringOutput { return v.Product }).(pulumi.StringOutput)
}

// List of notification channel property types.
func (o NotificationChannelOutput) Properties() NotificationChannelPropertyArrayOutput {
	return o.ApplyT(func(v *NotificationChannel) NotificationChannelPropertyArrayOutput { return v.Properties }).(NotificationChannelPropertyArrayOutput)
}

// (Required) The type of the channel. One of: (WEBHOOK, EMAIL, SERVICENOW_INCIDENTS, PAGERDUTY_ACCOUNT_INTEGRATION,
// PAGERDUTY_SERVICE_INTEGRATION).
func (o NotificationChannelOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationChannel) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NotificationChannelArrayOutput struct{ *pulumi.OutputState }

func (NotificationChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationChannel)(nil)).Elem()
}

func (o NotificationChannelArrayOutput) ToNotificationChannelArrayOutput() NotificationChannelArrayOutput {
	return o
}

func (o NotificationChannelArrayOutput) ToNotificationChannelArrayOutputWithContext(ctx context.Context) NotificationChannelArrayOutput {
	return o
}

func (o NotificationChannelArrayOutput) Index(i pulumi.IntInput) NotificationChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationChannel {
		return vs[0].([]*NotificationChannel)[vs[1].(int)]
	}).(NotificationChannelOutput)
}

type NotificationChannelMapOutput struct{ *pulumi.OutputState }

func (NotificationChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationChannel)(nil)).Elem()
}

func (o NotificationChannelMapOutput) ToNotificationChannelMapOutput() NotificationChannelMapOutput {
	return o
}

func (o NotificationChannelMapOutput) ToNotificationChannelMapOutputWithContext(ctx context.Context) NotificationChannelMapOutput {
	return o
}

func (o NotificationChannelMapOutput) MapIndex(k pulumi.StringInput) NotificationChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationChannel {
		return vs[0].(map[string]*NotificationChannel)[vs[1].(string)]
	}).(NotificationChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationChannelInput)(nil)).Elem(), &NotificationChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationChannelArrayInput)(nil)).Elem(), NotificationChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationChannelMapInput)(nil)).Elem(), NotificationChannelMap{})
	pulumi.RegisterOutputType(NotificationChannelOutput{})
	pulumi.RegisterOutputType(NotificationChannelArrayOutput{})
	pulumi.RegisterOutputType(NotificationChannelMapOutput{})
}
