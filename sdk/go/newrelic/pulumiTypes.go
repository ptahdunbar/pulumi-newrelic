// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AlertChannelConfig struct {
	// The API key for integrating with OpsGenie.
	ApiKey *string `pulumi:"apiKey"`
	// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
	AuthPassword *string `pulumi:"authPassword"`
	// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
	AuthType *string `pulumi:"authType"`
	// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
	AuthUsername *string `pulumi:"authUsername"`
	// The base URL of the webhook destination.
	BaseUrl *string `pulumi:"baseUrl"`
	// The Slack channel to send notifications to.
	// * `opsgenie`
	Channel *string `pulumi:"channel"`
	// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
	Headers map[string]string `pulumi:"headers"`
	// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
	HeadersString *string `pulumi:"headersString"`
	// `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
	// * `webhook`
	IncludeJsonAttachment *string `pulumi:"includeJsonAttachment"`
	// The key for integrating with VictorOps.
	Key *string `pulumi:"key"`
	// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
	Payload map[string]string `pulumi:"payload"`
	// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
	PayloadString *string `pulumi:"payloadString"`
	// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
	// * `pagerduty`
	PayloadType *string `pulumi:"payloadType"`
	// A set of recipients for targeting notifications.  Multiple values are comma separated.
	Recipients *string `pulumi:"recipients"`
	// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
	Region *string `pulumi:"region"`
	// The route key for integrating with VictorOps.
	// * `slack`
	RouteKey *string `pulumi:"routeKey"`
	// Specifies the service key for integrating with Pagerduty.
	// * `victorops`
	ServiceKey *string `pulumi:"serviceKey"`
	// A set of tags for targeting notifications. Multiple values are comma separated.
	Tags *string `pulumi:"tags"`
	// A set of teams for targeting notifications. Multiple values are comma separated.
	Teams *string `pulumi:"teams"`
	// [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
	Url    *string `pulumi:"url"`
	UserId *string `pulumi:"userId"`
}

// AlertChannelConfigInput is an input type that accepts AlertChannelConfigArgs and AlertChannelConfigOutput values.
// You can construct a concrete instance of `AlertChannelConfigInput` via:
//
//          AlertChannelConfigArgs{...}
type AlertChannelConfigInput interface {
	pulumi.Input

	ToAlertChannelConfigOutput() AlertChannelConfigOutput
	ToAlertChannelConfigOutputWithContext(context.Context) AlertChannelConfigOutput
}

type AlertChannelConfigArgs struct {
	// The API key for integrating with OpsGenie.
	ApiKey pulumi.StringPtrInput `pulumi:"apiKey"`
	// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
	AuthPassword pulumi.StringPtrInput `pulumi:"authPassword"`
	// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
	AuthType pulumi.StringPtrInput `pulumi:"authType"`
	// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
	AuthUsername pulumi.StringPtrInput `pulumi:"authUsername"`
	// The base URL of the webhook destination.
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// The Slack channel to send notifications to.
	// * `opsgenie`
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
	HeadersString pulumi.StringPtrInput `pulumi:"headersString"`
	// `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
	// * `webhook`
	IncludeJsonAttachment pulumi.StringPtrInput `pulumi:"includeJsonAttachment"`
	// The key for integrating with VictorOps.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
	Payload pulumi.StringMapInput `pulumi:"payload"`
	// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
	PayloadString pulumi.StringPtrInput `pulumi:"payloadString"`
	// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
	// * `pagerduty`
	PayloadType pulumi.StringPtrInput `pulumi:"payloadType"`
	// A set of recipients for targeting notifications.  Multiple values are comma separated.
	Recipients pulumi.StringPtrInput `pulumi:"recipients"`
	// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The route key for integrating with VictorOps.
	// * `slack`
	RouteKey pulumi.StringPtrInput `pulumi:"routeKey"`
	// Specifies the service key for integrating with Pagerduty.
	// * `victorops`
	ServiceKey pulumi.StringPtrInput `pulumi:"serviceKey"`
	// A set of tags for targeting notifications. Multiple values are comma separated.
	Tags pulumi.StringPtrInput `pulumi:"tags"`
	// A set of teams for targeting notifications. Multiple values are comma separated.
	Teams pulumi.StringPtrInput `pulumi:"teams"`
	// [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
	Url    pulumi.StringPtrInput `pulumi:"url"`
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (AlertChannelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelConfig)(nil)).Elem()
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigOutput() AlertChannelConfigOutput {
	return i.ToAlertChannelConfigOutputWithContext(context.Background())
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigOutputWithContext(ctx context.Context) AlertChannelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelConfigOutput)
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return i.ToAlertChannelConfigPtrOutputWithContext(context.Background())
}

func (i AlertChannelConfigArgs) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelConfigOutput).ToAlertChannelConfigPtrOutputWithContext(ctx)
}

// AlertChannelConfigPtrInput is an input type that accepts AlertChannelConfigArgs, AlertChannelConfigPtr and AlertChannelConfigPtrOutput values.
// You can construct a concrete instance of `AlertChannelConfigPtrInput` via:
//
//          AlertChannelConfigArgs{...}
//
//  or:
//
//          nil
type AlertChannelConfigPtrInput interface {
	pulumi.Input

	ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput
	ToAlertChannelConfigPtrOutputWithContext(context.Context) AlertChannelConfigPtrOutput
}

type alertChannelConfigPtrType AlertChannelConfigArgs

func AlertChannelConfigPtr(v *AlertChannelConfigArgs) AlertChannelConfigPtrInput {
	return (*alertChannelConfigPtrType)(v)
}

func (*alertChannelConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelConfig)(nil)).Elem()
}

func (i *alertChannelConfigPtrType) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return i.ToAlertChannelConfigPtrOutputWithContext(context.Background())
}

func (i *alertChannelConfigPtrType) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelConfigPtrOutput)
}

type AlertChannelConfigOutput struct{ *pulumi.OutputState }

func (AlertChannelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelConfig)(nil)).Elem()
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigOutput() AlertChannelConfigOutput {
	return o
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigOutputWithContext(ctx context.Context) AlertChannelConfigOutput {
	return o
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return o.ToAlertChannelConfigPtrOutputWithContext(context.Background())
}

func (o AlertChannelConfigOutput) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *AlertChannelConfig {
		return &v
	}).(AlertChannelConfigPtrOutput)
}

// The API key for integrating with OpsGenie.
func (o AlertChannelConfigOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.AuthPassword }).(pulumi.StringPtrOutput)
}

// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
func (o AlertChannelConfigOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigOutput) AuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.AuthUsername }).(pulumi.StringPtrOutput)
}

// The base URL of the webhook destination.
func (o AlertChannelConfigOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// The Slack channel to send notifications to.
// * `opsgenie`
func (o AlertChannelConfigOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
func (o AlertChannelConfigOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertChannelConfig) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
func (o AlertChannelConfigOutput) HeadersString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.HeadersString }).(pulumi.StringPtrOutput)
}

// `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
// * `webhook`
func (o AlertChannelConfigOutput) IncludeJsonAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.IncludeJsonAttachment }).(pulumi.StringPtrOutput)
}

// The key for integrating with VictorOps.
func (o AlertChannelConfigOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
func (o AlertChannelConfigOutput) Payload() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertChannelConfig) map[string]string { return v.Payload }).(pulumi.StringMapOutput)
}

// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
func (o AlertChannelConfigOutput) PayloadString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.PayloadString }).(pulumi.StringPtrOutput)
}

// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
// * `pagerduty`
func (o AlertChannelConfigOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

// A set of recipients for targeting notifications.  Multiple values are comma separated.
func (o AlertChannelConfigOutput) Recipients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Recipients }).(pulumi.StringPtrOutput)
}

// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
func (o AlertChannelConfigOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The route key for integrating with VictorOps.
// * `slack`
func (o AlertChannelConfigOutput) RouteKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.RouteKey }).(pulumi.StringPtrOutput)
}

// Specifies the service key for integrating with Pagerduty.
// * `victorops`
func (o AlertChannelConfigOutput) ServiceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.ServiceKey }).(pulumi.StringPtrOutput)
}

// A set of tags for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

// A set of teams for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigOutput) Teams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Teams }).(pulumi.StringPtrOutput)
}

// [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
func (o AlertChannelConfigOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o AlertChannelConfigOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelConfig) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type AlertChannelConfigPtrOutput struct{ *pulumi.OutputState }

func (AlertChannelConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelConfig)(nil)).Elem()
}

func (o AlertChannelConfigPtrOutput) ToAlertChannelConfigPtrOutput() AlertChannelConfigPtrOutput {
	return o
}

func (o AlertChannelConfigPtrOutput) ToAlertChannelConfigPtrOutputWithContext(ctx context.Context) AlertChannelConfigPtrOutput {
	return o
}

func (o AlertChannelConfigPtrOutput) Elem() AlertChannelConfigOutput {
	return o.ApplyT(func(v *AlertChannelConfig) AlertChannelConfig { return *v }).(AlertChannelConfigOutput)
}

// The API key for integrating with OpsGenie.
func (o AlertChannelConfigPtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// Specifies an authentication password for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigPtrOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies an authentication method for use with a channel.  Supported by the `webhook` channel type.  Only HTTP basic authentication is currently supported via the value `BASIC`.
func (o AlertChannelConfigPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Specifies an authentication username for use with a channel.  Supported by the `webhook` channel type.
func (o AlertChannelConfigPtrOutput) AuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthUsername
	}).(pulumi.StringPtrOutput)
}

// The base URL of the webhook destination.
func (o AlertChannelConfigPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// The Slack channel to send notifications to.
// * `opsgenie`
func (o AlertChannelConfigPtrOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.
func (o AlertChannelConfigPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertChannelConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// Use instead of `headers` if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `headers`.
func (o AlertChannelConfigPtrOutput) HeadersString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.HeadersString
	}).(pulumi.StringPtrOutput)
}

// `true` or `false`. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.
// * `webhook`
func (o AlertChannelConfigPtrOutput) IncludeJsonAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.IncludeJsonAttachment
	}).(pulumi.StringPtrOutput)
}

// The key for integrating with VictorOps.
func (o AlertChannelConfigPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that represents the webhook payload.  Must provide `payloadType` if setting this argument.
func (o AlertChannelConfigPtrOutput) Payload() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertChannelConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(pulumi.StringMapOutput)
}

// Use instead of `payload` if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with `payload`.
func (o AlertChannelConfigPtrOutput) PayloadString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.PayloadString
	}).(pulumi.StringPtrOutput)
}

// Can either be `application/json` or `application/x-www-form-urlencoded`. The `payloadType` argument is _required_ if `payload` is set.
// * `pagerduty`
func (o AlertChannelConfigPtrOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.PayloadType
	}).(pulumi.StringPtrOutput)
}

// A set of recipients for targeting notifications.  Multiple values are comma separated.
func (o AlertChannelConfigPtrOutput) Recipients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Recipients
	}).(pulumi.StringPtrOutput)
}

// The data center region to store your data.  Valid values are `US` and `EU`.  Default is `US`.
func (o AlertChannelConfigPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The route key for integrating with VictorOps.
// * `slack`
func (o AlertChannelConfigPtrOutput) RouteKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.RouteKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the service key for integrating with Pagerduty.
// * `victorops`
func (o AlertChannelConfigPtrOutput) ServiceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceKey
	}).(pulumi.StringPtrOutput)
}

// A set of tags for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigPtrOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringPtrOutput)
}

// A set of teams for targeting notifications. Multiple values are comma separated.
func (o AlertChannelConfigPtrOutput) Teams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Teams
	}).(pulumi.StringPtrOutput)
}

// [Slack Webhook URL](https://slack.com/intl/en-es/help/articles/115005265063-Incoming-webhooks-for-Slack).
func (o AlertChannelConfigPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelConfigPtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelConfig) *string {
		if v == nil {
			return nil
		}
		return v.UserId
	}).(pulumi.StringPtrOutput)
}

type AlertConditionTerm struct {
	Duration     int     `pulumi:"duration"`
	Operator     *string `pulumi:"operator"`
	Priority     *string `pulumi:"priority"`
	Threshold    float64 `pulumi:"threshold"`
	TimeFunction string  `pulumi:"timeFunction"`
}

// AlertConditionTermInput is an input type that accepts AlertConditionTermArgs and AlertConditionTermOutput values.
// You can construct a concrete instance of `AlertConditionTermInput` via:
//
//          AlertConditionTermArgs{...}
type AlertConditionTermInput interface {
	pulumi.Input

	ToAlertConditionTermOutput() AlertConditionTermOutput
	ToAlertConditionTermOutputWithContext(context.Context) AlertConditionTermOutput
}

type AlertConditionTermArgs struct {
	Duration     pulumi.IntInput       `pulumi:"duration"`
	Operator     pulumi.StringPtrInput `pulumi:"operator"`
	Priority     pulumi.StringPtrInput `pulumi:"priority"`
	Threshold    pulumi.Float64Input   `pulumi:"threshold"`
	TimeFunction pulumi.StringInput    `pulumi:"timeFunction"`
}

func (AlertConditionTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertConditionTerm)(nil)).Elem()
}

func (i AlertConditionTermArgs) ToAlertConditionTermOutput() AlertConditionTermOutput {
	return i.ToAlertConditionTermOutputWithContext(context.Background())
}

func (i AlertConditionTermArgs) ToAlertConditionTermOutputWithContext(ctx context.Context) AlertConditionTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConditionTermOutput)
}

// AlertConditionTermArrayInput is an input type that accepts AlertConditionTermArray and AlertConditionTermArrayOutput values.
// You can construct a concrete instance of `AlertConditionTermArrayInput` via:
//
//          AlertConditionTermArray{ AlertConditionTermArgs{...} }
type AlertConditionTermArrayInput interface {
	pulumi.Input

	ToAlertConditionTermArrayOutput() AlertConditionTermArrayOutput
	ToAlertConditionTermArrayOutputWithContext(context.Context) AlertConditionTermArrayOutput
}

type AlertConditionTermArray []AlertConditionTermInput

func (AlertConditionTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertConditionTerm)(nil)).Elem()
}

func (i AlertConditionTermArray) ToAlertConditionTermArrayOutput() AlertConditionTermArrayOutput {
	return i.ToAlertConditionTermArrayOutputWithContext(context.Background())
}

func (i AlertConditionTermArray) ToAlertConditionTermArrayOutputWithContext(ctx context.Context) AlertConditionTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConditionTermArrayOutput)
}

type AlertConditionTermOutput struct{ *pulumi.OutputState }

func (AlertConditionTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertConditionTerm)(nil)).Elem()
}

func (o AlertConditionTermOutput) ToAlertConditionTermOutput() AlertConditionTermOutput {
	return o
}

func (o AlertConditionTermOutput) ToAlertConditionTermOutputWithContext(ctx context.Context) AlertConditionTermOutput {
	return o
}

func (o AlertConditionTermOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v AlertConditionTerm) int { return v.Duration }).(pulumi.IntOutput)
}

func (o AlertConditionTermOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertConditionTerm) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o AlertConditionTermOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertConditionTerm) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

func (o AlertConditionTermOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v AlertConditionTerm) float64 { return v.Threshold }).(pulumi.Float64Output)
}

func (o AlertConditionTermOutput) TimeFunction() pulumi.StringOutput {
	return o.ApplyT(func(v AlertConditionTerm) string { return v.TimeFunction }).(pulumi.StringOutput)
}

type AlertConditionTermArrayOutput struct{ *pulumi.OutputState }

func (AlertConditionTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertConditionTerm)(nil)).Elem()
}

func (o AlertConditionTermArrayOutput) ToAlertConditionTermArrayOutput() AlertConditionTermArrayOutput {
	return o
}

func (o AlertConditionTermArrayOutput) ToAlertConditionTermArrayOutputWithContext(ctx context.Context) AlertConditionTermArrayOutput {
	return o
}

func (o AlertConditionTermArrayOutput) Index(i pulumi.IntInput) AlertConditionTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertConditionTerm {
		return vs[0].([]AlertConditionTerm)[vs[1].(int)]
	}).(AlertConditionTermOutput)
}

type AlertMutingRuleCondition struct {
	// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
	Conditions []AlertMutingRuleConditionCondition `pulumi:"conditions"`
	// The operator used to combine all the MutingRuleConditions within the group.
	Operator string `pulumi:"operator"`
}

// AlertMutingRuleConditionInput is an input type that accepts AlertMutingRuleConditionArgs and AlertMutingRuleConditionOutput values.
// You can construct a concrete instance of `AlertMutingRuleConditionInput` via:
//
//          AlertMutingRuleConditionArgs{...}
type AlertMutingRuleConditionInput interface {
	pulumi.Input

	ToAlertMutingRuleConditionOutput() AlertMutingRuleConditionOutput
	ToAlertMutingRuleConditionOutputWithContext(context.Context) AlertMutingRuleConditionOutput
}

type AlertMutingRuleConditionArgs struct {
	// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
	Conditions AlertMutingRuleConditionConditionArrayInput `pulumi:"conditions"`
	// The operator used to combine all the MutingRuleConditions within the group.
	Operator pulumi.StringInput `pulumi:"operator"`
}

func (AlertMutingRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleCondition)(nil)).Elem()
}

func (i AlertMutingRuleConditionArgs) ToAlertMutingRuleConditionOutput() AlertMutingRuleConditionOutput {
	return i.ToAlertMutingRuleConditionOutputWithContext(context.Background())
}

func (i AlertMutingRuleConditionArgs) ToAlertMutingRuleConditionOutputWithContext(ctx context.Context) AlertMutingRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleConditionOutput)
}

func (i AlertMutingRuleConditionArgs) ToAlertMutingRuleConditionPtrOutput() AlertMutingRuleConditionPtrOutput {
	return i.ToAlertMutingRuleConditionPtrOutputWithContext(context.Background())
}

func (i AlertMutingRuleConditionArgs) ToAlertMutingRuleConditionPtrOutputWithContext(ctx context.Context) AlertMutingRuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleConditionOutput).ToAlertMutingRuleConditionPtrOutputWithContext(ctx)
}

// AlertMutingRuleConditionPtrInput is an input type that accepts AlertMutingRuleConditionArgs, AlertMutingRuleConditionPtr and AlertMutingRuleConditionPtrOutput values.
// You can construct a concrete instance of `AlertMutingRuleConditionPtrInput` via:
//
//          AlertMutingRuleConditionArgs{...}
//
//  or:
//
//          nil
type AlertMutingRuleConditionPtrInput interface {
	pulumi.Input

	ToAlertMutingRuleConditionPtrOutput() AlertMutingRuleConditionPtrOutput
	ToAlertMutingRuleConditionPtrOutputWithContext(context.Context) AlertMutingRuleConditionPtrOutput
}

type alertMutingRuleConditionPtrType AlertMutingRuleConditionArgs

func AlertMutingRuleConditionPtr(v *AlertMutingRuleConditionArgs) AlertMutingRuleConditionPtrInput {
	return (*alertMutingRuleConditionPtrType)(v)
}

func (*alertMutingRuleConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMutingRuleCondition)(nil)).Elem()
}

func (i *alertMutingRuleConditionPtrType) ToAlertMutingRuleConditionPtrOutput() AlertMutingRuleConditionPtrOutput {
	return i.ToAlertMutingRuleConditionPtrOutputWithContext(context.Background())
}

func (i *alertMutingRuleConditionPtrType) ToAlertMutingRuleConditionPtrOutputWithContext(ctx context.Context) AlertMutingRuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleConditionPtrOutput)
}

type AlertMutingRuleConditionOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleCondition)(nil)).Elem()
}

func (o AlertMutingRuleConditionOutput) ToAlertMutingRuleConditionOutput() AlertMutingRuleConditionOutput {
	return o
}

func (o AlertMutingRuleConditionOutput) ToAlertMutingRuleConditionOutputWithContext(ctx context.Context) AlertMutingRuleConditionOutput {
	return o
}

func (o AlertMutingRuleConditionOutput) ToAlertMutingRuleConditionPtrOutput() AlertMutingRuleConditionPtrOutput {
	return o.ToAlertMutingRuleConditionPtrOutputWithContext(context.Background())
}

func (o AlertMutingRuleConditionOutput) ToAlertMutingRuleConditionPtrOutputWithContext(ctx context.Context) AlertMutingRuleConditionPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleCondition) *AlertMutingRuleCondition {
		return &v
	}).(AlertMutingRuleConditionPtrOutput)
}

// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
func (o AlertMutingRuleConditionOutput) Conditions() AlertMutingRuleConditionConditionArrayOutput {
	return o.ApplyT(func(v AlertMutingRuleCondition) []AlertMutingRuleConditionCondition { return v.Conditions }).(AlertMutingRuleConditionConditionArrayOutput)
}

// The operator used to combine all the MutingRuleConditions within the group.
func (o AlertMutingRuleConditionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleCondition) string { return v.Operator }).(pulumi.StringOutput)
}

type AlertMutingRuleConditionPtrOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMutingRuleCondition)(nil)).Elem()
}

func (o AlertMutingRuleConditionPtrOutput) ToAlertMutingRuleConditionPtrOutput() AlertMutingRuleConditionPtrOutput {
	return o
}

func (o AlertMutingRuleConditionPtrOutput) ToAlertMutingRuleConditionPtrOutputWithContext(ctx context.Context) AlertMutingRuleConditionPtrOutput {
	return o
}

func (o AlertMutingRuleConditionPtrOutput) Elem() AlertMutingRuleConditionOutput {
	return o.ApplyT(func(v *AlertMutingRuleCondition) AlertMutingRuleCondition { return *v }).(AlertMutingRuleConditionOutput)
}

// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
func (o AlertMutingRuleConditionPtrOutput) Conditions() AlertMutingRuleConditionConditionArrayOutput {
	return o.ApplyT(func(v *AlertMutingRuleCondition) []AlertMutingRuleConditionCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(AlertMutingRuleConditionConditionArrayOutput)
}

// The operator used to combine all the MutingRuleConditions within the group.
func (o AlertMutingRuleConditionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

type AlertMutingRuleConditionCondition struct {
	// The attribute on a violation.
	Attribute string `pulumi:"attribute"`
	// The operator used to compare the attribute's value with the supplied value(s)
	Operator string `pulumi:"operator"`
	// The value(s) to compare against the attribute's value.
	Values []string `pulumi:"values"`
}

// AlertMutingRuleConditionConditionInput is an input type that accepts AlertMutingRuleConditionConditionArgs and AlertMutingRuleConditionConditionOutput values.
// You can construct a concrete instance of `AlertMutingRuleConditionConditionInput` via:
//
//          AlertMutingRuleConditionConditionArgs{...}
type AlertMutingRuleConditionConditionInput interface {
	pulumi.Input

	ToAlertMutingRuleConditionConditionOutput() AlertMutingRuleConditionConditionOutput
	ToAlertMutingRuleConditionConditionOutputWithContext(context.Context) AlertMutingRuleConditionConditionOutput
}

type AlertMutingRuleConditionConditionArgs struct {
	// The attribute on a violation.
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// The operator used to compare the attribute's value with the supplied value(s)
	Operator pulumi.StringInput `pulumi:"operator"`
	// The value(s) to compare against the attribute's value.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertMutingRuleConditionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleConditionCondition)(nil)).Elem()
}

func (i AlertMutingRuleConditionConditionArgs) ToAlertMutingRuleConditionConditionOutput() AlertMutingRuleConditionConditionOutput {
	return i.ToAlertMutingRuleConditionConditionOutputWithContext(context.Background())
}

func (i AlertMutingRuleConditionConditionArgs) ToAlertMutingRuleConditionConditionOutputWithContext(ctx context.Context) AlertMutingRuleConditionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleConditionConditionOutput)
}

// AlertMutingRuleConditionConditionArrayInput is an input type that accepts AlertMutingRuleConditionConditionArray and AlertMutingRuleConditionConditionArrayOutput values.
// You can construct a concrete instance of `AlertMutingRuleConditionConditionArrayInput` via:
//
//          AlertMutingRuleConditionConditionArray{ AlertMutingRuleConditionConditionArgs{...} }
type AlertMutingRuleConditionConditionArrayInput interface {
	pulumi.Input

	ToAlertMutingRuleConditionConditionArrayOutput() AlertMutingRuleConditionConditionArrayOutput
	ToAlertMutingRuleConditionConditionArrayOutputWithContext(context.Context) AlertMutingRuleConditionConditionArrayOutput
}

type AlertMutingRuleConditionConditionArray []AlertMutingRuleConditionConditionInput

func (AlertMutingRuleConditionConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertMutingRuleConditionCondition)(nil)).Elem()
}

func (i AlertMutingRuleConditionConditionArray) ToAlertMutingRuleConditionConditionArrayOutput() AlertMutingRuleConditionConditionArrayOutput {
	return i.ToAlertMutingRuleConditionConditionArrayOutputWithContext(context.Background())
}

func (i AlertMutingRuleConditionConditionArray) ToAlertMutingRuleConditionConditionArrayOutputWithContext(ctx context.Context) AlertMutingRuleConditionConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleConditionConditionArrayOutput)
}

type AlertMutingRuleConditionConditionOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleConditionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleConditionCondition)(nil)).Elem()
}

func (o AlertMutingRuleConditionConditionOutput) ToAlertMutingRuleConditionConditionOutput() AlertMutingRuleConditionConditionOutput {
	return o
}

func (o AlertMutingRuleConditionConditionOutput) ToAlertMutingRuleConditionConditionOutputWithContext(ctx context.Context) AlertMutingRuleConditionConditionOutput {
	return o
}

// The attribute on a violation.
func (o AlertMutingRuleConditionConditionOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleConditionCondition) string { return v.Attribute }).(pulumi.StringOutput)
}

// The operator used to compare the attribute's value with the supplied value(s)
func (o AlertMutingRuleConditionConditionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleConditionCondition) string { return v.Operator }).(pulumi.StringOutput)
}

// The value(s) to compare against the attribute's value.
func (o AlertMutingRuleConditionConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertMutingRuleConditionCondition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertMutingRuleConditionConditionArrayOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleConditionConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertMutingRuleConditionCondition)(nil)).Elem()
}

func (o AlertMutingRuleConditionConditionArrayOutput) ToAlertMutingRuleConditionConditionArrayOutput() AlertMutingRuleConditionConditionArrayOutput {
	return o
}

func (o AlertMutingRuleConditionConditionArrayOutput) ToAlertMutingRuleConditionConditionArrayOutputWithContext(ctx context.Context) AlertMutingRuleConditionConditionArrayOutput {
	return o
}

func (o AlertMutingRuleConditionConditionArrayOutput) Index(i pulumi.IntInput) AlertMutingRuleConditionConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertMutingRuleConditionCondition {
		return vs[0].([]AlertMutingRuleConditionCondition)[vs[1].(int)]
	}).(AlertMutingRuleConditionConditionOutput)
}

type AlertMutingRuleSchedule struct {
	// The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
	EndRepeat *string `pulumi:"endRepeat"`
	// The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
	EndTime *string `pulumi:"endTime"`
	// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
	Repeat *string `pulumi:"repeat"`
	// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
	RepeatCount *int `pulumi:"repeatCount"`
	// The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
	StartTime *string `pulumi:"startTime"`
	TimeZone  string  `pulumi:"timeZone"`
	// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
	WeeklyRepeatDays []string `pulumi:"weeklyRepeatDays"`
}

// AlertMutingRuleScheduleInput is an input type that accepts AlertMutingRuleScheduleArgs and AlertMutingRuleScheduleOutput values.
// You can construct a concrete instance of `AlertMutingRuleScheduleInput` via:
//
//          AlertMutingRuleScheduleArgs{...}
type AlertMutingRuleScheduleInput interface {
	pulumi.Input

	ToAlertMutingRuleScheduleOutput() AlertMutingRuleScheduleOutput
	ToAlertMutingRuleScheduleOutputWithContext(context.Context) AlertMutingRuleScheduleOutput
}

type AlertMutingRuleScheduleArgs struct {
	// The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
	EndRepeat pulumi.StringPtrInput `pulumi:"endRepeat"`
	// The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
	Repeat pulumi.StringPtrInput `pulumi:"repeat"`
	// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
	RepeatCount pulumi.IntPtrInput `pulumi:"repeatCount"`
	// The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	TimeZone  pulumi.StringInput    `pulumi:"timeZone"`
	// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
	WeeklyRepeatDays pulumi.StringArrayInput `pulumi:"weeklyRepeatDays"`
}

func (AlertMutingRuleScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleSchedule)(nil)).Elem()
}

func (i AlertMutingRuleScheduleArgs) ToAlertMutingRuleScheduleOutput() AlertMutingRuleScheduleOutput {
	return i.ToAlertMutingRuleScheduleOutputWithContext(context.Background())
}

func (i AlertMutingRuleScheduleArgs) ToAlertMutingRuleScheduleOutputWithContext(ctx context.Context) AlertMutingRuleScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleScheduleOutput)
}

func (i AlertMutingRuleScheduleArgs) ToAlertMutingRuleSchedulePtrOutput() AlertMutingRuleSchedulePtrOutput {
	return i.ToAlertMutingRuleSchedulePtrOutputWithContext(context.Background())
}

func (i AlertMutingRuleScheduleArgs) ToAlertMutingRuleSchedulePtrOutputWithContext(ctx context.Context) AlertMutingRuleSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleScheduleOutput).ToAlertMutingRuleSchedulePtrOutputWithContext(ctx)
}

// AlertMutingRuleSchedulePtrInput is an input type that accepts AlertMutingRuleScheduleArgs, AlertMutingRuleSchedulePtr and AlertMutingRuleSchedulePtrOutput values.
// You can construct a concrete instance of `AlertMutingRuleSchedulePtrInput` via:
//
//          AlertMutingRuleScheduleArgs{...}
//
//  or:
//
//          nil
type AlertMutingRuleSchedulePtrInput interface {
	pulumi.Input

	ToAlertMutingRuleSchedulePtrOutput() AlertMutingRuleSchedulePtrOutput
	ToAlertMutingRuleSchedulePtrOutputWithContext(context.Context) AlertMutingRuleSchedulePtrOutput
}

type alertMutingRuleSchedulePtrType AlertMutingRuleScheduleArgs

func AlertMutingRuleSchedulePtr(v *AlertMutingRuleScheduleArgs) AlertMutingRuleSchedulePtrInput {
	return (*alertMutingRuleSchedulePtrType)(v)
}

func (*alertMutingRuleSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMutingRuleSchedule)(nil)).Elem()
}

func (i *alertMutingRuleSchedulePtrType) ToAlertMutingRuleSchedulePtrOutput() AlertMutingRuleSchedulePtrOutput {
	return i.ToAlertMutingRuleSchedulePtrOutputWithContext(context.Background())
}

func (i *alertMutingRuleSchedulePtrType) ToAlertMutingRuleSchedulePtrOutputWithContext(ctx context.Context) AlertMutingRuleSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMutingRuleSchedulePtrOutput)
}

type AlertMutingRuleScheduleOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertMutingRuleSchedule)(nil)).Elem()
}

func (o AlertMutingRuleScheduleOutput) ToAlertMutingRuleScheduleOutput() AlertMutingRuleScheduleOutput {
	return o
}

func (o AlertMutingRuleScheduleOutput) ToAlertMutingRuleScheduleOutputWithContext(ctx context.Context) AlertMutingRuleScheduleOutput {
	return o
}

func (o AlertMutingRuleScheduleOutput) ToAlertMutingRuleSchedulePtrOutput() AlertMutingRuleSchedulePtrOutput {
	return o.ToAlertMutingRuleSchedulePtrOutputWithContext(context.Background())
}

func (o AlertMutingRuleScheduleOutput) ToAlertMutingRuleSchedulePtrOutputWithContext(ctx context.Context) AlertMutingRuleSchedulePtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *AlertMutingRuleSchedule {
		return &v
	}).(AlertMutingRuleSchedulePtrOutput)
}

// The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
func (o AlertMutingRuleScheduleOutput) EndRepeat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *string { return v.EndRepeat }).(pulumi.StringPtrOutput)
}

// The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
func (o AlertMutingRuleScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
func (o AlertMutingRuleScheduleOutput) Repeat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *string { return v.Repeat }).(pulumi.StringPtrOutput)
}

// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
func (o AlertMutingRuleScheduleOutput) RepeatCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *int { return v.RepeatCount }).(pulumi.IntPtrOutput)
}

// The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
func (o AlertMutingRuleScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

func (o AlertMutingRuleScheduleOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) string { return v.TimeZone }).(pulumi.StringOutput)
}

// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
func (o AlertMutingRuleScheduleOutput) WeeklyRepeatDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertMutingRuleSchedule) []string { return v.WeeklyRepeatDays }).(pulumi.StringArrayOutput)
}

type AlertMutingRuleSchedulePtrOutput struct{ *pulumi.OutputState }

func (AlertMutingRuleSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertMutingRuleSchedule)(nil)).Elem()
}

func (o AlertMutingRuleSchedulePtrOutput) ToAlertMutingRuleSchedulePtrOutput() AlertMutingRuleSchedulePtrOutput {
	return o
}

func (o AlertMutingRuleSchedulePtrOutput) ToAlertMutingRuleSchedulePtrOutputWithContext(ctx context.Context) AlertMutingRuleSchedulePtrOutput {
	return o
}

func (o AlertMutingRuleSchedulePtrOutput) Elem() AlertMutingRuleScheduleOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) AlertMutingRuleSchedule { return *v }).(AlertMutingRuleScheduleOutput)
}

// The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: '2020-07-10T15:00:00'. Conflicts with `repeatCount`
func (o AlertMutingRuleSchedulePtrOutput) EndRepeat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndRepeat
	}).(pulumi.StringPtrOutput)
}

// The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: '2020-07-15T14:30:00'
func (o AlertMutingRuleSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
func (o AlertMutingRuleSchedulePtrOutput) Repeat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Repeat
	}).(pulumi.StringPtrOutput)
}

// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with `endRepeat`
func (o AlertMutingRuleSchedulePtrOutput) RepeatCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *int {
		if v == nil {
			return nil
		}
		return v.RepeatCount
	}).(pulumi.IntPtrOutput)
}

// The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: '2020-07-08T14:30:00'
func (o AlertMutingRuleSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

func (o AlertMutingRuleSchedulePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
func (o AlertMutingRuleSchedulePtrOutput) WeeklyRepeatDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertMutingRuleSchedule) []string {
		if v == nil {
			return nil
		}
		return v.WeeklyRepeatDays
	}).(pulumi.StringArrayOutput)
}

type DashboardFilter struct {
	// (Optional) A list of attributes belonging to the specified event types to enable filtering for.
	Attributes []string `pulumi:"attributes"`
	// (Optional) A list of event types to enable filtering for.
	EventTypes []string `pulumi:"eventTypes"`
}

// DashboardFilterInput is an input type that accepts DashboardFilterArgs and DashboardFilterOutput values.
// You can construct a concrete instance of `DashboardFilterInput` via:
//
//          DashboardFilterArgs{...}
type DashboardFilterInput interface {
	pulumi.Input

	ToDashboardFilterOutput() DashboardFilterOutput
	ToDashboardFilterOutputWithContext(context.Context) DashboardFilterOutput
}

type DashboardFilterArgs struct {
	// (Optional) A list of attributes belonging to the specified event types to enable filtering for.
	Attributes pulumi.StringArrayInput `pulumi:"attributes"`
	// (Optional) A list of event types to enable filtering for.
	EventTypes pulumi.StringArrayInput `pulumi:"eventTypes"`
}

func (DashboardFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilter)(nil)).Elem()
}

func (i DashboardFilterArgs) ToDashboardFilterOutput() DashboardFilterOutput {
	return i.ToDashboardFilterOutputWithContext(context.Background())
}

func (i DashboardFilterArgs) ToDashboardFilterOutputWithContext(ctx context.Context) DashboardFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterOutput)
}

func (i DashboardFilterArgs) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return i.ToDashboardFilterPtrOutputWithContext(context.Background())
}

func (i DashboardFilterArgs) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterOutput).ToDashboardFilterPtrOutputWithContext(ctx)
}

// DashboardFilterPtrInput is an input type that accepts DashboardFilterArgs, DashboardFilterPtr and DashboardFilterPtrOutput values.
// You can construct a concrete instance of `DashboardFilterPtrInput` via:
//
//          DashboardFilterArgs{...}
//
//  or:
//
//          nil
type DashboardFilterPtrInput interface {
	pulumi.Input

	ToDashboardFilterPtrOutput() DashboardFilterPtrOutput
	ToDashboardFilterPtrOutputWithContext(context.Context) DashboardFilterPtrOutput
}

type dashboardFilterPtrType DashboardFilterArgs

func DashboardFilterPtr(v *DashboardFilterArgs) DashboardFilterPtrInput {
	return (*dashboardFilterPtrType)(v)
}

func (*dashboardFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardFilter)(nil)).Elem()
}

func (i *dashboardFilterPtrType) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return i.ToDashboardFilterPtrOutputWithContext(context.Background())
}

func (i *dashboardFilterPtrType) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardFilterPtrOutput)
}

type DashboardFilterOutput struct{ *pulumi.OutputState }

func (DashboardFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilter)(nil)).Elem()
}

func (o DashboardFilterOutput) ToDashboardFilterOutput() DashboardFilterOutput {
	return o
}

func (o DashboardFilterOutput) ToDashboardFilterOutputWithContext(ctx context.Context) DashboardFilterOutput {
	return o
}

func (o DashboardFilterOutput) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return o.ToDashboardFilterPtrOutputWithContext(context.Background())
}

func (o DashboardFilterOutput) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return o.ApplyT(func(v DashboardFilter) *DashboardFilter {
		return &v
	}).(DashboardFilterPtrOutput)
}

// (Optional) A list of attributes belonging to the specified event types to enable filtering for.
func (o DashboardFilterOutput) Attributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardFilter) []string { return v.Attributes }).(pulumi.StringArrayOutput)
}

// (Optional) A list of event types to enable filtering for.
func (o DashboardFilterOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardFilter) []string { return v.EventTypes }).(pulumi.StringArrayOutput)
}

type DashboardFilterPtrOutput struct{ *pulumi.OutputState }

func (DashboardFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardFilter)(nil)).Elem()
}

func (o DashboardFilterPtrOutput) ToDashboardFilterPtrOutput() DashboardFilterPtrOutput {
	return o
}

func (o DashboardFilterPtrOutput) ToDashboardFilterPtrOutputWithContext(ctx context.Context) DashboardFilterPtrOutput {
	return o
}

func (o DashboardFilterPtrOutput) Elem() DashboardFilterOutput {
	return o.ApplyT(func(v *DashboardFilter) DashboardFilter { return *v }).(DashboardFilterOutput)
}

// (Optional) A list of attributes belonging to the specified event types to enable filtering for.
func (o DashboardFilterPtrOutput) Attributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardFilter) []string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringArrayOutput)
}

// (Optional) A list of event types to enable filtering for.
func (o DashboardFilterPtrOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DashboardFilter) []string {
		if v == nil {
			return nil
		}
		return v.EventTypes
	}).(pulumi.StringArrayOutput)
}

type DashboardWidget struct {
	// (Optional) The account ID to use when querying data. If `accountId` is omitted, the widget will use the account ID associated with the API key used in your provider configuration. You can also use `accountId` to configure cross-account widgets or simply to be explicit about which account the widget will be pulling data from.
	AccountId *int `pulumi:"accountId"`
	// (Required) Column position of widget from top left, starting at `1`.
	Column       int                          `pulumi:"column"`
	CompareWiths []DashboardWidgetCompareWith `pulumi:"compareWiths"`
	// (Optional) The ID of a dashboard to link to from the widget's facets.
	// * `attributeSheet`, `comparisonLineChart`, `eventFeed`, `eventTable`, `funnel`, `histogram`, `lineChart`, `rawJson`, `singleEvent`, or `uniquesList`:
	DrilldownDashboardId *int `pulumi:"drilldownDashboardId"`
	// (Required) The duration, in ms, of the time window represented in the chart.
	Duration *int `pulumi:"duration"`
	// (Optional) The end time of the time window represented in the chart in epoch time.  When not set, the time window will end at the current time.
	EndTime *int `pulumi:"endTime"`
	// (Required) A collection of entity IDs to display data. These are typically application IDs.
	EntityIds []int `pulumi:"entityIds"`
	// (Optional) Can be set to "host" to facet the metric data by host.
	Facet *string `pulumi:"facet"`
	// (Optional) Height of the widget.  Valid values are `1` to `3` inclusive.  Defaults to `1`.
	Height *int `pulumi:"height"`
	// (Optional) The limit of distinct data series to display.  Requires `orderBy` to be set.
	Limit *int `pulumi:"limit"`
	// (Required) A nested block that describes a metric.  Nested `metric` blocks support the following arguments:
	Metrics []DashboardWidgetMetric `pulumi:"metrics"`
	// (Optional) Description of the widget.
	Notes *string `pulumi:"notes"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	// * `markdown`:
	Nrql *string `pulumi:"nrql"`
	// (Optional) Set the order of the results.  Required when using `limit`.
	// * `applicationBreakdown`:
	OrderBy       *string `pulumi:"orderBy"`
	RawMetricName *string `pulumi:"rawMetricName"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) The markdown source to be rendered in the widget.
	// * `metricLineChart`:
	Source *string `pulumi:"source"`
	// (Required) Threshold above which the displayed value will be styled with a red color.
	ThresholdRed *float64 `pulumi:"thresholdRed"`
	// (Optional) Threshold above which the displayed value will be styled with a yellow color.
	// * `facetBarChart`, `facetPieChart`, `facetTable`, `facetedAreaChart`, `facetedLineChart`, or `heatmap`:
	ThresholdYellow *float64 `pulumi:"thresholdYellow"`
	// The title of the dashboard.
	Title string `pulumi:"title"`
	// (Required) How the widget visualizes data.  Valid values are `billboard`, `gauge`, `billboardComparison`, `facetBarChart`, `facetedLineChart`, `facetPieChart`, `facetTable`, `facetedAreaChart`, `heatmap`, `attributeSheet`, `singleEvent`, `histogram`, `funnel`, `rawJson`, `eventFeed`, `eventTable`, `uniquesList`, `lineChart`, `comparisonLineChart`, `markdown`, and `metricLineChart`.
	Visualization string `pulumi:"visualization"`
	WidgetId      *int   `pulumi:"widgetId"`
	// (Optional) Width of the widget.  Valid values are `1` to `3` inclusive.  Defaults to `1`.
	Width *int `pulumi:"width"`
}

// DashboardWidgetInput is an input type that accepts DashboardWidgetArgs and DashboardWidgetOutput values.
// You can construct a concrete instance of `DashboardWidgetInput` via:
//
//          DashboardWidgetArgs{...}
type DashboardWidgetInput interface {
	pulumi.Input

	ToDashboardWidgetOutput() DashboardWidgetOutput
	ToDashboardWidgetOutputWithContext(context.Context) DashboardWidgetOutput
}

type DashboardWidgetArgs struct {
	// (Optional) The account ID to use when querying data. If `accountId` is omitted, the widget will use the account ID associated with the API key used in your provider configuration. You can also use `accountId` to configure cross-account widgets or simply to be explicit about which account the widget will be pulling data from.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Column position of widget from top left, starting at `1`.
	Column       pulumi.IntInput                      `pulumi:"column"`
	CompareWiths DashboardWidgetCompareWithArrayInput `pulumi:"compareWiths"`
	// (Optional) The ID of a dashboard to link to from the widget's facets.
	// * `attributeSheet`, `comparisonLineChart`, `eventFeed`, `eventTable`, `funnel`, `histogram`, `lineChart`, `rawJson`, `singleEvent`, or `uniquesList`:
	DrilldownDashboardId pulumi.IntPtrInput `pulumi:"drilldownDashboardId"`
	// (Required) The duration, in ms, of the time window represented in the chart.
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// (Optional) The end time of the time window represented in the chart in epoch time.  When not set, the time window will end at the current time.
	EndTime pulumi.IntPtrInput `pulumi:"endTime"`
	// (Required) A collection of entity IDs to display data. These are typically application IDs.
	EntityIds pulumi.IntArrayInput `pulumi:"entityIds"`
	// (Optional) Can be set to "host" to facet the metric data by host.
	Facet pulumi.StringPtrInput `pulumi:"facet"`
	// (Optional) Height of the widget.  Valid values are `1` to `3` inclusive.  Defaults to `1`.
	Height pulumi.IntPtrInput `pulumi:"height"`
	// (Optional) The limit of distinct data series to display.  Requires `orderBy` to be set.
	Limit pulumi.IntPtrInput `pulumi:"limit"`
	// (Required) A nested block that describes a metric.  Nested `metric` blocks support the following arguments:
	Metrics DashboardWidgetMetricArrayInput `pulumi:"metrics"`
	// (Optional) Description of the widget.
	Notes pulumi.StringPtrInput `pulumi:"notes"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	// * `markdown`:
	Nrql pulumi.StringPtrInput `pulumi:"nrql"`
	// (Optional) Set the order of the results.  Required when using `limit`.
	// * `applicationBreakdown`:
	OrderBy       pulumi.StringPtrInput `pulumi:"orderBy"`
	RawMetricName pulumi.StringPtrInput `pulumi:"rawMetricName"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) The markdown source to be rendered in the widget.
	// * `metricLineChart`:
	Source pulumi.StringPtrInput `pulumi:"source"`
	// (Required) Threshold above which the displayed value will be styled with a red color.
	ThresholdRed pulumi.Float64PtrInput `pulumi:"thresholdRed"`
	// (Optional) Threshold above which the displayed value will be styled with a yellow color.
	// * `facetBarChart`, `facetPieChart`, `facetTable`, `facetedAreaChart`, `facetedLineChart`, or `heatmap`:
	ThresholdYellow pulumi.Float64PtrInput `pulumi:"thresholdYellow"`
	// The title of the dashboard.
	Title pulumi.StringInput `pulumi:"title"`
	// (Required) How the widget visualizes data.  Valid values are `billboard`, `gauge`, `billboardComparison`, `facetBarChart`, `facetedLineChart`, `facetPieChart`, `facetTable`, `facetedAreaChart`, `heatmap`, `attributeSheet`, `singleEvent`, `histogram`, `funnel`, `rawJson`, `eventFeed`, `eventTable`, `uniquesList`, `lineChart`, `comparisonLineChart`, `markdown`, and `metricLineChart`.
	Visualization pulumi.StringInput `pulumi:"visualization"`
	WidgetId      pulumi.IntPtrInput `pulumi:"widgetId"`
	// (Optional) Width of the widget.  Valid values are `1` to `3` inclusive.  Defaults to `1`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (DashboardWidgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidget)(nil)).Elem()
}

func (i DashboardWidgetArgs) ToDashboardWidgetOutput() DashboardWidgetOutput {
	return i.ToDashboardWidgetOutputWithContext(context.Background())
}

func (i DashboardWidgetArgs) ToDashboardWidgetOutputWithContext(ctx context.Context) DashboardWidgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetOutput)
}

// DashboardWidgetArrayInput is an input type that accepts DashboardWidgetArray and DashboardWidgetArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetArrayInput` via:
//
//          DashboardWidgetArray{ DashboardWidgetArgs{...} }
type DashboardWidgetArrayInput interface {
	pulumi.Input

	ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput
	ToDashboardWidgetArrayOutputWithContext(context.Context) DashboardWidgetArrayOutput
}

type DashboardWidgetArray []DashboardWidgetInput

func (DashboardWidgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidget)(nil)).Elem()
}

func (i DashboardWidgetArray) ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput {
	return i.ToDashboardWidgetArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetArray) ToDashboardWidgetArrayOutputWithContext(ctx context.Context) DashboardWidgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetArrayOutput)
}

type DashboardWidgetOutput struct{ *pulumi.OutputState }

func (DashboardWidgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidget)(nil)).Elem()
}

func (o DashboardWidgetOutput) ToDashboardWidgetOutput() DashboardWidgetOutput {
	return o
}

func (o DashboardWidgetOutput) ToDashboardWidgetOutputWithContext(ctx context.Context) DashboardWidgetOutput {
	return o
}

// (Optional) The account ID to use when querying data. If `accountId` is omitted, the widget will use the account ID associated with the API key used in your provider configuration. You can also use `accountId` to configure cross-account widgets or simply to be explicit about which account the widget will be pulling data from.
func (o DashboardWidgetOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Column position of widget from top left, starting at `1`.
func (o DashboardWidgetOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidget) int { return v.Column }).(pulumi.IntOutput)
}

func (o DashboardWidgetOutput) CompareWiths() DashboardWidgetCompareWithArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []DashboardWidgetCompareWith { return v.CompareWiths }).(DashboardWidgetCompareWithArrayOutput)
}

// (Optional) The ID of a dashboard to link to from the widget's facets.
// * `attributeSheet`, `comparisonLineChart`, `eventFeed`, `eventTable`, `funnel`, `histogram`, `lineChart`, `rawJson`, `singleEvent`, or `uniquesList`:
func (o DashboardWidgetOutput) DrilldownDashboardId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.DrilldownDashboardId }).(pulumi.IntPtrOutput)
}

// (Required) The duration, in ms, of the time window represented in the chart.
func (o DashboardWidgetOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// (Optional) The end time of the time window represented in the chart in epoch time.  When not set, the time window will end at the current time.
func (o DashboardWidgetOutput) EndTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.EndTime }).(pulumi.IntPtrOutput)
}

// (Required) A collection of entity IDs to display data. These are typically application IDs.
func (o DashboardWidgetOutput) EntityIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []int { return v.EntityIds }).(pulumi.IntArrayOutput)
}

// (Optional) Can be set to "host" to facet the metric data by host.
func (o DashboardWidgetOutput) Facet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Facet }).(pulumi.StringPtrOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `3` inclusive.  Defaults to `1`.
func (o DashboardWidgetOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Height }).(pulumi.IntPtrOutput)
}

// (Optional) The limit of distinct data series to display.  Requires `orderBy` to be set.
func (o DashboardWidgetOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

// (Required) A nested block that describes a metric.  Nested `metric` blocks support the following arguments:
func (o DashboardWidgetOutput) Metrics() DashboardWidgetMetricArrayOutput {
	return o.ApplyT(func(v DashboardWidget) []DashboardWidgetMetric { return v.Metrics }).(DashboardWidgetMetricArrayOutput)
}

// (Optional) Description of the widget.
func (o DashboardWidgetOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
// * `markdown`:
func (o DashboardWidgetOutput) Nrql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Nrql }).(pulumi.StringPtrOutput)
}

// (Optional) Set the order of the results.  Required when using `limit`.
// * `applicationBreakdown`:
func (o DashboardWidgetOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetOutput) RawMetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.RawMetricName }).(pulumi.StringPtrOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o DashboardWidgetOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v DashboardWidget) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) The markdown source to be rendered in the widget.
// * `metricLineChart`:
func (o DashboardWidgetOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// (Required) Threshold above which the displayed value will be styled with a red color.
func (o DashboardWidgetOutput) ThresholdRed() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardWidget) *float64 { return v.ThresholdRed }).(pulumi.Float64PtrOutput)
}

// (Optional) Threshold above which the displayed value will be styled with a yellow color.
// * `facetBarChart`, `facetPieChart`, `facetTable`, `facetedAreaChart`, `facetedLineChart`, or `heatmap`:
func (o DashboardWidgetOutput) ThresholdYellow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DashboardWidget) *float64 { return v.ThresholdYellow }).(pulumi.Float64PtrOutput)
}

// The title of the dashboard.
func (o DashboardWidgetOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidget) string { return v.Title }).(pulumi.StringOutput)
}

// (Required) How the widget visualizes data.  Valid values are `billboard`, `gauge`, `billboardComparison`, `facetBarChart`, `facetedLineChart`, `facetPieChart`, `facetTable`, `facetedAreaChart`, `heatmap`, `attributeSheet`, `singleEvent`, `histogram`, `funnel`, `rawJson`, `eventFeed`, `eventTable`, `uniquesList`, `lineChart`, `comparisonLineChart`, `markdown`, and `metricLineChart`.
func (o DashboardWidgetOutput) Visualization() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidget) string { return v.Visualization }).(pulumi.StringOutput)
}

func (o DashboardWidgetOutput) WidgetId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.WidgetId }).(pulumi.IntPtrOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `3` inclusive.  Defaults to `1`.
func (o DashboardWidgetOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DashboardWidget) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type DashboardWidgetArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidget)(nil)).Elem()
}

func (o DashboardWidgetArrayOutput) ToDashboardWidgetArrayOutput() DashboardWidgetArrayOutput {
	return o
}

func (o DashboardWidgetArrayOutput) ToDashboardWidgetArrayOutputWithContext(ctx context.Context) DashboardWidgetArrayOutput {
	return o
}

func (o DashboardWidgetArrayOutput) Index(i pulumi.IntInput) DashboardWidgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidget {
		return vs[0].([]DashboardWidget)[vs[1].(int)]
	}).(DashboardWidgetOutput)
}

type DashboardWidgetCompareWith struct {
	OffsetDuration string                                 `pulumi:"offsetDuration"`
	Presentation   DashboardWidgetCompareWithPresentation `pulumi:"presentation"`
}

// DashboardWidgetCompareWithInput is an input type that accepts DashboardWidgetCompareWithArgs and DashboardWidgetCompareWithOutput values.
// You can construct a concrete instance of `DashboardWidgetCompareWithInput` via:
//
//          DashboardWidgetCompareWithArgs{...}
type DashboardWidgetCompareWithInput interface {
	pulumi.Input

	ToDashboardWidgetCompareWithOutput() DashboardWidgetCompareWithOutput
	ToDashboardWidgetCompareWithOutputWithContext(context.Context) DashboardWidgetCompareWithOutput
}

type DashboardWidgetCompareWithArgs struct {
	OffsetDuration pulumi.StringInput                          `pulumi:"offsetDuration"`
	Presentation   DashboardWidgetCompareWithPresentationInput `pulumi:"presentation"`
}

func (DashboardWidgetCompareWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWith)(nil)).Elem()
}

func (i DashboardWidgetCompareWithArgs) ToDashboardWidgetCompareWithOutput() DashboardWidgetCompareWithOutput {
	return i.ToDashboardWidgetCompareWithOutputWithContext(context.Background())
}

func (i DashboardWidgetCompareWithArgs) ToDashboardWidgetCompareWithOutputWithContext(ctx context.Context) DashboardWidgetCompareWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetCompareWithOutput)
}

// DashboardWidgetCompareWithArrayInput is an input type that accepts DashboardWidgetCompareWithArray and DashboardWidgetCompareWithArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetCompareWithArrayInput` via:
//
//          DashboardWidgetCompareWithArray{ DashboardWidgetCompareWithArgs{...} }
type DashboardWidgetCompareWithArrayInput interface {
	pulumi.Input

	ToDashboardWidgetCompareWithArrayOutput() DashboardWidgetCompareWithArrayOutput
	ToDashboardWidgetCompareWithArrayOutputWithContext(context.Context) DashboardWidgetCompareWithArrayOutput
}

type DashboardWidgetCompareWithArray []DashboardWidgetCompareWithInput

func (DashboardWidgetCompareWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetCompareWith)(nil)).Elem()
}

func (i DashboardWidgetCompareWithArray) ToDashboardWidgetCompareWithArrayOutput() DashboardWidgetCompareWithArrayOutput {
	return i.ToDashboardWidgetCompareWithArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetCompareWithArray) ToDashboardWidgetCompareWithArrayOutputWithContext(ctx context.Context) DashboardWidgetCompareWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetCompareWithArrayOutput)
}

type DashboardWidgetCompareWithOutput struct{ *pulumi.OutputState }

func (DashboardWidgetCompareWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWith)(nil)).Elem()
}

func (o DashboardWidgetCompareWithOutput) ToDashboardWidgetCompareWithOutput() DashboardWidgetCompareWithOutput {
	return o
}

func (o DashboardWidgetCompareWithOutput) ToDashboardWidgetCompareWithOutputWithContext(ctx context.Context) DashboardWidgetCompareWithOutput {
	return o
}

func (o DashboardWidgetCompareWithOutput) OffsetDuration() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWith) string { return v.OffsetDuration }).(pulumi.StringOutput)
}

func (o DashboardWidgetCompareWithOutput) Presentation() DashboardWidgetCompareWithPresentationOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWith) DashboardWidgetCompareWithPresentation { return v.Presentation }).(DashboardWidgetCompareWithPresentationOutput)
}

type DashboardWidgetCompareWithArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetCompareWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetCompareWith)(nil)).Elem()
}

func (o DashboardWidgetCompareWithArrayOutput) ToDashboardWidgetCompareWithArrayOutput() DashboardWidgetCompareWithArrayOutput {
	return o
}

func (o DashboardWidgetCompareWithArrayOutput) ToDashboardWidgetCompareWithArrayOutputWithContext(ctx context.Context) DashboardWidgetCompareWithArrayOutput {
	return o
}

func (o DashboardWidgetCompareWithArrayOutput) Index(i pulumi.IntInput) DashboardWidgetCompareWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidgetCompareWith {
		return vs[0].([]DashboardWidgetCompareWith)[vs[1].(int)]
	}).(DashboardWidgetCompareWithOutput)
}

type DashboardWidgetCompareWithPresentation struct {
	Color string `pulumi:"color"`
	// (Required) The metric name to display.
	Name string `pulumi:"name"`
}

// DashboardWidgetCompareWithPresentationInput is an input type that accepts DashboardWidgetCompareWithPresentationArgs and DashboardWidgetCompareWithPresentationOutput values.
// You can construct a concrete instance of `DashboardWidgetCompareWithPresentationInput` via:
//
//          DashboardWidgetCompareWithPresentationArgs{...}
type DashboardWidgetCompareWithPresentationInput interface {
	pulumi.Input

	ToDashboardWidgetCompareWithPresentationOutput() DashboardWidgetCompareWithPresentationOutput
	ToDashboardWidgetCompareWithPresentationOutputWithContext(context.Context) DashboardWidgetCompareWithPresentationOutput
}

type DashboardWidgetCompareWithPresentationArgs struct {
	Color pulumi.StringInput `pulumi:"color"`
	// (Required) The metric name to display.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DashboardWidgetCompareWithPresentationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWithPresentation)(nil)).Elem()
}

func (i DashboardWidgetCompareWithPresentationArgs) ToDashboardWidgetCompareWithPresentationOutput() DashboardWidgetCompareWithPresentationOutput {
	return i.ToDashboardWidgetCompareWithPresentationOutputWithContext(context.Background())
}

func (i DashboardWidgetCompareWithPresentationArgs) ToDashboardWidgetCompareWithPresentationOutputWithContext(ctx context.Context) DashboardWidgetCompareWithPresentationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetCompareWithPresentationOutput)
}

type DashboardWidgetCompareWithPresentationOutput struct{ *pulumi.OutputState }

func (DashboardWidgetCompareWithPresentationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetCompareWithPresentation)(nil)).Elem()
}

func (o DashboardWidgetCompareWithPresentationOutput) ToDashboardWidgetCompareWithPresentationOutput() DashboardWidgetCompareWithPresentationOutput {
	return o
}

func (o DashboardWidgetCompareWithPresentationOutput) ToDashboardWidgetCompareWithPresentationOutputWithContext(ctx context.Context) DashboardWidgetCompareWithPresentationOutput {
	return o
}

func (o DashboardWidgetCompareWithPresentationOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWithPresentation) string { return v.Color }).(pulumi.StringOutput)
}

// (Required) The metric name to display.
func (o DashboardWidgetCompareWithPresentationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetCompareWithPresentation) string { return v.Name }).(pulumi.StringOutput)
}

type DashboardWidgetMetric struct {
	// (Required) The metric name to display.
	Name  string  `pulumi:"name"`
	Scope *string `pulumi:"scope"`
	Units *string `pulumi:"units"`
	// (Required) The metric values to display.
	Values []string `pulumi:"values"`
}

// DashboardWidgetMetricInput is an input type that accepts DashboardWidgetMetricArgs and DashboardWidgetMetricOutput values.
// You can construct a concrete instance of `DashboardWidgetMetricInput` via:
//
//          DashboardWidgetMetricArgs{...}
type DashboardWidgetMetricInput interface {
	pulumi.Input

	ToDashboardWidgetMetricOutput() DashboardWidgetMetricOutput
	ToDashboardWidgetMetricOutputWithContext(context.Context) DashboardWidgetMetricOutput
}

type DashboardWidgetMetricArgs struct {
	// (Required) The metric name to display.
	Name  pulumi.StringInput    `pulumi:"name"`
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	Units pulumi.StringPtrInput `pulumi:"units"`
	// (Required) The metric values to display.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DashboardWidgetMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetMetric)(nil)).Elem()
}

func (i DashboardWidgetMetricArgs) ToDashboardWidgetMetricOutput() DashboardWidgetMetricOutput {
	return i.ToDashboardWidgetMetricOutputWithContext(context.Background())
}

func (i DashboardWidgetMetricArgs) ToDashboardWidgetMetricOutputWithContext(ctx context.Context) DashboardWidgetMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetMetricOutput)
}

// DashboardWidgetMetricArrayInput is an input type that accepts DashboardWidgetMetricArray and DashboardWidgetMetricArrayOutput values.
// You can construct a concrete instance of `DashboardWidgetMetricArrayInput` via:
//
//          DashboardWidgetMetricArray{ DashboardWidgetMetricArgs{...} }
type DashboardWidgetMetricArrayInput interface {
	pulumi.Input

	ToDashboardWidgetMetricArrayOutput() DashboardWidgetMetricArrayOutput
	ToDashboardWidgetMetricArrayOutputWithContext(context.Context) DashboardWidgetMetricArrayOutput
}

type DashboardWidgetMetricArray []DashboardWidgetMetricInput

func (DashboardWidgetMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetMetric)(nil)).Elem()
}

func (i DashboardWidgetMetricArray) ToDashboardWidgetMetricArrayOutput() DashboardWidgetMetricArrayOutput {
	return i.ToDashboardWidgetMetricArrayOutputWithContext(context.Background())
}

func (i DashboardWidgetMetricArray) ToDashboardWidgetMetricArrayOutputWithContext(ctx context.Context) DashboardWidgetMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardWidgetMetricArrayOutput)
}

type DashboardWidgetMetricOutput struct{ *pulumi.OutputState }

func (DashboardWidgetMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardWidgetMetric)(nil)).Elem()
}

func (o DashboardWidgetMetricOutput) ToDashboardWidgetMetricOutput() DashboardWidgetMetricOutput {
	return o
}

func (o DashboardWidgetMetricOutput) ToDashboardWidgetMetricOutputWithContext(ctx context.Context) DashboardWidgetMetricOutput {
	return o
}

// (Required) The metric name to display.
func (o DashboardWidgetMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) string { return v.Name }).(pulumi.StringOutput)
}

func (o DashboardWidgetMetricOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o DashboardWidgetMetricOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) *string { return v.Units }).(pulumi.StringPtrOutput)
}

// (Required) The metric values to display.
func (o DashboardWidgetMetricOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DashboardWidgetMetric) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DashboardWidgetMetricArrayOutput struct{ *pulumi.OutputState }

func (DashboardWidgetMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardWidgetMetric)(nil)).Elem()
}

func (o DashboardWidgetMetricArrayOutput) ToDashboardWidgetMetricArrayOutput() DashboardWidgetMetricArrayOutput {
	return o
}

func (o DashboardWidgetMetricArrayOutput) ToDashboardWidgetMetricArrayOutputWithContext(ctx context.Context) DashboardWidgetMetricArrayOutput {
	return o
}

func (o DashboardWidgetMetricArrayOutput) Index(i pulumi.IntInput) DashboardWidgetMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardWidgetMetric {
		return vs[0].([]DashboardWidgetMetric)[vs[1].(int)]
	}).(DashboardWidgetMetricOutput)
}

type EntityTagsTag struct {
	// The tag key.
	Key string `pulumi:"key"`
	// The tag values.
	Values []string `pulumi:"values"`
}

// EntityTagsTagInput is an input type that accepts EntityTagsTagArgs and EntityTagsTagOutput values.
// You can construct a concrete instance of `EntityTagsTagInput` via:
//
//          EntityTagsTagArgs{...}
type EntityTagsTagInput interface {
	pulumi.Input

	ToEntityTagsTagOutput() EntityTagsTagOutput
	ToEntityTagsTagOutputWithContext(context.Context) EntityTagsTagOutput
}

type EntityTagsTagArgs struct {
	// The tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// The tag values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EntityTagsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTagsTag)(nil)).Elem()
}

func (i EntityTagsTagArgs) ToEntityTagsTagOutput() EntityTagsTagOutput {
	return i.ToEntityTagsTagOutputWithContext(context.Background())
}

func (i EntityTagsTagArgs) ToEntityTagsTagOutputWithContext(ctx context.Context) EntityTagsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTagsTagOutput)
}

// EntityTagsTagArrayInput is an input type that accepts EntityTagsTagArray and EntityTagsTagArrayOutput values.
// You can construct a concrete instance of `EntityTagsTagArrayInput` via:
//
//          EntityTagsTagArray{ EntityTagsTagArgs{...} }
type EntityTagsTagArrayInput interface {
	pulumi.Input

	ToEntityTagsTagArrayOutput() EntityTagsTagArrayOutput
	ToEntityTagsTagArrayOutputWithContext(context.Context) EntityTagsTagArrayOutput
}

type EntityTagsTagArray []EntityTagsTagInput

func (EntityTagsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityTagsTag)(nil)).Elem()
}

func (i EntityTagsTagArray) ToEntityTagsTagArrayOutput() EntityTagsTagArrayOutput {
	return i.ToEntityTagsTagArrayOutputWithContext(context.Background())
}

func (i EntityTagsTagArray) ToEntityTagsTagArrayOutputWithContext(ctx context.Context) EntityTagsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityTagsTagArrayOutput)
}

type EntityTagsTagOutput struct{ *pulumi.OutputState }

func (EntityTagsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTagsTag)(nil)).Elem()
}

func (o EntityTagsTagOutput) ToEntityTagsTagOutput() EntityTagsTagOutput {
	return o
}

func (o EntityTagsTagOutput) ToEntityTagsTagOutputWithContext(ctx context.Context) EntityTagsTagOutput {
	return o
}

// The tag key.
func (o EntityTagsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EntityTagsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The tag values.
func (o EntityTagsTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EntityTagsTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EntityTagsTagArrayOutput struct{ *pulumi.OutputState }

func (EntityTagsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityTagsTag)(nil)).Elem()
}

func (o EntityTagsTagArrayOutput) ToEntityTagsTagArrayOutput() EntityTagsTagArrayOutput {
	return o
}

func (o EntityTagsTagArrayOutput) ToEntityTagsTagArrayOutputWithContext(ctx context.Context) EntityTagsTagArrayOutput {
	return o
}

func (o EntityTagsTagArrayOutput) Index(i pulumi.IntInput) EntityTagsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityTagsTag {
		return vs[0].([]EntityTagsTag)[vs[1].(int)]
	}).(EntityTagsTagOutput)
}

type InfraAlertConditionCritical struct {
	Duration     int      `pulumi:"duration"`
	TimeFunction *string  `pulumi:"timeFunction"`
	Value        *float64 `pulumi:"value"`
}

// InfraAlertConditionCriticalInput is an input type that accepts InfraAlertConditionCriticalArgs and InfraAlertConditionCriticalOutput values.
// You can construct a concrete instance of `InfraAlertConditionCriticalInput` via:
//
//          InfraAlertConditionCriticalArgs{...}
type InfraAlertConditionCriticalInput interface {
	pulumi.Input

	ToInfraAlertConditionCriticalOutput() InfraAlertConditionCriticalOutput
	ToInfraAlertConditionCriticalOutputWithContext(context.Context) InfraAlertConditionCriticalOutput
}

type InfraAlertConditionCriticalArgs struct {
	Duration     pulumi.IntInput        `pulumi:"duration"`
	TimeFunction pulumi.StringPtrInput  `pulumi:"timeFunction"`
	Value        pulumi.Float64PtrInput `pulumi:"value"`
}

func (InfraAlertConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionCritical)(nil)).Elem()
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalOutput() InfraAlertConditionCriticalOutput {
	return i.ToInfraAlertConditionCriticalOutputWithContext(context.Background())
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalOutputWithContext(ctx context.Context) InfraAlertConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionCriticalOutput)
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return i.ToInfraAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i InfraAlertConditionCriticalArgs) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionCriticalOutput).ToInfraAlertConditionCriticalPtrOutputWithContext(ctx)
}

// InfraAlertConditionCriticalPtrInput is an input type that accepts InfraAlertConditionCriticalArgs, InfraAlertConditionCriticalPtr and InfraAlertConditionCriticalPtrOutput values.
// You can construct a concrete instance of `InfraAlertConditionCriticalPtrInput` via:
//
//          InfraAlertConditionCriticalArgs{...}
//
//  or:
//
//          nil
type InfraAlertConditionCriticalPtrInput interface {
	pulumi.Input

	ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput
	ToInfraAlertConditionCriticalPtrOutputWithContext(context.Context) InfraAlertConditionCriticalPtrOutput
}

type infraAlertConditionCriticalPtrType InfraAlertConditionCriticalArgs

func InfraAlertConditionCriticalPtr(v *InfraAlertConditionCriticalArgs) InfraAlertConditionCriticalPtrInput {
	return (*infraAlertConditionCriticalPtrType)(v)
}

func (*infraAlertConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionCritical)(nil)).Elem()
}

func (i *infraAlertConditionCriticalPtrType) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return i.ToInfraAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *infraAlertConditionCriticalPtrType) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionCriticalPtrOutput)
}

type InfraAlertConditionCriticalOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionCritical)(nil)).Elem()
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalOutput() InfraAlertConditionCriticalOutput {
	return o
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalOutputWithContext(ctx context.Context) InfraAlertConditionCriticalOutput {
	return o
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return o.ToInfraAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (o InfraAlertConditionCriticalOutput) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) *InfraAlertConditionCritical {
		return &v
	}).(InfraAlertConditionCriticalPtrOutput)
}
func (o InfraAlertConditionCriticalOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) int { return v.Duration }).(pulumi.IntOutput)
}

func (o InfraAlertConditionCriticalOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionCriticalOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v InfraAlertConditionCritical) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type InfraAlertConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionCritical)(nil)).Elem()
}

func (o InfraAlertConditionCriticalPtrOutput) ToInfraAlertConditionCriticalPtrOutput() InfraAlertConditionCriticalPtrOutput {
	return o
}

func (o InfraAlertConditionCriticalPtrOutput) ToInfraAlertConditionCriticalPtrOutputWithContext(ctx context.Context) InfraAlertConditionCriticalPtrOutput {
	return o
}

func (o InfraAlertConditionCriticalPtrOutput) Elem() InfraAlertConditionCriticalOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) InfraAlertConditionCritical { return *v }).(InfraAlertConditionCriticalOutput)
}

func (o InfraAlertConditionCriticalPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) *int {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o InfraAlertConditionCriticalPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionCriticalPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionCritical) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type InfraAlertConditionWarning struct {
	Duration     int      `pulumi:"duration"`
	TimeFunction *string  `pulumi:"timeFunction"`
	Value        *float64 `pulumi:"value"`
}

// InfraAlertConditionWarningInput is an input type that accepts InfraAlertConditionWarningArgs and InfraAlertConditionWarningOutput values.
// You can construct a concrete instance of `InfraAlertConditionWarningInput` via:
//
//          InfraAlertConditionWarningArgs{...}
type InfraAlertConditionWarningInput interface {
	pulumi.Input

	ToInfraAlertConditionWarningOutput() InfraAlertConditionWarningOutput
	ToInfraAlertConditionWarningOutputWithContext(context.Context) InfraAlertConditionWarningOutput
}

type InfraAlertConditionWarningArgs struct {
	Duration     pulumi.IntInput        `pulumi:"duration"`
	TimeFunction pulumi.StringPtrInput  `pulumi:"timeFunction"`
	Value        pulumi.Float64PtrInput `pulumi:"value"`
}

func (InfraAlertConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionWarning)(nil)).Elem()
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningOutput() InfraAlertConditionWarningOutput {
	return i.ToInfraAlertConditionWarningOutputWithContext(context.Background())
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningOutputWithContext(ctx context.Context) InfraAlertConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionWarningOutput)
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return i.ToInfraAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i InfraAlertConditionWarningArgs) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionWarningOutput).ToInfraAlertConditionWarningPtrOutputWithContext(ctx)
}

// InfraAlertConditionWarningPtrInput is an input type that accepts InfraAlertConditionWarningArgs, InfraAlertConditionWarningPtr and InfraAlertConditionWarningPtrOutput values.
// You can construct a concrete instance of `InfraAlertConditionWarningPtrInput` via:
//
//          InfraAlertConditionWarningArgs{...}
//
//  or:
//
//          nil
type InfraAlertConditionWarningPtrInput interface {
	pulumi.Input

	ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput
	ToInfraAlertConditionWarningPtrOutputWithContext(context.Context) InfraAlertConditionWarningPtrOutput
}

type infraAlertConditionWarningPtrType InfraAlertConditionWarningArgs

func InfraAlertConditionWarningPtr(v *InfraAlertConditionWarningArgs) InfraAlertConditionWarningPtrInput {
	return (*infraAlertConditionWarningPtrType)(v)
}

func (*infraAlertConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionWarning)(nil)).Elem()
}

func (i *infraAlertConditionWarningPtrType) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return i.ToInfraAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i *infraAlertConditionWarningPtrType) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraAlertConditionWarningPtrOutput)
}

type InfraAlertConditionWarningOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfraAlertConditionWarning)(nil)).Elem()
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningOutput() InfraAlertConditionWarningOutput {
	return o
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningOutputWithContext(ctx context.Context) InfraAlertConditionWarningOutput {
	return o
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return o.ToInfraAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (o InfraAlertConditionWarningOutput) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) *InfraAlertConditionWarning {
		return &v
	}).(InfraAlertConditionWarningPtrOutput)
}
func (o InfraAlertConditionWarningOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) int { return v.Duration }).(pulumi.IntOutput)
}

func (o InfraAlertConditionWarningOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionWarningOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v InfraAlertConditionWarning) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type InfraAlertConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (InfraAlertConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraAlertConditionWarning)(nil)).Elem()
}

func (o InfraAlertConditionWarningPtrOutput) ToInfraAlertConditionWarningPtrOutput() InfraAlertConditionWarningPtrOutput {
	return o
}

func (o InfraAlertConditionWarningPtrOutput) ToInfraAlertConditionWarningPtrOutputWithContext(ctx context.Context) InfraAlertConditionWarningPtrOutput {
	return o
}

func (o InfraAlertConditionWarningPtrOutput) Elem() InfraAlertConditionWarningOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) InfraAlertConditionWarning { return *v }).(InfraAlertConditionWarningOutput)
}

func (o InfraAlertConditionWarningPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) *int {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o InfraAlertConditionWarningPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

func (o InfraAlertConditionWarningPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InfraAlertConditionWarning) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type NrqlAlertConditionCritical struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration *int `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator *string `pulumi:"operator"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold float64 `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration *int `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences *string `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction *string `pulumi:"timeFunction"`
}

// NrqlAlertConditionCriticalInput is an input type that accepts NrqlAlertConditionCriticalArgs and NrqlAlertConditionCriticalOutput values.
// You can construct a concrete instance of `NrqlAlertConditionCriticalInput` via:
//
//          NrqlAlertConditionCriticalArgs{...}
type NrqlAlertConditionCriticalInput interface {
	pulumi.Input

	ToNrqlAlertConditionCriticalOutput() NrqlAlertConditionCriticalOutput
	ToNrqlAlertConditionCriticalOutputWithContext(context.Context) NrqlAlertConditionCriticalOutput
}

type NrqlAlertConditionCriticalArgs struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration pulumi.IntPtrInput `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences pulumi.StringPtrInput `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction pulumi.StringPtrInput `pulumi:"timeFunction"`
}

func (NrqlAlertConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionCritical)(nil)).Elem()
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalOutput() NrqlAlertConditionCriticalOutput {
	return i.ToNrqlAlertConditionCriticalOutputWithContext(context.Background())
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionCriticalOutput)
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return i.ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i NrqlAlertConditionCriticalArgs) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionCriticalOutput).ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx)
}

// NrqlAlertConditionCriticalPtrInput is an input type that accepts NrqlAlertConditionCriticalArgs, NrqlAlertConditionCriticalPtr and NrqlAlertConditionCriticalPtrOutput values.
// You can construct a concrete instance of `NrqlAlertConditionCriticalPtrInput` via:
//
//          NrqlAlertConditionCriticalArgs{...}
//
//  or:
//
//          nil
type NrqlAlertConditionCriticalPtrInput interface {
	pulumi.Input

	ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput
	ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Context) NrqlAlertConditionCriticalPtrOutput
}

type nrqlAlertConditionCriticalPtrType NrqlAlertConditionCriticalArgs

func NrqlAlertConditionCriticalPtr(v *NrqlAlertConditionCriticalArgs) NrqlAlertConditionCriticalPtrInput {
	return (*nrqlAlertConditionCriticalPtrType)(v)
}

func (*nrqlAlertConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionCritical)(nil)).Elem()
}

func (i *nrqlAlertConditionCriticalPtrType) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return i.ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *nrqlAlertConditionCriticalPtrType) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionCriticalPtrOutput)
}

type NrqlAlertConditionCriticalOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionCritical)(nil)).Elem()
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalOutput() NrqlAlertConditionCriticalOutput {
	return o
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalOutput {
	return o
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return o.ToNrqlAlertConditionCriticalPtrOutputWithContext(context.Background())
}

func (o NrqlAlertConditionCriticalOutput) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *NrqlAlertConditionCritical {
		return &v
	}).(NrqlAlertConditionCriticalPtrOutput)
}

// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
//
// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionCriticalOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
func (o NrqlAlertConditionCriticalOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The value which will trigger a violation. Must be `0` or greater.
func (o NrqlAlertConditionCriticalOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NrqlAlertConditionCritical) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
func (o NrqlAlertConditionCriticalOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *int { return v.ThresholdDuration }).(pulumi.IntPtrOutput)
}

// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
func (o NrqlAlertConditionCriticalOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *string { return v.ThresholdOccurrences }).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
//
// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionCriticalOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionCritical) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionCritical)(nil)).Elem()
}

func (o NrqlAlertConditionCriticalPtrOutput) ToNrqlAlertConditionCriticalPtrOutput() NrqlAlertConditionCriticalPtrOutput {
	return o
}

func (o NrqlAlertConditionCriticalPtrOutput) ToNrqlAlertConditionCriticalPtrOutputWithContext(ctx context.Context) NrqlAlertConditionCriticalPtrOutput {
	return o
}

func (o NrqlAlertConditionCriticalPtrOutput) Elem() NrqlAlertConditionCriticalOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) NrqlAlertConditionCritical { return *v }).(NrqlAlertConditionCriticalOutput)
}

// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
//
// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionCriticalPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *int {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.IntPtrOutput)
}

// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
func (o NrqlAlertConditionCriticalPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// The value which will trigger a violation. Must be `0` or greater.
func (o NrqlAlertConditionCriticalPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *float64 {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.Float64PtrOutput)
}

// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
func (o NrqlAlertConditionCriticalPtrOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *int {
		if v == nil {
			return nil
		}
		return v.ThresholdDuration
	}).(pulumi.IntPtrOutput)
}

// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
func (o NrqlAlertConditionCriticalPtrOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdOccurrences
	}).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
//
// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionCriticalPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionNrql struct {
	// Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluationOffset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.<br>
	// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
	EvaluationOffset *int `pulumi:"evaluationOffset"`
	// The NRQL query to execute for the condition.
	Query string `pulumi:"query"`
	// **DEPRECATED:** Use `evaluationOffset` instead. The value to be used in the `SINCE <X> minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). <br>
	// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
	//
	// Deprecated: use `evaluation_offset` attribute instead
	SinceValue *string `pulumi:"sinceValue"`
}

// NrqlAlertConditionNrqlInput is an input type that accepts NrqlAlertConditionNrqlArgs and NrqlAlertConditionNrqlOutput values.
// You can construct a concrete instance of `NrqlAlertConditionNrqlInput` via:
//
//          NrqlAlertConditionNrqlArgs{...}
type NrqlAlertConditionNrqlInput interface {
	pulumi.Input

	ToNrqlAlertConditionNrqlOutput() NrqlAlertConditionNrqlOutput
	ToNrqlAlertConditionNrqlOutputWithContext(context.Context) NrqlAlertConditionNrqlOutput
}

type NrqlAlertConditionNrqlArgs struct {
	// Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluationOffset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.<br>
	// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
	EvaluationOffset pulumi.IntPtrInput `pulumi:"evaluationOffset"`
	// The NRQL query to execute for the condition.
	Query pulumi.StringInput `pulumi:"query"`
	// **DEPRECATED:** Use `evaluationOffset` instead. The value to be used in the `SINCE <X> minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). <br>
	// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
	//
	// Deprecated: use `evaluation_offset` attribute instead
	SinceValue pulumi.StringPtrInput `pulumi:"sinceValue"`
}

func (NrqlAlertConditionNrqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionNrql)(nil)).Elem()
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlOutput() NrqlAlertConditionNrqlOutput {
	return i.ToNrqlAlertConditionNrqlOutputWithContext(context.Background())
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionNrqlOutput)
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return i.ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Background())
}

func (i NrqlAlertConditionNrqlArgs) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionNrqlOutput).ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx)
}

// NrqlAlertConditionNrqlPtrInput is an input type that accepts NrqlAlertConditionNrqlArgs, NrqlAlertConditionNrqlPtr and NrqlAlertConditionNrqlPtrOutput values.
// You can construct a concrete instance of `NrqlAlertConditionNrqlPtrInput` via:
//
//          NrqlAlertConditionNrqlArgs{...}
//
//  or:
//
//          nil
type NrqlAlertConditionNrqlPtrInput interface {
	pulumi.Input

	ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput
	ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Context) NrqlAlertConditionNrqlPtrOutput
}

type nrqlAlertConditionNrqlPtrType NrqlAlertConditionNrqlArgs

func NrqlAlertConditionNrqlPtr(v *NrqlAlertConditionNrqlArgs) NrqlAlertConditionNrqlPtrInput {
	return (*nrqlAlertConditionNrqlPtrType)(v)
}

func (*nrqlAlertConditionNrqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionNrql)(nil)).Elem()
}

func (i *nrqlAlertConditionNrqlPtrType) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return i.ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Background())
}

func (i *nrqlAlertConditionNrqlPtrType) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionNrqlPtrOutput)
}

type NrqlAlertConditionNrqlOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionNrqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionNrql)(nil)).Elem()
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlOutput() NrqlAlertConditionNrqlOutput {
	return o
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlOutput {
	return o
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return o.ToNrqlAlertConditionNrqlPtrOutputWithContext(context.Background())
}

func (o NrqlAlertConditionNrqlOutput) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) *NrqlAlertConditionNrql {
		return &v
	}).(NrqlAlertConditionNrqlPtrOutput)
}

// Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluationOffset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.<br>
// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
func (o NrqlAlertConditionNrqlOutput) EvaluationOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) *int { return v.EvaluationOffset }).(pulumi.IntPtrOutput)
}

// The NRQL query to execute for the condition.
func (o NrqlAlertConditionNrqlOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) string { return v.Query }).(pulumi.StringOutput)
}

// **DEPRECATED:** Use `evaluationOffset` instead. The value to be used in the `SINCE <X> minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). <br>
// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
//
// Deprecated: use `evaluation_offset` attribute instead
func (o NrqlAlertConditionNrqlOutput) SinceValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionNrql) *string { return v.SinceValue }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionNrqlPtrOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionNrqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionNrql)(nil)).Elem()
}

func (o NrqlAlertConditionNrqlPtrOutput) ToNrqlAlertConditionNrqlPtrOutput() NrqlAlertConditionNrqlPtrOutput {
	return o
}

func (o NrqlAlertConditionNrqlPtrOutput) ToNrqlAlertConditionNrqlPtrOutputWithContext(ctx context.Context) NrqlAlertConditionNrqlPtrOutput {
	return o
}

func (o NrqlAlertConditionNrqlPtrOutput) Elem() NrqlAlertConditionNrqlOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) NrqlAlertConditionNrql { return *v }).(NrqlAlertConditionNrqlOutput)
}

// Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated in one-minute time windows. The start time depends on this value. It's recommended to set this to 3 minutes. An offset of less than 3 minutes will trigger violations sooner, but you may see more false positives and negatives due to data latency. With `evaluationOffset` set to 3 minutes, the NRQL time window applied to your query will be: `SINCE 3 minutes ago UNTIL 2 minutes ago`.<br>
// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
func (o NrqlAlertConditionNrqlPtrOutput) EvaluationOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationOffset
	}).(pulumi.IntPtrOutput)
}

// The NRQL query to execute for the condition.
func (o NrqlAlertConditionNrqlPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `evaluationOffset` instead. The value to be used in the `SINCE <X> minutes ago` clause for the NRQL query. Must be between 1-20 (inclusive). <br>
// <small>\***Note**: One of `evaluationOffset` _or_ `sinceValue` must be set, but not both.</small>
//
// Deprecated: use `evaluation_offset` attribute instead
func (o NrqlAlertConditionNrqlPtrOutput) SinceValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionNrql) *string {
		if v == nil {
			return nil
		}
		return v.SinceValue
	}).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionTerm struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration *int `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator *string `pulumi:"operator"`
	// `critical` or `warning`. Defaults to `critical`.
	Priority *string `pulumi:"priority"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold float64 `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration *int `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences *string `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction *string `pulumi:"timeFunction"`
}

// NrqlAlertConditionTermInput is an input type that accepts NrqlAlertConditionTermArgs and NrqlAlertConditionTermOutput values.
// You can construct a concrete instance of `NrqlAlertConditionTermInput` via:
//
//          NrqlAlertConditionTermArgs{...}
type NrqlAlertConditionTermInput interface {
	pulumi.Input

	ToNrqlAlertConditionTermOutput() NrqlAlertConditionTermOutput
	ToNrqlAlertConditionTermOutputWithContext(context.Context) NrqlAlertConditionTermOutput
}

type NrqlAlertConditionTermArgs struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// `critical` or `warning`. Defaults to `critical`.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration pulumi.IntPtrInput `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences pulumi.StringPtrInput `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction pulumi.StringPtrInput `pulumi:"timeFunction"`
}

func (NrqlAlertConditionTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionTerm)(nil)).Elem()
}

func (i NrqlAlertConditionTermArgs) ToNrqlAlertConditionTermOutput() NrqlAlertConditionTermOutput {
	return i.ToNrqlAlertConditionTermOutputWithContext(context.Background())
}

func (i NrqlAlertConditionTermArgs) ToNrqlAlertConditionTermOutputWithContext(ctx context.Context) NrqlAlertConditionTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionTermOutput)
}

// NrqlAlertConditionTermArrayInput is an input type that accepts NrqlAlertConditionTermArray and NrqlAlertConditionTermArrayOutput values.
// You can construct a concrete instance of `NrqlAlertConditionTermArrayInput` via:
//
//          NrqlAlertConditionTermArray{ NrqlAlertConditionTermArgs{...} }
type NrqlAlertConditionTermArrayInput interface {
	pulumi.Input

	ToNrqlAlertConditionTermArrayOutput() NrqlAlertConditionTermArrayOutput
	ToNrqlAlertConditionTermArrayOutputWithContext(context.Context) NrqlAlertConditionTermArrayOutput
}

type NrqlAlertConditionTermArray []NrqlAlertConditionTermInput

func (NrqlAlertConditionTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NrqlAlertConditionTerm)(nil)).Elem()
}

func (i NrqlAlertConditionTermArray) ToNrqlAlertConditionTermArrayOutput() NrqlAlertConditionTermArrayOutput {
	return i.ToNrqlAlertConditionTermArrayOutputWithContext(context.Background())
}

func (i NrqlAlertConditionTermArray) ToNrqlAlertConditionTermArrayOutputWithContext(ctx context.Context) NrqlAlertConditionTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionTermArrayOutput)
}

type NrqlAlertConditionTermOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionTerm)(nil)).Elem()
}

func (o NrqlAlertConditionTermOutput) ToNrqlAlertConditionTermOutput() NrqlAlertConditionTermOutput {
	return o
}

func (o NrqlAlertConditionTermOutput) ToNrqlAlertConditionTermOutputWithContext(ctx context.Context) NrqlAlertConditionTermOutput {
	return o
}

// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
//
// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionTermOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
func (o NrqlAlertConditionTermOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// `critical` or `warning`. Defaults to `critical`.
func (o NrqlAlertConditionTermOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The value which will trigger a violation. Must be `0` or greater.
func (o NrqlAlertConditionTermOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NrqlAlertConditionTerm) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
func (o NrqlAlertConditionTermOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *int { return v.ThresholdDuration }).(pulumi.IntPtrOutput)
}

// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
func (o NrqlAlertConditionTermOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.ThresholdOccurrences }).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
//
// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionTermOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionTerm) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionTermArrayOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NrqlAlertConditionTerm)(nil)).Elem()
}

func (o NrqlAlertConditionTermArrayOutput) ToNrqlAlertConditionTermArrayOutput() NrqlAlertConditionTermArrayOutput {
	return o
}

func (o NrqlAlertConditionTermArrayOutput) ToNrqlAlertConditionTermArrayOutputWithContext(ctx context.Context) NrqlAlertConditionTermArrayOutput {
	return o
}

func (o NrqlAlertConditionTermArrayOutput) Index(i pulumi.IntInput) NrqlAlertConditionTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NrqlAlertConditionTerm {
		return vs[0].([]NrqlAlertConditionTerm)[vs[1].(int)]
	}).(NrqlAlertConditionTermOutput)
}

type NrqlAlertConditionWarning struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration *int `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator *string `pulumi:"operator"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold float64 `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration *int `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences *string `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction *string `pulumi:"timeFunction"`
}

// NrqlAlertConditionWarningInput is an input type that accepts NrqlAlertConditionWarningArgs and NrqlAlertConditionWarningOutput values.
// You can construct a concrete instance of `NrqlAlertConditionWarningInput` via:
//
//          NrqlAlertConditionWarningArgs{...}
type NrqlAlertConditionWarningInput interface {
	pulumi.Input

	ToNrqlAlertConditionWarningOutput() NrqlAlertConditionWarningOutput
	ToNrqlAlertConditionWarningOutputWithContext(context.Context) NrqlAlertConditionWarningOutput
}

type NrqlAlertConditionWarningArgs struct {
	// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
	//
	// Deprecated: use `threshold_duration` attribute instead
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The value which will trigger a violation. Must be `0` or greater.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
	// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
	// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
	ThresholdDuration pulumi.IntPtrInput `pulumi:"thresholdDuration"`
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
	ThresholdOccurrences pulumi.StringPtrInput `pulumi:"thresholdOccurrences"`
	// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
	//
	// Deprecated: use `threshold_occurrences` attribute instead
	TimeFunction pulumi.StringPtrInput `pulumi:"timeFunction"`
}

func (NrqlAlertConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionWarning)(nil)).Elem()
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningOutput() NrqlAlertConditionWarningOutput {
	return i.ToNrqlAlertConditionWarningOutputWithContext(context.Background())
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningOutputWithContext(ctx context.Context) NrqlAlertConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionWarningOutput)
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return i.ToNrqlAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i NrqlAlertConditionWarningArgs) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionWarningOutput).ToNrqlAlertConditionWarningPtrOutputWithContext(ctx)
}

// NrqlAlertConditionWarningPtrInput is an input type that accepts NrqlAlertConditionWarningArgs, NrqlAlertConditionWarningPtr and NrqlAlertConditionWarningPtrOutput values.
// You can construct a concrete instance of `NrqlAlertConditionWarningPtrInput` via:
//
//          NrqlAlertConditionWarningArgs{...}
//
//  or:
//
//          nil
type NrqlAlertConditionWarningPtrInput interface {
	pulumi.Input

	ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput
	ToNrqlAlertConditionWarningPtrOutputWithContext(context.Context) NrqlAlertConditionWarningPtrOutput
}

type nrqlAlertConditionWarningPtrType NrqlAlertConditionWarningArgs

func NrqlAlertConditionWarningPtr(v *NrqlAlertConditionWarningArgs) NrqlAlertConditionWarningPtrInput {
	return (*nrqlAlertConditionWarningPtrType)(v)
}

func (*nrqlAlertConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionWarning)(nil)).Elem()
}

func (i *nrqlAlertConditionWarningPtrType) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return i.ToNrqlAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (i *nrqlAlertConditionWarningPtrType) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NrqlAlertConditionWarningPtrOutput)
}

type NrqlAlertConditionWarningOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NrqlAlertConditionWarning)(nil)).Elem()
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningOutput() NrqlAlertConditionWarningOutput {
	return o
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningOutputWithContext(ctx context.Context) NrqlAlertConditionWarningOutput {
	return o
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return o.ToNrqlAlertConditionWarningPtrOutputWithContext(context.Background())
}

func (o NrqlAlertConditionWarningOutput) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *NrqlAlertConditionWarning {
		return &v
	}).(NrqlAlertConditionWarningPtrOutput)
}

// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
//
// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionWarningOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
func (o NrqlAlertConditionWarningOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The value which will trigger a violation. Must be `0` or greater.
func (o NrqlAlertConditionWarningOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NrqlAlertConditionWarning) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
func (o NrqlAlertConditionWarningOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *int { return v.ThresholdDuration }).(pulumi.IntPtrOutput)
}

// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
func (o NrqlAlertConditionWarningOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *string { return v.ThresholdOccurrences }).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
//
// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionWarningOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NrqlAlertConditionWarning) *string { return v.TimeFunction }).(pulumi.StringPtrOutput)
}

type NrqlAlertConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (NrqlAlertConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NrqlAlertConditionWarning)(nil)).Elem()
}

func (o NrqlAlertConditionWarningPtrOutput) ToNrqlAlertConditionWarningPtrOutput() NrqlAlertConditionWarningPtrOutput {
	return o
}

func (o NrqlAlertConditionWarningPtrOutput) ToNrqlAlertConditionWarningPtrOutputWithContext(ctx context.Context) NrqlAlertConditionWarningPtrOutput {
	return o
}

func (o NrqlAlertConditionWarningPtrOutput) Elem() NrqlAlertConditionWarningOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) NrqlAlertConditionWarning { return *v }).(NrqlAlertConditionWarningOutput)
}

// **DEPRECATED:** Use `thresholdDuration` instead. The duration of time, in _minutes_, that the threshold must violate for in order to create a violation. Must be within 1-120 (inclusive).
//
// Deprecated: use `threshold_duration` attribute instead
func (o NrqlAlertConditionWarningPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *int {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.IntPtrOutput)
}

// Valid values are `above`, `below`, or `equals` (case insensitive). Defaults to `equals`. Note that when using a `type` of `outlier` or `baseline`, the only valid option here is `above`.
func (o NrqlAlertConditionWarningPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// The value which will trigger a violation. Must be `0` or greater.
func (o NrqlAlertConditionWarningPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *float64 {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.Float64PtrOutput)
}

// The duration, in seconds, that the threshold must violate in order to create a violation. Value must be a multiple of the `aggregationWindow` (which has a default of 60 seconds).
// <br>For _baseline_ and _outlier_ NRQL alert conditions, the value must be within 120-3600 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `sum` value function, the value must be within 120-7200 seconds (inclusive).
// <br>For _static_ NRQL alert conditions with the `singleValue` value function, the value must be within 60-7200 seconds (inclusive).
func (o NrqlAlertConditionWarningPtrOutput) ThresholdDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *int {
		if v == nil {
			return nil
		}
		return v.ThresholdDuration
	}).(pulumi.IntPtrOutput)
}

// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `atLeastOnce` (case insensitive).
func (o NrqlAlertConditionWarningPtrOutput) ThresholdOccurrences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdOccurrences
	}).(pulumi.StringPtrOutput)
}

// **DEPRECATED:** Use `thresholdOccurrences` instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: `all` or `any`.
//
// Deprecated: use `threshold_occurrences` attribute instead
func (o NrqlAlertConditionWarningPtrOutput) TimeFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NrqlAlertConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.TimeFunction
	}).(pulumi.StringPtrOutput)
}

type OneDashboardPage struct {
	// Brief text describing the dashboard.
	Description *string `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid *string `pulumi:"guid"`
	// The title of the dashboard.
	Name string `pulumi:"name"`
	// (Optional) A nested block that describes an Area widget.  See Nested widget blocks below for details.
	WidgetAreas []OneDashboardPageWidgetArea `pulumi:"widgetAreas"`
	// (Optional) A nested block that describes a Bar widget.  See Nested widget blocks below for details.
	WidgetBars []OneDashboardPageWidgetBar `pulumi:"widgetBars"`
	// (Optional) A nested block that describes a Billboard widget.  See Nested widget blocks below for details.
	WidgetBillboards []OneDashboardPageWidgetBillboard `pulumi:"widgetBillboards"`
	// (Optional) A nested block that describes a Bullet widget.  See Nested widget blocks below for details.
	WidgetBullets []OneDashboardPageWidgetBullet `pulumi:"widgetBullets"`
	// (Optional) A nested block that describes a Funnel widget.  See Nested widget blocks below for details.
	WidgetFunnels []OneDashboardPageWidgetFunnel `pulumi:"widgetFunnels"`
	// (Optional) A nested block that describes a Heatmap widget.  See Nested widget blocks below for details.
	WidgetHeatmaps []OneDashboardPageWidgetHeatmap `pulumi:"widgetHeatmaps"`
	// (Optional) A nested block that describes a Histogram widget.  See Nested widget blocks below for details.
	WidgetHistograms []OneDashboardPageWidgetHistogram `pulumi:"widgetHistograms"`
	// (Optional) A nested block that describes a JSON widget.  See Nested widget blocks below for details.
	WidgetJsons []OneDashboardPageWidgetJson `pulumi:"widgetJsons"`
	// (Optional) A nested block that describes a Line widget.  See Nested widget blocks below for details.
	WidgetLines []OneDashboardPageWidgetLine `pulumi:"widgetLines"`
	// (Optional) A nested block that describes a Markdown widget.  See Nested widget blocks below for details.
	WidgetMarkdowns []OneDashboardPageWidgetMarkdown `pulumi:"widgetMarkdowns"`
	// (Optional) A nested block that describes a Pie widget.  See Nested widget blocks below for details.
	WidgetPies []OneDashboardPageWidgetPy `pulumi:"widgetPies"`
	// (Optional) A nested block that describes a Table widget.  See Nested widget blocks below for details.
	WidgetTables []OneDashboardPageWidgetTable `pulumi:"widgetTables"`
}

// OneDashboardPageInput is an input type that accepts OneDashboardPageArgs and OneDashboardPageOutput values.
// You can construct a concrete instance of `OneDashboardPageInput` via:
//
//          OneDashboardPageArgs{...}
type OneDashboardPageInput interface {
	pulumi.Input

	ToOneDashboardPageOutput() OneDashboardPageOutput
	ToOneDashboardPageOutputWithContext(context.Context) OneDashboardPageOutput
}

type OneDashboardPageArgs struct {
	// Brief text describing the dashboard.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid pulumi.StringPtrInput `pulumi:"guid"`
	// The title of the dashboard.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) A nested block that describes an Area widget.  See Nested widget blocks below for details.
	WidgetAreas OneDashboardPageWidgetAreaArrayInput `pulumi:"widgetAreas"`
	// (Optional) A nested block that describes a Bar widget.  See Nested widget blocks below for details.
	WidgetBars OneDashboardPageWidgetBarArrayInput `pulumi:"widgetBars"`
	// (Optional) A nested block that describes a Billboard widget.  See Nested widget blocks below for details.
	WidgetBillboards OneDashboardPageWidgetBillboardArrayInput `pulumi:"widgetBillboards"`
	// (Optional) A nested block that describes a Bullet widget.  See Nested widget blocks below for details.
	WidgetBullets OneDashboardPageWidgetBulletArrayInput `pulumi:"widgetBullets"`
	// (Optional) A nested block that describes a Funnel widget.  See Nested widget blocks below for details.
	WidgetFunnels OneDashboardPageWidgetFunnelArrayInput `pulumi:"widgetFunnels"`
	// (Optional) A nested block that describes a Heatmap widget.  See Nested widget blocks below for details.
	WidgetHeatmaps OneDashboardPageWidgetHeatmapArrayInput `pulumi:"widgetHeatmaps"`
	// (Optional) A nested block that describes a Histogram widget.  See Nested widget blocks below for details.
	WidgetHistograms OneDashboardPageWidgetHistogramArrayInput `pulumi:"widgetHistograms"`
	// (Optional) A nested block that describes a JSON widget.  See Nested widget blocks below for details.
	WidgetJsons OneDashboardPageWidgetJsonArrayInput `pulumi:"widgetJsons"`
	// (Optional) A nested block that describes a Line widget.  See Nested widget blocks below for details.
	WidgetLines OneDashboardPageWidgetLineArrayInput `pulumi:"widgetLines"`
	// (Optional) A nested block that describes a Markdown widget.  See Nested widget blocks below for details.
	WidgetMarkdowns OneDashboardPageWidgetMarkdownArrayInput `pulumi:"widgetMarkdowns"`
	// (Optional) A nested block that describes a Pie widget.  See Nested widget blocks below for details.
	WidgetPies OneDashboardPageWidgetPyArrayInput `pulumi:"widgetPies"`
	// (Optional) A nested block that describes a Table widget.  See Nested widget blocks below for details.
	WidgetTables OneDashboardPageWidgetTableArrayInput `pulumi:"widgetTables"`
}

func (OneDashboardPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPage)(nil)).Elem()
}

func (i OneDashboardPageArgs) ToOneDashboardPageOutput() OneDashboardPageOutput {
	return i.ToOneDashboardPageOutputWithContext(context.Background())
}

func (i OneDashboardPageArgs) ToOneDashboardPageOutputWithContext(ctx context.Context) OneDashboardPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageOutput)
}

// OneDashboardPageArrayInput is an input type that accepts OneDashboardPageArray and OneDashboardPageArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageArrayInput` via:
//
//          OneDashboardPageArray{ OneDashboardPageArgs{...} }
type OneDashboardPageArrayInput interface {
	pulumi.Input

	ToOneDashboardPageArrayOutput() OneDashboardPageArrayOutput
	ToOneDashboardPageArrayOutputWithContext(context.Context) OneDashboardPageArrayOutput
}

type OneDashboardPageArray []OneDashboardPageInput

func (OneDashboardPageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPage)(nil)).Elem()
}

func (i OneDashboardPageArray) ToOneDashboardPageArrayOutput() OneDashboardPageArrayOutput {
	return i.ToOneDashboardPageArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageArray) ToOneDashboardPageArrayOutputWithContext(ctx context.Context) OneDashboardPageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageArrayOutput)
}

type OneDashboardPageOutput struct{ *pulumi.OutputState }

func (OneDashboardPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPage)(nil)).Elem()
}

func (o OneDashboardPageOutput) ToOneDashboardPageOutput() OneDashboardPageOutput {
	return o
}

func (o OneDashboardPageOutput) ToOneDashboardPageOutputWithContext(ctx context.Context) OneDashboardPageOutput {
	return o
}

// Brief text describing the dashboard.
func (o OneDashboardPageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPage) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique entity identifier of the dashboard page in New Relic.
func (o OneDashboardPageOutput) Guid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPage) *string { return v.Guid }).(pulumi.StringPtrOutput)
}

// The title of the dashboard.
func (o OneDashboardPageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPage) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) A nested block that describes an Area widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetAreas() OneDashboardPageWidgetAreaArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetArea { return v.WidgetAreas }).(OneDashboardPageWidgetAreaArrayOutput)
}

// (Optional) A nested block that describes a Bar widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetBars() OneDashboardPageWidgetBarArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetBar { return v.WidgetBars }).(OneDashboardPageWidgetBarArrayOutput)
}

// (Optional) A nested block that describes a Billboard widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetBillboards() OneDashboardPageWidgetBillboardArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetBillboard { return v.WidgetBillboards }).(OneDashboardPageWidgetBillboardArrayOutput)
}

// (Optional) A nested block that describes a Bullet widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetBullets() OneDashboardPageWidgetBulletArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetBullet { return v.WidgetBullets }).(OneDashboardPageWidgetBulletArrayOutput)
}

// (Optional) A nested block that describes a Funnel widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetFunnels() OneDashboardPageWidgetFunnelArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetFunnel { return v.WidgetFunnels }).(OneDashboardPageWidgetFunnelArrayOutput)
}

// (Optional) A nested block that describes a Heatmap widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetHeatmaps() OneDashboardPageWidgetHeatmapArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetHeatmap { return v.WidgetHeatmaps }).(OneDashboardPageWidgetHeatmapArrayOutput)
}

// (Optional) A nested block that describes a Histogram widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetHistograms() OneDashboardPageWidgetHistogramArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetHistogram { return v.WidgetHistograms }).(OneDashboardPageWidgetHistogramArrayOutput)
}

// (Optional) A nested block that describes a JSON widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetJsons() OneDashboardPageWidgetJsonArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetJson { return v.WidgetJsons }).(OneDashboardPageWidgetJsonArrayOutput)
}

// (Optional) A nested block that describes a Line widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetLines() OneDashboardPageWidgetLineArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetLine { return v.WidgetLines }).(OneDashboardPageWidgetLineArrayOutput)
}

// (Optional) A nested block that describes a Markdown widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetMarkdowns() OneDashboardPageWidgetMarkdownArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetMarkdown { return v.WidgetMarkdowns }).(OneDashboardPageWidgetMarkdownArrayOutput)
}

// (Optional) A nested block that describes a Pie widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetPies() OneDashboardPageWidgetPyArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetPy { return v.WidgetPies }).(OneDashboardPageWidgetPyArrayOutput)
}

// (Optional) A nested block that describes a Table widget.  See Nested widget blocks below for details.
func (o OneDashboardPageOutput) WidgetTables() OneDashboardPageWidgetTableArrayOutput {
	return o.ApplyT(func(v OneDashboardPage) []OneDashboardPageWidgetTable { return v.WidgetTables }).(OneDashboardPageWidgetTableArrayOutput)
}

type OneDashboardPageArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPage)(nil)).Elem()
}

func (o OneDashboardPageArrayOutput) ToOneDashboardPageArrayOutput() OneDashboardPageArrayOutput {
	return o
}

func (o OneDashboardPageArrayOutput) ToOneDashboardPageArrayOutputWithContext(ctx context.Context) OneDashboardPageArrayOutput {
	return o
}

func (o OneDashboardPageArrayOutput) Index(i pulumi.IntInput) OneDashboardPageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPage {
		return vs[0].([]OneDashboardPage)[vs[1].(int)]
	}).(OneDashboardPageOutput)
}

type OneDashboardPageWidgetArea struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetAreaNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetAreaInput is an input type that accepts OneDashboardPageWidgetAreaArgs and OneDashboardPageWidgetAreaOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetAreaInput` via:
//
//          OneDashboardPageWidgetAreaArgs{...}
type OneDashboardPageWidgetAreaInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetAreaOutput() OneDashboardPageWidgetAreaOutput
	ToOneDashboardPageWidgetAreaOutputWithContext(context.Context) OneDashboardPageWidgetAreaOutput
}

type OneDashboardPageWidgetAreaArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetAreaNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetAreaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetArea)(nil)).Elem()
}

func (i OneDashboardPageWidgetAreaArgs) ToOneDashboardPageWidgetAreaOutput() OneDashboardPageWidgetAreaOutput {
	return i.ToOneDashboardPageWidgetAreaOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetAreaArgs) ToOneDashboardPageWidgetAreaOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetAreaOutput)
}

// OneDashboardPageWidgetAreaArrayInput is an input type that accepts OneDashboardPageWidgetAreaArray and OneDashboardPageWidgetAreaArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetAreaArrayInput` via:
//
//          OneDashboardPageWidgetAreaArray{ OneDashboardPageWidgetAreaArgs{...} }
type OneDashboardPageWidgetAreaArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetAreaArrayOutput() OneDashboardPageWidgetAreaArrayOutput
	ToOneDashboardPageWidgetAreaArrayOutputWithContext(context.Context) OneDashboardPageWidgetAreaArrayOutput
}

type OneDashboardPageWidgetAreaArray []OneDashboardPageWidgetAreaInput

func (OneDashboardPageWidgetAreaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetArea)(nil)).Elem()
}

func (i OneDashboardPageWidgetAreaArray) ToOneDashboardPageWidgetAreaArrayOutput() OneDashboardPageWidgetAreaArrayOutput {
	return i.ToOneDashboardPageWidgetAreaArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetAreaArray) ToOneDashboardPageWidgetAreaArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetAreaArrayOutput)
}

type OneDashboardPageWidgetAreaOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetAreaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetArea)(nil)).Elem()
}

func (o OneDashboardPageWidgetAreaOutput) ToOneDashboardPageWidgetAreaOutput() OneDashboardPageWidgetAreaOutput {
	return o
}

func (o OneDashboardPageWidgetAreaOutput) ToOneDashboardPageWidgetAreaOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetAreaOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetAreaOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetAreaOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetAreaOutput) NrqlQueries() OneDashboardPageWidgetAreaNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) []OneDashboardPageWidgetAreaNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetAreaNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetAreaOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetAreaOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetAreaOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetArea) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetAreaArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetAreaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetArea)(nil)).Elem()
}

func (o OneDashboardPageWidgetAreaArrayOutput) ToOneDashboardPageWidgetAreaArrayOutput() OneDashboardPageWidgetAreaArrayOutput {
	return o
}

func (o OneDashboardPageWidgetAreaArrayOutput) ToOneDashboardPageWidgetAreaArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaArrayOutput {
	return o
}

func (o OneDashboardPageWidgetAreaArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetAreaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetArea {
		return vs[0].([]OneDashboardPageWidgetArea)[vs[1].(int)]
	}).(OneDashboardPageWidgetAreaOutput)
}

type OneDashboardPageWidgetAreaNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetAreaNrqlQueryInput is an input type that accepts OneDashboardPageWidgetAreaNrqlQueryArgs and OneDashboardPageWidgetAreaNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetAreaNrqlQueryInput` via:
//
//          OneDashboardPageWidgetAreaNrqlQueryArgs{...}
type OneDashboardPageWidgetAreaNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetAreaNrqlQueryOutput() OneDashboardPageWidgetAreaNrqlQueryOutput
	ToOneDashboardPageWidgetAreaNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetAreaNrqlQueryOutput
}

type OneDashboardPageWidgetAreaNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetAreaNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetAreaNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetAreaNrqlQueryArgs) ToOneDashboardPageWidgetAreaNrqlQueryOutput() OneDashboardPageWidgetAreaNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetAreaNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetAreaNrqlQueryArgs) ToOneDashboardPageWidgetAreaNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetAreaNrqlQueryOutput)
}

// OneDashboardPageWidgetAreaNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetAreaNrqlQueryArray and OneDashboardPageWidgetAreaNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetAreaNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetAreaNrqlQueryArray{ OneDashboardPageWidgetAreaNrqlQueryArgs{...} }
type OneDashboardPageWidgetAreaNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetAreaNrqlQueryArrayOutput() OneDashboardPageWidgetAreaNrqlQueryArrayOutput
	ToOneDashboardPageWidgetAreaNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetAreaNrqlQueryArrayOutput
}

type OneDashboardPageWidgetAreaNrqlQueryArray []OneDashboardPageWidgetAreaNrqlQueryInput

func (OneDashboardPageWidgetAreaNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetAreaNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetAreaNrqlQueryArray) ToOneDashboardPageWidgetAreaNrqlQueryArrayOutput() OneDashboardPageWidgetAreaNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetAreaNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetAreaNrqlQueryArray) ToOneDashboardPageWidgetAreaNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetAreaNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetAreaNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetAreaNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetAreaNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetAreaNrqlQueryOutput) ToOneDashboardPageWidgetAreaNrqlQueryOutput() OneDashboardPageWidgetAreaNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetAreaNrqlQueryOutput) ToOneDashboardPageWidgetAreaNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetAreaNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetAreaNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetAreaNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetAreaNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetAreaNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetAreaNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetAreaNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetAreaNrqlQueryArrayOutput) ToOneDashboardPageWidgetAreaNrqlQueryArrayOutput() OneDashboardPageWidgetAreaNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetAreaNrqlQueryArrayOutput) ToOneDashboardPageWidgetAreaNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetAreaNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetAreaNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetAreaNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetAreaNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetAreaNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetAreaNrqlQueryOutput)
}

type OneDashboardPageWidgetBar struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            *int     `pulumi:"height"`
	Id                *string  `pulumi:"id"`
	LinkedEntityGuids []string `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetBarNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetBarInput is an input type that accepts OneDashboardPageWidgetBarArgs and OneDashboardPageWidgetBarOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBarInput` via:
//
//          OneDashboardPageWidgetBarArgs{...}
type OneDashboardPageWidgetBarInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBarOutput() OneDashboardPageWidgetBarOutput
	ToOneDashboardPageWidgetBarOutputWithContext(context.Context) OneDashboardPageWidgetBarOutput
}

type OneDashboardPageWidgetBarArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            pulumi.IntPtrInput      `pulumi:"height"`
	Id                pulumi.StringPtrInput   `pulumi:"id"`
	LinkedEntityGuids pulumi.StringArrayInput `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetBarNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetBarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBar)(nil)).Elem()
}

func (i OneDashboardPageWidgetBarArgs) ToOneDashboardPageWidgetBarOutput() OneDashboardPageWidgetBarOutput {
	return i.ToOneDashboardPageWidgetBarOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBarArgs) ToOneDashboardPageWidgetBarOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBarOutput)
}

// OneDashboardPageWidgetBarArrayInput is an input type that accepts OneDashboardPageWidgetBarArray and OneDashboardPageWidgetBarArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBarArrayInput` via:
//
//          OneDashboardPageWidgetBarArray{ OneDashboardPageWidgetBarArgs{...} }
type OneDashboardPageWidgetBarArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBarArrayOutput() OneDashboardPageWidgetBarArrayOutput
	ToOneDashboardPageWidgetBarArrayOutputWithContext(context.Context) OneDashboardPageWidgetBarArrayOutput
}

type OneDashboardPageWidgetBarArray []OneDashboardPageWidgetBarInput

func (OneDashboardPageWidgetBarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBar)(nil)).Elem()
}

func (i OneDashboardPageWidgetBarArray) ToOneDashboardPageWidgetBarArrayOutput() OneDashboardPageWidgetBarArrayOutput {
	return i.ToOneDashboardPageWidgetBarArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBarArray) ToOneDashboardPageWidgetBarArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBarArrayOutput)
}

type OneDashboardPageWidgetBarOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBar)(nil)).Elem()
}

func (o OneDashboardPageWidgetBarOutput) ToOneDashboardPageWidgetBarOutput() OneDashboardPageWidgetBarOutput {
	return o
}

func (o OneDashboardPageWidgetBarOutput) ToOneDashboardPageWidgetBarOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBarOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetBarOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetBarOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o OneDashboardPageWidgetBarOutput) LinkedEntityGuids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) []string { return v.LinkedEntityGuids }).(pulumi.StringArrayOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetBarOutput) NrqlQueries() OneDashboardPageWidgetBarNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) []OneDashboardPageWidgetBarNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetBarNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBarOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetBarOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetBarOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBar) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetBarArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBar)(nil)).Elem()
}

func (o OneDashboardPageWidgetBarArrayOutput) ToOneDashboardPageWidgetBarArrayOutput() OneDashboardPageWidgetBarArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBarArrayOutput) ToOneDashboardPageWidgetBarArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBarArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBar {
		return vs[0].([]OneDashboardPageWidgetBar)[vs[1].(int)]
	}).(OneDashboardPageWidgetBarOutput)
}

type OneDashboardPageWidgetBarNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetBarNrqlQueryInput is an input type that accepts OneDashboardPageWidgetBarNrqlQueryArgs and OneDashboardPageWidgetBarNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBarNrqlQueryInput` via:
//
//          OneDashboardPageWidgetBarNrqlQueryArgs{...}
type OneDashboardPageWidgetBarNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBarNrqlQueryOutput() OneDashboardPageWidgetBarNrqlQueryOutput
	ToOneDashboardPageWidgetBarNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetBarNrqlQueryOutput
}

type OneDashboardPageWidgetBarNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetBarNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBarNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBarNrqlQueryArgs) ToOneDashboardPageWidgetBarNrqlQueryOutput() OneDashboardPageWidgetBarNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetBarNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBarNrqlQueryArgs) ToOneDashboardPageWidgetBarNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBarNrqlQueryOutput)
}

// OneDashboardPageWidgetBarNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetBarNrqlQueryArray and OneDashboardPageWidgetBarNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBarNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetBarNrqlQueryArray{ OneDashboardPageWidgetBarNrqlQueryArgs{...} }
type OneDashboardPageWidgetBarNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBarNrqlQueryArrayOutput() OneDashboardPageWidgetBarNrqlQueryArrayOutput
	ToOneDashboardPageWidgetBarNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetBarNrqlQueryArrayOutput
}

type OneDashboardPageWidgetBarNrqlQueryArray []OneDashboardPageWidgetBarNrqlQueryInput

func (OneDashboardPageWidgetBarNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBarNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBarNrqlQueryArray) ToOneDashboardPageWidgetBarNrqlQueryArrayOutput() OneDashboardPageWidgetBarNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetBarNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBarNrqlQueryArray) ToOneDashboardPageWidgetBarNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBarNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetBarNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBarNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBarNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBarNrqlQueryOutput) ToOneDashboardPageWidgetBarNrqlQueryOutput() OneDashboardPageWidgetBarNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetBarNrqlQueryOutput) ToOneDashboardPageWidgetBarNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetBarNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBarNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetBarNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBarNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetBarNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBarNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBarNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBarNrqlQueryArrayOutput) ToOneDashboardPageWidgetBarNrqlQueryArrayOutput() OneDashboardPageWidgetBarNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBarNrqlQueryArrayOutput) ToOneDashboardPageWidgetBarNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBarNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBarNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBarNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBarNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetBarNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetBarNrqlQueryOutput)
}

type OneDashboardPageWidgetBillboard struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Threshold above which the displayed value will be styled with a red color.
	Critical *float64 `pulumi:"critical"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetBillboardNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Threshold above which the displayed value will be styled with a yellow color.
	// * `widgetBullet`
	Warning *float64 `pulumi:"warning"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetBillboardInput is an input type that accepts OneDashboardPageWidgetBillboardArgs and OneDashboardPageWidgetBillboardOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBillboardInput` via:
//
//          OneDashboardPageWidgetBillboardArgs{...}
type OneDashboardPageWidgetBillboardInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBillboardOutput() OneDashboardPageWidgetBillboardOutput
	ToOneDashboardPageWidgetBillboardOutputWithContext(context.Context) OneDashboardPageWidgetBillboardOutput
}

type OneDashboardPageWidgetBillboardArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Threshold above which the displayed value will be styled with a red color.
	Critical pulumi.Float64PtrInput `pulumi:"critical"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetBillboardNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Threshold above which the displayed value will be styled with a yellow color.
	// * `widgetBullet`
	Warning pulumi.Float64PtrInput `pulumi:"warning"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetBillboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBillboard)(nil)).Elem()
}

func (i OneDashboardPageWidgetBillboardArgs) ToOneDashboardPageWidgetBillboardOutput() OneDashboardPageWidgetBillboardOutput {
	return i.ToOneDashboardPageWidgetBillboardOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBillboardArgs) ToOneDashboardPageWidgetBillboardOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBillboardOutput)
}

// OneDashboardPageWidgetBillboardArrayInput is an input type that accepts OneDashboardPageWidgetBillboardArray and OneDashboardPageWidgetBillboardArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBillboardArrayInput` via:
//
//          OneDashboardPageWidgetBillboardArray{ OneDashboardPageWidgetBillboardArgs{...} }
type OneDashboardPageWidgetBillboardArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBillboardArrayOutput() OneDashboardPageWidgetBillboardArrayOutput
	ToOneDashboardPageWidgetBillboardArrayOutputWithContext(context.Context) OneDashboardPageWidgetBillboardArrayOutput
}

type OneDashboardPageWidgetBillboardArray []OneDashboardPageWidgetBillboardInput

func (OneDashboardPageWidgetBillboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBillboard)(nil)).Elem()
}

func (i OneDashboardPageWidgetBillboardArray) ToOneDashboardPageWidgetBillboardArrayOutput() OneDashboardPageWidgetBillboardArrayOutput {
	return i.ToOneDashboardPageWidgetBillboardArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBillboardArray) ToOneDashboardPageWidgetBillboardArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBillboardArrayOutput)
}

type OneDashboardPageWidgetBillboardOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBillboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBillboard)(nil)).Elem()
}

func (o OneDashboardPageWidgetBillboardOutput) ToOneDashboardPageWidgetBillboardOutput() OneDashboardPageWidgetBillboardOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardOutput) ToOneDashboardPageWidgetBillboardOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBillboardOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Threshold above which the displayed value will be styled with a red color.
func (o OneDashboardPageWidgetBillboardOutput) Critical() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) *float64 { return v.Critical }).(pulumi.Float64PtrOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetBillboardOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetBillboardOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetBillboardOutput) NrqlQueries() OneDashboardPageWidgetBillboardNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) []OneDashboardPageWidgetBillboardNrqlQuery {
		return v.NrqlQueries
	}).(OneDashboardPageWidgetBillboardNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBillboardOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetBillboardOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Threshold above which the displayed value will be styled with a yellow color.
// * `widgetBullet`
func (o OneDashboardPageWidgetBillboardOutput) Warning() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) *float64 { return v.Warning }).(pulumi.Float64PtrOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetBillboardOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboard) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetBillboardArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBillboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBillboard)(nil)).Elem()
}

func (o OneDashboardPageWidgetBillboardArrayOutput) ToOneDashboardPageWidgetBillboardArrayOutput() OneDashboardPageWidgetBillboardArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardArrayOutput) ToOneDashboardPageWidgetBillboardArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBillboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBillboard {
		return vs[0].([]OneDashboardPageWidgetBillboard)[vs[1].(int)]
	}).(OneDashboardPageWidgetBillboardOutput)
}

type OneDashboardPageWidgetBillboardNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetBillboardNrqlQueryInput is an input type that accepts OneDashboardPageWidgetBillboardNrqlQueryArgs and OneDashboardPageWidgetBillboardNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBillboardNrqlQueryInput` via:
//
//          OneDashboardPageWidgetBillboardNrqlQueryArgs{...}
type OneDashboardPageWidgetBillboardNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBillboardNrqlQueryOutput() OneDashboardPageWidgetBillboardNrqlQueryOutput
	ToOneDashboardPageWidgetBillboardNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetBillboardNrqlQueryOutput
}

type OneDashboardPageWidgetBillboardNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetBillboardNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBillboardNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBillboardNrqlQueryArgs) ToOneDashboardPageWidgetBillboardNrqlQueryOutput() OneDashboardPageWidgetBillboardNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetBillboardNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBillboardNrqlQueryArgs) ToOneDashboardPageWidgetBillboardNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBillboardNrqlQueryOutput)
}

// OneDashboardPageWidgetBillboardNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetBillboardNrqlQueryArray and OneDashboardPageWidgetBillboardNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBillboardNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetBillboardNrqlQueryArray{ OneDashboardPageWidgetBillboardNrqlQueryArgs{...} }
type OneDashboardPageWidgetBillboardNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutput() OneDashboardPageWidgetBillboardNrqlQueryArrayOutput
	ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetBillboardNrqlQueryArrayOutput
}

type OneDashboardPageWidgetBillboardNrqlQueryArray []OneDashboardPageWidgetBillboardNrqlQueryInput

func (OneDashboardPageWidgetBillboardNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBillboardNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBillboardNrqlQueryArray) ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutput() OneDashboardPageWidgetBillboardNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBillboardNrqlQueryArray) ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBillboardNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetBillboardNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBillboardNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBillboardNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBillboardNrqlQueryOutput) ToOneDashboardPageWidgetBillboardNrqlQueryOutput() OneDashboardPageWidgetBillboardNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardNrqlQueryOutput) ToOneDashboardPageWidgetBillboardNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetBillboardNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboardNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetBillboardNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBillboardNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetBillboardNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBillboardNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBillboardNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBillboardNrqlQueryArrayOutput) ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutput() OneDashboardPageWidgetBillboardNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardNrqlQueryArrayOutput) ToOneDashboardPageWidgetBillboardNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBillboardNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBillboardNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBillboardNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBillboardNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetBillboardNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetBillboardNrqlQueryOutput)
}

type OneDashboardPageWidgetBullet struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Optional) Visualization limit for the widget.
	// * `widgetFunnel`
	Limit *float64 `pulumi:"limit"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetBulletNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetBulletInput is an input type that accepts OneDashboardPageWidgetBulletArgs and OneDashboardPageWidgetBulletOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBulletInput` via:
//
//          OneDashboardPageWidgetBulletArgs{...}
type OneDashboardPageWidgetBulletInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBulletOutput() OneDashboardPageWidgetBulletOutput
	ToOneDashboardPageWidgetBulletOutputWithContext(context.Context) OneDashboardPageWidgetBulletOutput
}

type OneDashboardPageWidgetBulletArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Optional) Visualization limit for the widget.
	// * `widgetFunnel`
	Limit pulumi.Float64PtrInput `pulumi:"limit"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetBulletNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetBulletArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBullet)(nil)).Elem()
}

func (i OneDashboardPageWidgetBulletArgs) ToOneDashboardPageWidgetBulletOutput() OneDashboardPageWidgetBulletOutput {
	return i.ToOneDashboardPageWidgetBulletOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBulletArgs) ToOneDashboardPageWidgetBulletOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBulletOutput)
}

// OneDashboardPageWidgetBulletArrayInput is an input type that accepts OneDashboardPageWidgetBulletArray and OneDashboardPageWidgetBulletArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBulletArrayInput` via:
//
//          OneDashboardPageWidgetBulletArray{ OneDashboardPageWidgetBulletArgs{...} }
type OneDashboardPageWidgetBulletArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBulletArrayOutput() OneDashboardPageWidgetBulletArrayOutput
	ToOneDashboardPageWidgetBulletArrayOutputWithContext(context.Context) OneDashboardPageWidgetBulletArrayOutput
}

type OneDashboardPageWidgetBulletArray []OneDashboardPageWidgetBulletInput

func (OneDashboardPageWidgetBulletArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBullet)(nil)).Elem()
}

func (i OneDashboardPageWidgetBulletArray) ToOneDashboardPageWidgetBulletArrayOutput() OneDashboardPageWidgetBulletArrayOutput {
	return i.ToOneDashboardPageWidgetBulletArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBulletArray) ToOneDashboardPageWidgetBulletArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBulletArrayOutput)
}

type OneDashboardPageWidgetBulletOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBulletOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBullet)(nil)).Elem()
}

func (o OneDashboardPageWidgetBulletOutput) ToOneDashboardPageWidgetBulletOutput() OneDashboardPageWidgetBulletOutput {
	return o
}

func (o OneDashboardPageWidgetBulletOutput) ToOneDashboardPageWidgetBulletOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBulletOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetBulletOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetBulletOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Optional) Visualization limit for the widget.
// * `widgetFunnel`
func (o OneDashboardPageWidgetBulletOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) *float64 { return v.Limit }).(pulumi.Float64PtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetBulletOutput) NrqlQueries() OneDashboardPageWidgetBulletNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) []OneDashboardPageWidgetBulletNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetBulletNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetBulletOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetBulletOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetBulletOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBullet) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetBulletArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBulletArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBullet)(nil)).Elem()
}

func (o OneDashboardPageWidgetBulletArrayOutput) ToOneDashboardPageWidgetBulletArrayOutput() OneDashboardPageWidgetBulletArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBulletArrayOutput) ToOneDashboardPageWidgetBulletArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBulletArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBulletOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBullet {
		return vs[0].([]OneDashboardPageWidgetBullet)[vs[1].(int)]
	}).(OneDashboardPageWidgetBulletOutput)
}

type OneDashboardPageWidgetBulletNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetBulletNrqlQueryInput is an input type that accepts OneDashboardPageWidgetBulletNrqlQueryArgs and OneDashboardPageWidgetBulletNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBulletNrqlQueryInput` via:
//
//          OneDashboardPageWidgetBulletNrqlQueryArgs{...}
type OneDashboardPageWidgetBulletNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBulletNrqlQueryOutput() OneDashboardPageWidgetBulletNrqlQueryOutput
	ToOneDashboardPageWidgetBulletNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetBulletNrqlQueryOutput
}

type OneDashboardPageWidgetBulletNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetBulletNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBulletNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBulletNrqlQueryArgs) ToOneDashboardPageWidgetBulletNrqlQueryOutput() OneDashboardPageWidgetBulletNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetBulletNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBulletNrqlQueryArgs) ToOneDashboardPageWidgetBulletNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBulletNrqlQueryOutput)
}

// OneDashboardPageWidgetBulletNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetBulletNrqlQueryArray and OneDashboardPageWidgetBulletNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetBulletNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetBulletNrqlQueryArray{ OneDashboardPageWidgetBulletNrqlQueryArgs{...} }
type OneDashboardPageWidgetBulletNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetBulletNrqlQueryArrayOutput() OneDashboardPageWidgetBulletNrqlQueryArrayOutput
	ToOneDashboardPageWidgetBulletNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetBulletNrqlQueryArrayOutput
}

type OneDashboardPageWidgetBulletNrqlQueryArray []OneDashboardPageWidgetBulletNrqlQueryInput

func (OneDashboardPageWidgetBulletNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBulletNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetBulletNrqlQueryArray) ToOneDashboardPageWidgetBulletNrqlQueryArrayOutput() OneDashboardPageWidgetBulletNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetBulletNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetBulletNrqlQueryArray) ToOneDashboardPageWidgetBulletNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetBulletNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetBulletNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBulletNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetBulletNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBulletNrqlQueryOutput) ToOneDashboardPageWidgetBulletNrqlQueryOutput() OneDashboardPageWidgetBulletNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetBulletNrqlQueryOutput) ToOneDashboardPageWidgetBulletNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetBulletNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBulletNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetBulletNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetBulletNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetBulletNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetBulletNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetBulletNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetBulletNrqlQueryArrayOutput) ToOneDashboardPageWidgetBulletNrqlQueryArrayOutput() OneDashboardPageWidgetBulletNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBulletNrqlQueryArrayOutput) ToOneDashboardPageWidgetBulletNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetBulletNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetBulletNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetBulletNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetBulletNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetBulletNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetBulletNrqlQueryOutput)
}

type OneDashboardPageWidgetFunnel struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetFunnelNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetFunnelInput is an input type that accepts OneDashboardPageWidgetFunnelArgs and OneDashboardPageWidgetFunnelOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetFunnelInput` via:
//
//          OneDashboardPageWidgetFunnelArgs{...}
type OneDashboardPageWidgetFunnelInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetFunnelOutput() OneDashboardPageWidgetFunnelOutput
	ToOneDashboardPageWidgetFunnelOutputWithContext(context.Context) OneDashboardPageWidgetFunnelOutput
}

type OneDashboardPageWidgetFunnelArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetFunnelNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetFunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetFunnel)(nil)).Elem()
}

func (i OneDashboardPageWidgetFunnelArgs) ToOneDashboardPageWidgetFunnelOutput() OneDashboardPageWidgetFunnelOutput {
	return i.ToOneDashboardPageWidgetFunnelOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetFunnelArgs) ToOneDashboardPageWidgetFunnelOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetFunnelOutput)
}

// OneDashboardPageWidgetFunnelArrayInput is an input type that accepts OneDashboardPageWidgetFunnelArray and OneDashboardPageWidgetFunnelArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetFunnelArrayInput` via:
//
//          OneDashboardPageWidgetFunnelArray{ OneDashboardPageWidgetFunnelArgs{...} }
type OneDashboardPageWidgetFunnelArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetFunnelArrayOutput() OneDashboardPageWidgetFunnelArrayOutput
	ToOneDashboardPageWidgetFunnelArrayOutputWithContext(context.Context) OneDashboardPageWidgetFunnelArrayOutput
}

type OneDashboardPageWidgetFunnelArray []OneDashboardPageWidgetFunnelInput

func (OneDashboardPageWidgetFunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetFunnel)(nil)).Elem()
}

func (i OneDashboardPageWidgetFunnelArray) ToOneDashboardPageWidgetFunnelArrayOutput() OneDashboardPageWidgetFunnelArrayOutput {
	return i.ToOneDashboardPageWidgetFunnelArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetFunnelArray) ToOneDashboardPageWidgetFunnelArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetFunnelArrayOutput)
}

type OneDashboardPageWidgetFunnelOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetFunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetFunnel)(nil)).Elem()
}

func (o OneDashboardPageWidgetFunnelOutput) ToOneDashboardPageWidgetFunnelOutput() OneDashboardPageWidgetFunnelOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelOutput) ToOneDashboardPageWidgetFunnelOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetFunnelOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetFunnelOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetFunnelOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetFunnelOutput) NrqlQueries() OneDashboardPageWidgetFunnelNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) []OneDashboardPageWidgetFunnelNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetFunnelNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetFunnelOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetFunnelOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetFunnelOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnel) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetFunnelArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetFunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetFunnel)(nil)).Elem()
}

func (o OneDashboardPageWidgetFunnelArrayOutput) ToOneDashboardPageWidgetFunnelArrayOutput() OneDashboardPageWidgetFunnelArrayOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelArrayOutput) ToOneDashboardPageWidgetFunnelArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelArrayOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetFunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetFunnel {
		return vs[0].([]OneDashboardPageWidgetFunnel)[vs[1].(int)]
	}).(OneDashboardPageWidgetFunnelOutput)
}

type OneDashboardPageWidgetFunnelNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetFunnelNrqlQueryInput is an input type that accepts OneDashboardPageWidgetFunnelNrqlQueryArgs and OneDashboardPageWidgetFunnelNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetFunnelNrqlQueryInput` via:
//
//          OneDashboardPageWidgetFunnelNrqlQueryArgs{...}
type OneDashboardPageWidgetFunnelNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetFunnelNrqlQueryOutput() OneDashboardPageWidgetFunnelNrqlQueryOutput
	ToOneDashboardPageWidgetFunnelNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetFunnelNrqlQueryOutput
}

type OneDashboardPageWidgetFunnelNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetFunnelNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetFunnelNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetFunnelNrqlQueryArgs) ToOneDashboardPageWidgetFunnelNrqlQueryOutput() OneDashboardPageWidgetFunnelNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetFunnelNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetFunnelNrqlQueryArgs) ToOneDashboardPageWidgetFunnelNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetFunnelNrqlQueryOutput)
}

// OneDashboardPageWidgetFunnelNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetFunnelNrqlQueryArray and OneDashboardPageWidgetFunnelNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetFunnelNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetFunnelNrqlQueryArray{ OneDashboardPageWidgetFunnelNrqlQueryArgs{...} }
type OneDashboardPageWidgetFunnelNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutput() OneDashboardPageWidgetFunnelNrqlQueryArrayOutput
	ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetFunnelNrqlQueryArrayOutput
}

type OneDashboardPageWidgetFunnelNrqlQueryArray []OneDashboardPageWidgetFunnelNrqlQueryInput

func (OneDashboardPageWidgetFunnelNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetFunnelNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetFunnelNrqlQueryArray) ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutput() OneDashboardPageWidgetFunnelNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetFunnelNrqlQueryArray) ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetFunnelNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetFunnelNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetFunnelNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetFunnelNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetFunnelNrqlQueryOutput) ToOneDashboardPageWidgetFunnelNrqlQueryOutput() OneDashboardPageWidgetFunnelNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelNrqlQueryOutput) ToOneDashboardPageWidgetFunnelNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetFunnelNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnelNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetFunnelNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetFunnelNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetFunnelNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetFunnelNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetFunnelNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetFunnelNrqlQueryArrayOutput) ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutput() OneDashboardPageWidgetFunnelNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelNrqlQueryArrayOutput) ToOneDashboardPageWidgetFunnelNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetFunnelNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetFunnelNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetFunnelNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetFunnelNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetFunnelNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetFunnelNrqlQueryOutput)
}

type OneDashboardPageWidgetHeatmap struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetHeatmapNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetHeatmapInput is an input type that accepts OneDashboardPageWidgetHeatmapArgs and OneDashboardPageWidgetHeatmapOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHeatmapInput` via:
//
//          OneDashboardPageWidgetHeatmapArgs{...}
type OneDashboardPageWidgetHeatmapInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHeatmapOutput() OneDashboardPageWidgetHeatmapOutput
	ToOneDashboardPageWidgetHeatmapOutputWithContext(context.Context) OneDashboardPageWidgetHeatmapOutput
}

type OneDashboardPageWidgetHeatmapArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetHeatmapNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetHeatmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHeatmap)(nil)).Elem()
}

func (i OneDashboardPageWidgetHeatmapArgs) ToOneDashboardPageWidgetHeatmapOutput() OneDashboardPageWidgetHeatmapOutput {
	return i.ToOneDashboardPageWidgetHeatmapOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHeatmapArgs) ToOneDashboardPageWidgetHeatmapOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHeatmapOutput)
}

// OneDashboardPageWidgetHeatmapArrayInput is an input type that accepts OneDashboardPageWidgetHeatmapArray and OneDashboardPageWidgetHeatmapArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHeatmapArrayInput` via:
//
//          OneDashboardPageWidgetHeatmapArray{ OneDashboardPageWidgetHeatmapArgs{...} }
type OneDashboardPageWidgetHeatmapArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHeatmapArrayOutput() OneDashboardPageWidgetHeatmapArrayOutput
	ToOneDashboardPageWidgetHeatmapArrayOutputWithContext(context.Context) OneDashboardPageWidgetHeatmapArrayOutput
}

type OneDashboardPageWidgetHeatmapArray []OneDashboardPageWidgetHeatmapInput

func (OneDashboardPageWidgetHeatmapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHeatmap)(nil)).Elem()
}

func (i OneDashboardPageWidgetHeatmapArray) ToOneDashboardPageWidgetHeatmapArrayOutput() OneDashboardPageWidgetHeatmapArrayOutput {
	return i.ToOneDashboardPageWidgetHeatmapArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHeatmapArray) ToOneDashboardPageWidgetHeatmapArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHeatmapArrayOutput)
}

type OneDashboardPageWidgetHeatmapOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHeatmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHeatmap)(nil)).Elem()
}

func (o OneDashboardPageWidgetHeatmapOutput) ToOneDashboardPageWidgetHeatmapOutput() OneDashboardPageWidgetHeatmapOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapOutput) ToOneDashboardPageWidgetHeatmapOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetHeatmapOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetHeatmapOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetHeatmapOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetHeatmapOutput) NrqlQueries() OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) []OneDashboardPageWidgetHeatmapNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetHeatmapOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetHeatmapOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetHeatmapOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmap) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetHeatmapArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHeatmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHeatmap)(nil)).Elem()
}

func (o OneDashboardPageWidgetHeatmapArrayOutput) ToOneDashboardPageWidgetHeatmapArrayOutput() OneDashboardPageWidgetHeatmapArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapArrayOutput) ToOneDashboardPageWidgetHeatmapArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetHeatmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetHeatmap {
		return vs[0].([]OneDashboardPageWidgetHeatmap)[vs[1].(int)]
	}).(OneDashboardPageWidgetHeatmapOutput)
}

type OneDashboardPageWidgetHeatmapNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetHeatmapNrqlQueryInput is an input type that accepts OneDashboardPageWidgetHeatmapNrqlQueryArgs and OneDashboardPageWidgetHeatmapNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHeatmapNrqlQueryInput` via:
//
//          OneDashboardPageWidgetHeatmapNrqlQueryArgs{...}
type OneDashboardPageWidgetHeatmapNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHeatmapNrqlQueryOutput() OneDashboardPageWidgetHeatmapNrqlQueryOutput
	ToOneDashboardPageWidgetHeatmapNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetHeatmapNrqlQueryOutput
}

type OneDashboardPageWidgetHeatmapNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetHeatmapNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHeatmapNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetHeatmapNrqlQueryArgs) ToOneDashboardPageWidgetHeatmapNrqlQueryOutput() OneDashboardPageWidgetHeatmapNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetHeatmapNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHeatmapNrqlQueryArgs) ToOneDashboardPageWidgetHeatmapNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHeatmapNrqlQueryOutput)
}

// OneDashboardPageWidgetHeatmapNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetHeatmapNrqlQueryArray and OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHeatmapNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetHeatmapNrqlQueryArray{ OneDashboardPageWidgetHeatmapNrqlQueryArgs{...} }
type OneDashboardPageWidgetHeatmapNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutput() OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput
	ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput
}

type OneDashboardPageWidgetHeatmapNrqlQueryArray []OneDashboardPageWidgetHeatmapNrqlQueryInput

func (OneDashboardPageWidgetHeatmapNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHeatmapNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetHeatmapNrqlQueryArray) ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutput() OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHeatmapNrqlQueryArray) ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetHeatmapNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHeatmapNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHeatmapNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetHeatmapNrqlQueryOutput) ToOneDashboardPageWidgetHeatmapNrqlQueryOutput() OneDashboardPageWidgetHeatmapNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapNrqlQueryOutput) ToOneDashboardPageWidgetHeatmapNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetHeatmapNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmapNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetHeatmapNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHeatmapNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHeatmapNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput) ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutput() OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput) ToOneDashboardPageWidgetHeatmapNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetHeatmapNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetHeatmapNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetHeatmapNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetHeatmapNrqlQueryOutput)
}

type OneDashboardPageWidgetHistogram struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetHistogramNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetHistogramInput is an input type that accepts OneDashboardPageWidgetHistogramArgs and OneDashboardPageWidgetHistogramOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHistogramInput` via:
//
//          OneDashboardPageWidgetHistogramArgs{...}
type OneDashboardPageWidgetHistogramInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHistogramOutput() OneDashboardPageWidgetHistogramOutput
	ToOneDashboardPageWidgetHistogramOutputWithContext(context.Context) OneDashboardPageWidgetHistogramOutput
}

type OneDashboardPageWidgetHistogramArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetHistogramNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetHistogramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHistogram)(nil)).Elem()
}

func (i OneDashboardPageWidgetHistogramArgs) ToOneDashboardPageWidgetHistogramOutput() OneDashboardPageWidgetHistogramOutput {
	return i.ToOneDashboardPageWidgetHistogramOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHistogramArgs) ToOneDashboardPageWidgetHistogramOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHistogramOutput)
}

// OneDashboardPageWidgetHistogramArrayInput is an input type that accepts OneDashboardPageWidgetHistogramArray and OneDashboardPageWidgetHistogramArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHistogramArrayInput` via:
//
//          OneDashboardPageWidgetHistogramArray{ OneDashboardPageWidgetHistogramArgs{...} }
type OneDashboardPageWidgetHistogramArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHistogramArrayOutput() OneDashboardPageWidgetHistogramArrayOutput
	ToOneDashboardPageWidgetHistogramArrayOutputWithContext(context.Context) OneDashboardPageWidgetHistogramArrayOutput
}

type OneDashboardPageWidgetHistogramArray []OneDashboardPageWidgetHistogramInput

func (OneDashboardPageWidgetHistogramArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHistogram)(nil)).Elem()
}

func (i OneDashboardPageWidgetHistogramArray) ToOneDashboardPageWidgetHistogramArrayOutput() OneDashboardPageWidgetHistogramArrayOutput {
	return i.ToOneDashboardPageWidgetHistogramArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHistogramArray) ToOneDashboardPageWidgetHistogramArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHistogramArrayOutput)
}

type OneDashboardPageWidgetHistogramOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHistogramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHistogram)(nil)).Elem()
}

func (o OneDashboardPageWidgetHistogramOutput) ToOneDashboardPageWidgetHistogramOutput() OneDashboardPageWidgetHistogramOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramOutput) ToOneDashboardPageWidgetHistogramOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetHistogramOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetHistogramOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetHistogramOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetHistogramOutput) NrqlQueries() OneDashboardPageWidgetHistogramNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) []OneDashboardPageWidgetHistogramNrqlQuery {
		return v.NrqlQueries
	}).(OneDashboardPageWidgetHistogramNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetHistogramOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetHistogramOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetHistogramOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogram) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetHistogramArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHistogramArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHistogram)(nil)).Elem()
}

func (o OneDashboardPageWidgetHistogramArrayOutput) ToOneDashboardPageWidgetHistogramArrayOutput() OneDashboardPageWidgetHistogramArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramArrayOutput) ToOneDashboardPageWidgetHistogramArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetHistogramOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetHistogram {
		return vs[0].([]OneDashboardPageWidgetHistogram)[vs[1].(int)]
	}).(OneDashboardPageWidgetHistogramOutput)
}

type OneDashboardPageWidgetHistogramNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetHistogramNrqlQueryInput is an input type that accepts OneDashboardPageWidgetHistogramNrqlQueryArgs and OneDashboardPageWidgetHistogramNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHistogramNrqlQueryInput` via:
//
//          OneDashboardPageWidgetHistogramNrqlQueryArgs{...}
type OneDashboardPageWidgetHistogramNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHistogramNrqlQueryOutput() OneDashboardPageWidgetHistogramNrqlQueryOutput
	ToOneDashboardPageWidgetHistogramNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetHistogramNrqlQueryOutput
}

type OneDashboardPageWidgetHistogramNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetHistogramNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHistogramNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetHistogramNrqlQueryArgs) ToOneDashboardPageWidgetHistogramNrqlQueryOutput() OneDashboardPageWidgetHistogramNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetHistogramNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHistogramNrqlQueryArgs) ToOneDashboardPageWidgetHistogramNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHistogramNrqlQueryOutput)
}

// OneDashboardPageWidgetHistogramNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetHistogramNrqlQueryArray and OneDashboardPageWidgetHistogramNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetHistogramNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetHistogramNrqlQueryArray{ OneDashboardPageWidgetHistogramNrqlQueryArgs{...} }
type OneDashboardPageWidgetHistogramNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutput() OneDashboardPageWidgetHistogramNrqlQueryArrayOutput
	ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetHistogramNrqlQueryArrayOutput
}

type OneDashboardPageWidgetHistogramNrqlQueryArray []OneDashboardPageWidgetHistogramNrqlQueryInput

func (OneDashboardPageWidgetHistogramNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHistogramNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetHistogramNrqlQueryArray) ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutput() OneDashboardPageWidgetHistogramNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetHistogramNrqlQueryArray) ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetHistogramNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetHistogramNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHistogramNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetHistogramNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetHistogramNrqlQueryOutput) ToOneDashboardPageWidgetHistogramNrqlQueryOutput() OneDashboardPageWidgetHistogramNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramNrqlQueryOutput) ToOneDashboardPageWidgetHistogramNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetHistogramNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogramNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetHistogramNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetHistogramNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetHistogramNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetHistogramNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetHistogramNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetHistogramNrqlQueryArrayOutput) ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutput() OneDashboardPageWidgetHistogramNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramNrqlQueryArrayOutput) ToOneDashboardPageWidgetHistogramNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetHistogramNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetHistogramNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetHistogramNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetHistogramNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetHistogramNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetHistogramNrqlQueryOutput)
}

type OneDashboardPageWidgetJson struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetJsonNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetJsonInput is an input type that accepts OneDashboardPageWidgetJsonArgs and OneDashboardPageWidgetJsonOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetJsonInput` via:
//
//          OneDashboardPageWidgetJsonArgs{...}
type OneDashboardPageWidgetJsonInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetJsonOutput() OneDashboardPageWidgetJsonOutput
	ToOneDashboardPageWidgetJsonOutputWithContext(context.Context) OneDashboardPageWidgetJsonOutput
}

type OneDashboardPageWidgetJsonArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetJsonNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetJson)(nil)).Elem()
}

func (i OneDashboardPageWidgetJsonArgs) ToOneDashboardPageWidgetJsonOutput() OneDashboardPageWidgetJsonOutput {
	return i.ToOneDashboardPageWidgetJsonOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetJsonArgs) ToOneDashboardPageWidgetJsonOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetJsonOutput)
}

// OneDashboardPageWidgetJsonArrayInput is an input type that accepts OneDashboardPageWidgetJsonArray and OneDashboardPageWidgetJsonArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetJsonArrayInput` via:
//
//          OneDashboardPageWidgetJsonArray{ OneDashboardPageWidgetJsonArgs{...} }
type OneDashboardPageWidgetJsonArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetJsonArrayOutput() OneDashboardPageWidgetJsonArrayOutput
	ToOneDashboardPageWidgetJsonArrayOutputWithContext(context.Context) OneDashboardPageWidgetJsonArrayOutput
}

type OneDashboardPageWidgetJsonArray []OneDashboardPageWidgetJsonInput

func (OneDashboardPageWidgetJsonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetJson)(nil)).Elem()
}

func (i OneDashboardPageWidgetJsonArray) ToOneDashboardPageWidgetJsonArrayOutput() OneDashboardPageWidgetJsonArrayOutput {
	return i.ToOneDashboardPageWidgetJsonArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetJsonArray) ToOneDashboardPageWidgetJsonArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetJsonArrayOutput)
}

type OneDashboardPageWidgetJsonOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetJson)(nil)).Elem()
}

func (o OneDashboardPageWidgetJsonOutput) ToOneDashboardPageWidgetJsonOutput() OneDashboardPageWidgetJsonOutput {
	return o
}

func (o OneDashboardPageWidgetJsonOutput) ToOneDashboardPageWidgetJsonOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetJsonOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetJsonOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetJsonOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetJsonOutput) NrqlQueries() OneDashboardPageWidgetJsonNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) []OneDashboardPageWidgetJsonNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetJsonNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetJsonOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetJsonOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetJsonOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJson) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetJsonArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetJsonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetJson)(nil)).Elem()
}

func (o OneDashboardPageWidgetJsonArrayOutput) ToOneDashboardPageWidgetJsonArrayOutput() OneDashboardPageWidgetJsonArrayOutput {
	return o
}

func (o OneDashboardPageWidgetJsonArrayOutput) ToOneDashboardPageWidgetJsonArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonArrayOutput {
	return o
}

func (o OneDashboardPageWidgetJsonArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetJsonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetJson {
		return vs[0].([]OneDashboardPageWidgetJson)[vs[1].(int)]
	}).(OneDashboardPageWidgetJsonOutput)
}

type OneDashboardPageWidgetJsonNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetJsonNrqlQueryInput is an input type that accepts OneDashboardPageWidgetJsonNrqlQueryArgs and OneDashboardPageWidgetJsonNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetJsonNrqlQueryInput` via:
//
//          OneDashboardPageWidgetJsonNrqlQueryArgs{...}
type OneDashboardPageWidgetJsonNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetJsonNrqlQueryOutput() OneDashboardPageWidgetJsonNrqlQueryOutput
	ToOneDashboardPageWidgetJsonNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetJsonNrqlQueryOutput
}

type OneDashboardPageWidgetJsonNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetJsonNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetJsonNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetJsonNrqlQueryArgs) ToOneDashboardPageWidgetJsonNrqlQueryOutput() OneDashboardPageWidgetJsonNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetJsonNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetJsonNrqlQueryArgs) ToOneDashboardPageWidgetJsonNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetJsonNrqlQueryOutput)
}

// OneDashboardPageWidgetJsonNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetJsonNrqlQueryArray and OneDashboardPageWidgetJsonNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetJsonNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetJsonNrqlQueryArray{ OneDashboardPageWidgetJsonNrqlQueryArgs{...} }
type OneDashboardPageWidgetJsonNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetJsonNrqlQueryArrayOutput() OneDashboardPageWidgetJsonNrqlQueryArrayOutput
	ToOneDashboardPageWidgetJsonNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetJsonNrqlQueryArrayOutput
}

type OneDashboardPageWidgetJsonNrqlQueryArray []OneDashboardPageWidgetJsonNrqlQueryInput

func (OneDashboardPageWidgetJsonNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetJsonNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetJsonNrqlQueryArray) ToOneDashboardPageWidgetJsonNrqlQueryArrayOutput() OneDashboardPageWidgetJsonNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetJsonNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetJsonNrqlQueryArray) ToOneDashboardPageWidgetJsonNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetJsonNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetJsonNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetJsonNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetJsonNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetJsonNrqlQueryOutput) ToOneDashboardPageWidgetJsonNrqlQueryOutput() OneDashboardPageWidgetJsonNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetJsonNrqlQueryOutput) ToOneDashboardPageWidgetJsonNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetJsonNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJsonNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetJsonNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetJsonNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetJsonNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetJsonNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetJsonNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetJsonNrqlQueryArrayOutput) ToOneDashboardPageWidgetJsonNrqlQueryArrayOutput() OneDashboardPageWidgetJsonNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetJsonNrqlQueryArrayOutput) ToOneDashboardPageWidgetJsonNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetJsonNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetJsonNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetJsonNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetJsonNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetJsonNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetJsonNrqlQueryOutput)
}

type OneDashboardPageWidgetLine struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetLineNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetLineInput is an input type that accepts OneDashboardPageWidgetLineArgs and OneDashboardPageWidgetLineOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetLineInput` via:
//
//          OneDashboardPageWidgetLineArgs{...}
type OneDashboardPageWidgetLineInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetLineOutput() OneDashboardPageWidgetLineOutput
	ToOneDashboardPageWidgetLineOutputWithContext(context.Context) OneDashboardPageWidgetLineOutput
}

type OneDashboardPageWidgetLineArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetLineNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetLineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetLine)(nil)).Elem()
}

func (i OneDashboardPageWidgetLineArgs) ToOneDashboardPageWidgetLineOutput() OneDashboardPageWidgetLineOutput {
	return i.ToOneDashboardPageWidgetLineOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetLineArgs) ToOneDashboardPageWidgetLineOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetLineOutput)
}

// OneDashboardPageWidgetLineArrayInput is an input type that accepts OneDashboardPageWidgetLineArray and OneDashboardPageWidgetLineArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetLineArrayInput` via:
//
//          OneDashboardPageWidgetLineArray{ OneDashboardPageWidgetLineArgs{...} }
type OneDashboardPageWidgetLineArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetLineArrayOutput() OneDashboardPageWidgetLineArrayOutput
	ToOneDashboardPageWidgetLineArrayOutputWithContext(context.Context) OneDashboardPageWidgetLineArrayOutput
}

type OneDashboardPageWidgetLineArray []OneDashboardPageWidgetLineInput

func (OneDashboardPageWidgetLineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetLine)(nil)).Elem()
}

func (i OneDashboardPageWidgetLineArray) ToOneDashboardPageWidgetLineArrayOutput() OneDashboardPageWidgetLineArrayOutput {
	return i.ToOneDashboardPageWidgetLineArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetLineArray) ToOneDashboardPageWidgetLineArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetLineArrayOutput)
}

type OneDashboardPageWidgetLineOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetLineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetLine)(nil)).Elem()
}

func (o OneDashboardPageWidgetLineOutput) ToOneDashboardPageWidgetLineOutput() OneDashboardPageWidgetLineOutput {
	return o
}

func (o OneDashboardPageWidgetLineOutput) ToOneDashboardPageWidgetLineOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetLineOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetLineOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetLineOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetLineOutput) NrqlQueries() OneDashboardPageWidgetLineNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) []OneDashboardPageWidgetLineNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetLineNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetLineOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetLineOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetLineOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLine) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetLineArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetLineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetLine)(nil)).Elem()
}

func (o OneDashboardPageWidgetLineArrayOutput) ToOneDashboardPageWidgetLineArrayOutput() OneDashboardPageWidgetLineArrayOutput {
	return o
}

func (o OneDashboardPageWidgetLineArrayOutput) ToOneDashboardPageWidgetLineArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineArrayOutput {
	return o
}

func (o OneDashboardPageWidgetLineArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetLineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetLine {
		return vs[0].([]OneDashboardPageWidgetLine)[vs[1].(int)]
	}).(OneDashboardPageWidgetLineOutput)
}

type OneDashboardPageWidgetLineNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetLineNrqlQueryInput is an input type that accepts OneDashboardPageWidgetLineNrqlQueryArgs and OneDashboardPageWidgetLineNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetLineNrqlQueryInput` via:
//
//          OneDashboardPageWidgetLineNrqlQueryArgs{...}
type OneDashboardPageWidgetLineNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetLineNrqlQueryOutput() OneDashboardPageWidgetLineNrqlQueryOutput
	ToOneDashboardPageWidgetLineNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetLineNrqlQueryOutput
}

type OneDashboardPageWidgetLineNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetLineNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetLineNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetLineNrqlQueryArgs) ToOneDashboardPageWidgetLineNrqlQueryOutput() OneDashboardPageWidgetLineNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetLineNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetLineNrqlQueryArgs) ToOneDashboardPageWidgetLineNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetLineNrqlQueryOutput)
}

// OneDashboardPageWidgetLineNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetLineNrqlQueryArray and OneDashboardPageWidgetLineNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetLineNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetLineNrqlQueryArray{ OneDashboardPageWidgetLineNrqlQueryArgs{...} }
type OneDashboardPageWidgetLineNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetLineNrqlQueryArrayOutput() OneDashboardPageWidgetLineNrqlQueryArrayOutput
	ToOneDashboardPageWidgetLineNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetLineNrqlQueryArrayOutput
}

type OneDashboardPageWidgetLineNrqlQueryArray []OneDashboardPageWidgetLineNrqlQueryInput

func (OneDashboardPageWidgetLineNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetLineNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetLineNrqlQueryArray) ToOneDashboardPageWidgetLineNrqlQueryArrayOutput() OneDashboardPageWidgetLineNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetLineNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetLineNrqlQueryArray) ToOneDashboardPageWidgetLineNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetLineNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetLineNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetLineNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetLineNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetLineNrqlQueryOutput) ToOneDashboardPageWidgetLineNrqlQueryOutput() OneDashboardPageWidgetLineNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetLineNrqlQueryOutput) ToOneDashboardPageWidgetLineNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetLineNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLineNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetLineNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetLineNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetLineNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetLineNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetLineNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetLineNrqlQueryArrayOutput) ToOneDashboardPageWidgetLineNrqlQueryArrayOutput() OneDashboardPageWidgetLineNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetLineNrqlQueryArrayOutput) ToOneDashboardPageWidgetLineNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetLineNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetLineNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetLineNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetLineNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetLineNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetLineNrqlQueryOutput)
}

type OneDashboardPageWidgetMarkdown struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) The markdown source to be rendered in the widget.
	// * `widgetPie`
	Text *string `pulumi:"text"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetMarkdownInput is an input type that accepts OneDashboardPageWidgetMarkdownArgs and OneDashboardPageWidgetMarkdownOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetMarkdownInput` via:
//
//          OneDashboardPageWidgetMarkdownArgs{...}
type OneDashboardPageWidgetMarkdownInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetMarkdownOutput() OneDashboardPageWidgetMarkdownOutput
	ToOneDashboardPageWidgetMarkdownOutputWithContext(context.Context) OneDashboardPageWidgetMarkdownOutput
}

type OneDashboardPageWidgetMarkdownArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) The markdown source to be rendered in the widget.
	// * `widgetPie`
	Text pulumi.StringPtrInput `pulumi:"text"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetMarkdownArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetMarkdown)(nil)).Elem()
}

func (i OneDashboardPageWidgetMarkdownArgs) ToOneDashboardPageWidgetMarkdownOutput() OneDashboardPageWidgetMarkdownOutput {
	return i.ToOneDashboardPageWidgetMarkdownOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetMarkdownArgs) ToOneDashboardPageWidgetMarkdownOutputWithContext(ctx context.Context) OneDashboardPageWidgetMarkdownOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetMarkdownOutput)
}

// OneDashboardPageWidgetMarkdownArrayInput is an input type that accepts OneDashboardPageWidgetMarkdownArray and OneDashboardPageWidgetMarkdownArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetMarkdownArrayInput` via:
//
//          OneDashboardPageWidgetMarkdownArray{ OneDashboardPageWidgetMarkdownArgs{...} }
type OneDashboardPageWidgetMarkdownArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetMarkdownArrayOutput() OneDashboardPageWidgetMarkdownArrayOutput
	ToOneDashboardPageWidgetMarkdownArrayOutputWithContext(context.Context) OneDashboardPageWidgetMarkdownArrayOutput
}

type OneDashboardPageWidgetMarkdownArray []OneDashboardPageWidgetMarkdownInput

func (OneDashboardPageWidgetMarkdownArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetMarkdown)(nil)).Elem()
}

func (i OneDashboardPageWidgetMarkdownArray) ToOneDashboardPageWidgetMarkdownArrayOutput() OneDashboardPageWidgetMarkdownArrayOutput {
	return i.ToOneDashboardPageWidgetMarkdownArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetMarkdownArray) ToOneDashboardPageWidgetMarkdownArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetMarkdownArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetMarkdownArrayOutput)
}

type OneDashboardPageWidgetMarkdownOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetMarkdownOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetMarkdown)(nil)).Elem()
}

func (o OneDashboardPageWidgetMarkdownOutput) ToOneDashboardPageWidgetMarkdownOutput() OneDashboardPageWidgetMarkdownOutput {
	return o
}

func (o OneDashboardPageWidgetMarkdownOutput) ToOneDashboardPageWidgetMarkdownOutputWithContext(ctx context.Context) OneDashboardPageWidgetMarkdownOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetMarkdownOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetMarkdownOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetMarkdownOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetMarkdownOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) The markdown source to be rendered in the widget.
// * `widgetPie`
func (o OneDashboardPageWidgetMarkdownOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) *string { return v.Text }).(pulumi.StringPtrOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetMarkdownOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetMarkdownOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetMarkdown) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetMarkdownArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetMarkdownArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetMarkdown)(nil)).Elem()
}

func (o OneDashboardPageWidgetMarkdownArrayOutput) ToOneDashboardPageWidgetMarkdownArrayOutput() OneDashboardPageWidgetMarkdownArrayOutput {
	return o
}

func (o OneDashboardPageWidgetMarkdownArrayOutput) ToOneDashboardPageWidgetMarkdownArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetMarkdownArrayOutput {
	return o
}

func (o OneDashboardPageWidgetMarkdownArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetMarkdownOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetMarkdown {
		return vs[0].([]OneDashboardPageWidgetMarkdown)[vs[1].(int)]
	}).(OneDashboardPageWidgetMarkdownOutput)
}

type OneDashboardPageWidgetPy struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            *int     `pulumi:"height"`
	Id                *string  `pulumi:"id"`
	LinkedEntityGuids []string `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetPyNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetPyInput is an input type that accepts OneDashboardPageWidgetPyArgs and OneDashboardPageWidgetPyOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetPyInput` via:
//
//          OneDashboardPageWidgetPyArgs{...}
type OneDashboardPageWidgetPyInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetPyOutput() OneDashboardPageWidgetPyOutput
	ToOneDashboardPageWidgetPyOutputWithContext(context.Context) OneDashboardPageWidgetPyOutput
}

type OneDashboardPageWidgetPyArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            pulumi.IntPtrInput      `pulumi:"height"`
	Id                pulumi.StringPtrInput   `pulumi:"id"`
	LinkedEntityGuids pulumi.StringArrayInput `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetPyNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetPyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetPy)(nil)).Elem()
}

func (i OneDashboardPageWidgetPyArgs) ToOneDashboardPageWidgetPyOutput() OneDashboardPageWidgetPyOutput {
	return i.ToOneDashboardPageWidgetPyOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetPyArgs) ToOneDashboardPageWidgetPyOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetPyOutput)
}

// OneDashboardPageWidgetPyArrayInput is an input type that accepts OneDashboardPageWidgetPyArray and OneDashboardPageWidgetPyArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetPyArrayInput` via:
//
//          OneDashboardPageWidgetPyArray{ OneDashboardPageWidgetPyArgs{...} }
type OneDashboardPageWidgetPyArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetPyArrayOutput() OneDashboardPageWidgetPyArrayOutput
	ToOneDashboardPageWidgetPyArrayOutputWithContext(context.Context) OneDashboardPageWidgetPyArrayOutput
}

type OneDashboardPageWidgetPyArray []OneDashboardPageWidgetPyInput

func (OneDashboardPageWidgetPyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetPy)(nil)).Elem()
}

func (i OneDashboardPageWidgetPyArray) ToOneDashboardPageWidgetPyArrayOutput() OneDashboardPageWidgetPyArrayOutput {
	return i.ToOneDashboardPageWidgetPyArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetPyArray) ToOneDashboardPageWidgetPyArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetPyArrayOutput)
}

type OneDashboardPageWidgetPyOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetPyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetPy)(nil)).Elem()
}

func (o OneDashboardPageWidgetPyOutput) ToOneDashboardPageWidgetPyOutput() OneDashboardPageWidgetPyOutput {
	return o
}

func (o OneDashboardPageWidgetPyOutput) ToOneDashboardPageWidgetPyOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetPyOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetPyOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetPyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o OneDashboardPageWidgetPyOutput) LinkedEntityGuids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) []string { return v.LinkedEntityGuids }).(pulumi.StringArrayOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetPyOutput) NrqlQueries() OneDashboardPageWidgetPyNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) []OneDashboardPageWidgetPyNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetPyNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetPyOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetPyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetPyOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPy) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetPyArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetPyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetPy)(nil)).Elem()
}

func (o OneDashboardPageWidgetPyArrayOutput) ToOneDashboardPageWidgetPyArrayOutput() OneDashboardPageWidgetPyArrayOutput {
	return o
}

func (o OneDashboardPageWidgetPyArrayOutput) ToOneDashboardPageWidgetPyArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyArrayOutput {
	return o
}

func (o OneDashboardPageWidgetPyArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetPyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetPy {
		return vs[0].([]OneDashboardPageWidgetPy)[vs[1].(int)]
	}).(OneDashboardPageWidgetPyOutput)
}

type OneDashboardPageWidgetPyNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetPyNrqlQueryInput is an input type that accepts OneDashboardPageWidgetPyNrqlQueryArgs and OneDashboardPageWidgetPyNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetPyNrqlQueryInput` via:
//
//          OneDashboardPageWidgetPyNrqlQueryArgs{...}
type OneDashboardPageWidgetPyNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetPyNrqlQueryOutput() OneDashboardPageWidgetPyNrqlQueryOutput
	ToOneDashboardPageWidgetPyNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetPyNrqlQueryOutput
}

type OneDashboardPageWidgetPyNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetPyNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetPyNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetPyNrqlQueryArgs) ToOneDashboardPageWidgetPyNrqlQueryOutput() OneDashboardPageWidgetPyNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetPyNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetPyNrqlQueryArgs) ToOneDashboardPageWidgetPyNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetPyNrqlQueryOutput)
}

// OneDashboardPageWidgetPyNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetPyNrqlQueryArray and OneDashboardPageWidgetPyNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetPyNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetPyNrqlQueryArray{ OneDashboardPageWidgetPyNrqlQueryArgs{...} }
type OneDashboardPageWidgetPyNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetPyNrqlQueryArrayOutput() OneDashboardPageWidgetPyNrqlQueryArrayOutput
	ToOneDashboardPageWidgetPyNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetPyNrqlQueryArrayOutput
}

type OneDashboardPageWidgetPyNrqlQueryArray []OneDashboardPageWidgetPyNrqlQueryInput

func (OneDashboardPageWidgetPyNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetPyNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetPyNrqlQueryArray) ToOneDashboardPageWidgetPyNrqlQueryArrayOutput() OneDashboardPageWidgetPyNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetPyNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetPyNrqlQueryArray) ToOneDashboardPageWidgetPyNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetPyNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetPyNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetPyNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetPyNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetPyNrqlQueryOutput) ToOneDashboardPageWidgetPyNrqlQueryOutput() OneDashboardPageWidgetPyNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetPyNrqlQueryOutput) ToOneDashboardPageWidgetPyNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetPyNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPyNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetPyNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetPyNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetPyNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetPyNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetPyNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetPyNrqlQueryArrayOutput) ToOneDashboardPageWidgetPyNrqlQueryArrayOutput() OneDashboardPageWidgetPyNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetPyNrqlQueryArrayOutput) ToOneDashboardPageWidgetPyNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetPyNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetPyNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetPyNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetPyNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetPyNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetPyNrqlQueryOutput)
}

type OneDashboardPageWidgetTable struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            *int     `pulumi:"height"`
	Id                *string  `pulumi:"id"`
	LinkedEntityGuids []string `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries []OneDashboardPageWidgetTableNrqlQuery `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardPageWidgetTableInput is an input type that accepts OneDashboardPageWidgetTableArgs and OneDashboardPageWidgetTableOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetTableInput` via:
//
//          OneDashboardPageWidgetTableArgs{...}
type OneDashboardPageWidgetTableInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetTableOutput() OneDashboardPageWidgetTableOutput
	ToOneDashboardPageWidgetTableOutputWithContext(context.Context) OneDashboardPageWidgetTableOutput
}

type OneDashboardPageWidgetTableArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
	Height            pulumi.IntPtrInput      `pulumi:"height"`
	Id                pulumi.StringPtrInput   `pulumi:"id"`
	LinkedEntityGuids pulumi.StringArrayInput `pulumi:"linkedEntityGuids"`
	// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
	// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
	NrqlQueries OneDashboardPageWidgetTableNrqlQueryArrayInput `pulumi:"nrqlQueries"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardPageWidgetTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetTable)(nil)).Elem()
}

func (i OneDashboardPageWidgetTableArgs) ToOneDashboardPageWidgetTableOutput() OneDashboardPageWidgetTableOutput {
	return i.ToOneDashboardPageWidgetTableOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetTableArgs) ToOneDashboardPageWidgetTableOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetTableOutput)
}

// OneDashboardPageWidgetTableArrayInput is an input type that accepts OneDashboardPageWidgetTableArray and OneDashboardPageWidgetTableArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetTableArrayInput` via:
//
//          OneDashboardPageWidgetTableArray{ OneDashboardPageWidgetTableArgs{...} }
type OneDashboardPageWidgetTableArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetTableArrayOutput() OneDashboardPageWidgetTableArrayOutput
	ToOneDashboardPageWidgetTableArrayOutputWithContext(context.Context) OneDashboardPageWidgetTableArrayOutput
}

type OneDashboardPageWidgetTableArray []OneDashboardPageWidgetTableInput

func (OneDashboardPageWidgetTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetTable)(nil)).Elem()
}

func (i OneDashboardPageWidgetTableArray) ToOneDashboardPageWidgetTableArrayOutput() OneDashboardPageWidgetTableArrayOutput {
	return i.ToOneDashboardPageWidgetTableArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetTableArray) ToOneDashboardPageWidgetTableArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetTableArrayOutput)
}

type OneDashboardPageWidgetTableOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetTable)(nil)).Elem()
}

func (o OneDashboardPageWidgetTableOutput) ToOneDashboardPageWidgetTableOutput() OneDashboardPageWidgetTableOutput {
	return o
}

func (o OneDashboardPageWidgetTableOutput) ToOneDashboardPageWidgetTableOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetTableOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) int { return v.Column }).(pulumi.IntOutput)
}

// (Optional) Height of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `3`.
func (o OneDashboardPageWidgetTableOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardPageWidgetTableOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o OneDashboardPageWidgetTableOutput) LinkedEntityGuids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) []string { return v.LinkedEntityGuids }).(pulumi.StringArrayOutput)
}

// (Required) A nested block that describes a NRQL Query. See Nested nrql\_query blocks below for details.
// * `linkedEntityGuids`: (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.
func (o OneDashboardPageWidgetTableOutput) NrqlQueries() OneDashboardPageWidgetTableNrqlQueryArrayOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) []OneDashboardPageWidgetTableNrqlQuery { return v.NrqlQueries }).(OneDashboardPageWidgetTableNrqlQueryArrayOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardPageWidgetTableOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardPageWidgetTableOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) string { return v.Title }).(pulumi.StringOutput)
}

// (Optional) Width of the widget.  Valid values are `1` to `12` inclusive.  Defaults to `4`.
func (o OneDashboardPageWidgetTableOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTable) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardPageWidgetTableArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetTable)(nil)).Elem()
}

func (o OneDashboardPageWidgetTableArrayOutput) ToOneDashboardPageWidgetTableArrayOutput() OneDashboardPageWidgetTableArrayOutput {
	return o
}

func (o OneDashboardPageWidgetTableArrayOutput) ToOneDashboardPageWidgetTableArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableArrayOutput {
	return o
}

func (o OneDashboardPageWidgetTableArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetTable {
		return vs[0].([]OneDashboardPageWidgetTable)[vs[1].(int)]
	}).(OneDashboardPageWidgetTableOutput)
}

type OneDashboardPageWidgetTableNrqlQuery struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId *int `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query string `pulumi:"query"`
}

// OneDashboardPageWidgetTableNrqlQueryInput is an input type that accepts OneDashboardPageWidgetTableNrqlQueryArgs and OneDashboardPageWidgetTableNrqlQueryOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetTableNrqlQueryInput` via:
//
//          OneDashboardPageWidgetTableNrqlQueryArgs{...}
type OneDashboardPageWidgetTableNrqlQueryInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetTableNrqlQueryOutput() OneDashboardPageWidgetTableNrqlQueryOutput
	ToOneDashboardPageWidgetTableNrqlQueryOutputWithContext(context.Context) OneDashboardPageWidgetTableNrqlQueryOutput
}

type OneDashboardPageWidgetTableNrqlQueryArgs struct {
	// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
	Query pulumi.StringInput `pulumi:"query"`
}

func (OneDashboardPageWidgetTableNrqlQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetTableNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetTableNrqlQueryArgs) ToOneDashboardPageWidgetTableNrqlQueryOutput() OneDashboardPageWidgetTableNrqlQueryOutput {
	return i.ToOneDashboardPageWidgetTableNrqlQueryOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetTableNrqlQueryArgs) ToOneDashboardPageWidgetTableNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableNrqlQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetTableNrqlQueryOutput)
}

// OneDashboardPageWidgetTableNrqlQueryArrayInput is an input type that accepts OneDashboardPageWidgetTableNrqlQueryArray and OneDashboardPageWidgetTableNrqlQueryArrayOutput values.
// You can construct a concrete instance of `OneDashboardPageWidgetTableNrqlQueryArrayInput` via:
//
//          OneDashboardPageWidgetTableNrqlQueryArray{ OneDashboardPageWidgetTableNrqlQueryArgs{...} }
type OneDashboardPageWidgetTableNrqlQueryArrayInput interface {
	pulumi.Input

	ToOneDashboardPageWidgetTableNrqlQueryArrayOutput() OneDashboardPageWidgetTableNrqlQueryArrayOutput
	ToOneDashboardPageWidgetTableNrqlQueryArrayOutputWithContext(context.Context) OneDashboardPageWidgetTableNrqlQueryArrayOutput
}

type OneDashboardPageWidgetTableNrqlQueryArray []OneDashboardPageWidgetTableNrqlQueryInput

func (OneDashboardPageWidgetTableNrqlQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetTableNrqlQuery)(nil)).Elem()
}

func (i OneDashboardPageWidgetTableNrqlQueryArray) ToOneDashboardPageWidgetTableNrqlQueryArrayOutput() OneDashboardPageWidgetTableNrqlQueryArrayOutput {
	return i.ToOneDashboardPageWidgetTableNrqlQueryArrayOutputWithContext(context.Background())
}

func (i OneDashboardPageWidgetTableNrqlQueryArray) ToOneDashboardPageWidgetTableNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableNrqlQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardPageWidgetTableNrqlQueryArrayOutput)
}

type OneDashboardPageWidgetTableNrqlQueryOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetTableNrqlQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardPageWidgetTableNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetTableNrqlQueryOutput) ToOneDashboardPageWidgetTableNrqlQueryOutput() OneDashboardPageWidgetTableNrqlQueryOutput {
	return o
}

func (o OneDashboardPageWidgetTableNrqlQueryOutput) ToOneDashboardPageWidgetTableNrqlQueryOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableNrqlQueryOutput {
	return o
}

// Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.
func (o OneDashboardPageWidgetTableNrqlQueryOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTableNrqlQuery) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// (Required) Valid NRQL query string. See [Writing NRQL Queries](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/using-nrql/introduction-nrql) for help.
func (o OneDashboardPageWidgetTableNrqlQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardPageWidgetTableNrqlQuery) string { return v.Query }).(pulumi.StringOutput)
}

type OneDashboardPageWidgetTableNrqlQueryArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardPageWidgetTableNrqlQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardPageWidgetTableNrqlQuery)(nil)).Elem()
}

func (o OneDashboardPageWidgetTableNrqlQueryArrayOutput) ToOneDashboardPageWidgetTableNrqlQueryArrayOutput() OneDashboardPageWidgetTableNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetTableNrqlQueryArrayOutput) ToOneDashboardPageWidgetTableNrqlQueryArrayOutputWithContext(ctx context.Context) OneDashboardPageWidgetTableNrqlQueryArrayOutput {
	return o
}

func (o OneDashboardPageWidgetTableNrqlQueryArrayOutput) Index(i pulumi.IntInput) OneDashboardPageWidgetTableNrqlQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardPageWidgetTableNrqlQuery {
		return vs[0].([]OneDashboardPageWidgetTableNrqlQuery)[vs[1].(int)]
	}).(OneDashboardPageWidgetTableNrqlQueryOutput)
}

type OneDashboardRawPage struct {
	// Brief text describing the dashboard.
	Description *string `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid *string `pulumi:"guid"`
	// The title of the dashboard.
	Name string `pulumi:"name"`
	// (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
	Widgets []OneDashboardRawPageWidget `pulumi:"widgets"`
}

// OneDashboardRawPageInput is an input type that accepts OneDashboardRawPageArgs and OneDashboardRawPageOutput values.
// You can construct a concrete instance of `OneDashboardRawPageInput` via:
//
//          OneDashboardRawPageArgs{...}
type OneDashboardRawPageInput interface {
	pulumi.Input

	ToOneDashboardRawPageOutput() OneDashboardRawPageOutput
	ToOneDashboardRawPageOutputWithContext(context.Context) OneDashboardRawPageOutput
}

type OneDashboardRawPageArgs struct {
	// Brief text describing the dashboard.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The unique entity identifier of the dashboard page in New Relic.
	Guid pulumi.StringPtrInput `pulumi:"guid"`
	// The title of the dashboard.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
	Widgets OneDashboardRawPageWidgetArrayInput `pulumi:"widgets"`
}

func (OneDashboardRawPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardRawPage)(nil)).Elem()
}

func (i OneDashboardRawPageArgs) ToOneDashboardRawPageOutput() OneDashboardRawPageOutput {
	return i.ToOneDashboardRawPageOutputWithContext(context.Background())
}

func (i OneDashboardRawPageArgs) ToOneDashboardRawPageOutputWithContext(ctx context.Context) OneDashboardRawPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawPageOutput)
}

// OneDashboardRawPageArrayInput is an input type that accepts OneDashboardRawPageArray and OneDashboardRawPageArrayOutput values.
// You can construct a concrete instance of `OneDashboardRawPageArrayInput` via:
//
//          OneDashboardRawPageArray{ OneDashboardRawPageArgs{...} }
type OneDashboardRawPageArrayInput interface {
	pulumi.Input

	ToOneDashboardRawPageArrayOutput() OneDashboardRawPageArrayOutput
	ToOneDashboardRawPageArrayOutputWithContext(context.Context) OneDashboardRawPageArrayOutput
}

type OneDashboardRawPageArray []OneDashboardRawPageInput

func (OneDashboardRawPageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardRawPage)(nil)).Elem()
}

func (i OneDashboardRawPageArray) ToOneDashboardRawPageArrayOutput() OneDashboardRawPageArrayOutput {
	return i.ToOneDashboardRawPageArrayOutputWithContext(context.Background())
}

func (i OneDashboardRawPageArray) ToOneDashboardRawPageArrayOutputWithContext(ctx context.Context) OneDashboardRawPageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawPageArrayOutput)
}

type OneDashboardRawPageOutput struct{ *pulumi.OutputState }

func (OneDashboardRawPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardRawPage)(nil)).Elem()
}

func (o OneDashboardRawPageOutput) ToOneDashboardRawPageOutput() OneDashboardRawPageOutput {
	return o
}

func (o OneDashboardRawPageOutput) ToOneDashboardRawPageOutputWithContext(ctx context.Context) OneDashboardRawPageOutput {
	return o
}

// Brief text describing the dashboard.
func (o OneDashboardRawPageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardRawPage) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique entity identifier of the dashboard page in New Relic.
func (o OneDashboardRawPageOutput) Guid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardRawPage) *string { return v.Guid }).(pulumi.StringPtrOutput)
}

// The title of the dashboard.
func (o OneDashboardRawPageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardRawPage) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) A nested block that describes a widget. See Nested widget blocks below for details.
func (o OneDashboardRawPageOutput) Widgets() OneDashboardRawPageWidgetArrayOutput {
	return o.ApplyT(func(v OneDashboardRawPage) []OneDashboardRawPageWidget { return v.Widgets }).(OneDashboardRawPageWidgetArrayOutput)
}

type OneDashboardRawPageArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardRawPageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardRawPage)(nil)).Elem()
}

func (o OneDashboardRawPageArrayOutput) ToOneDashboardRawPageArrayOutput() OneDashboardRawPageArrayOutput {
	return o
}

func (o OneDashboardRawPageArrayOutput) ToOneDashboardRawPageArrayOutputWithContext(ctx context.Context) OneDashboardRawPageArrayOutput {
	return o
}

func (o OneDashboardRawPageArrayOutput) Index(i pulumi.IntInput) OneDashboardRawPageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardRawPage {
		return vs[0].([]OneDashboardRawPage)[vs[1].(int)]
	}).(OneDashboardRawPageOutput)
}

type OneDashboardRawPageWidget struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column int `pulumi:"column"`
	// (Required) The configuration of the widget.
	Configuration string `pulumi:"configuration"`
	// (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
	Height *int    `pulumi:"height"`
	Id     *string `pulumi:"id"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row int `pulumi:"row"`
	// (Required) A title for the widget.
	Title string `pulumi:"title"`
	// (Required) The visualization ID of the widget
	VisualizationId string `pulumi:"visualizationId"`
	// (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
	Width *int `pulumi:"width"`
}

// OneDashboardRawPageWidgetInput is an input type that accepts OneDashboardRawPageWidgetArgs and OneDashboardRawPageWidgetOutput values.
// You can construct a concrete instance of `OneDashboardRawPageWidgetInput` via:
//
//          OneDashboardRawPageWidgetArgs{...}
type OneDashboardRawPageWidgetInput interface {
	pulumi.Input

	ToOneDashboardRawPageWidgetOutput() OneDashboardRawPageWidgetOutput
	ToOneDashboardRawPageWidgetOutputWithContext(context.Context) OneDashboardRawPageWidgetOutput
}

type OneDashboardRawPageWidgetArgs struct {
	// (Required) Column position of widget from top left, starting at `1`.
	Column pulumi.IntInput `pulumi:"column"`
	// (Required) The configuration of the widget.
	Configuration pulumi.StringInput `pulumi:"configuration"`
	// (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
	Height pulumi.IntPtrInput    `pulumi:"height"`
	Id     pulumi.StringPtrInput `pulumi:"id"`
	// (Required) Row position of widget from top left, starting at `1`.
	Row pulumi.IntInput `pulumi:"row"`
	// (Required) A title for the widget.
	Title pulumi.StringInput `pulumi:"title"`
	// (Required) The visualization ID of the widget
	VisualizationId pulumi.StringInput `pulumi:"visualizationId"`
	// (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
	Width pulumi.IntPtrInput `pulumi:"width"`
}

func (OneDashboardRawPageWidgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardRawPageWidget)(nil)).Elem()
}

func (i OneDashboardRawPageWidgetArgs) ToOneDashboardRawPageWidgetOutput() OneDashboardRawPageWidgetOutput {
	return i.ToOneDashboardRawPageWidgetOutputWithContext(context.Background())
}

func (i OneDashboardRawPageWidgetArgs) ToOneDashboardRawPageWidgetOutputWithContext(ctx context.Context) OneDashboardRawPageWidgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawPageWidgetOutput)
}

// OneDashboardRawPageWidgetArrayInput is an input type that accepts OneDashboardRawPageWidgetArray and OneDashboardRawPageWidgetArrayOutput values.
// You can construct a concrete instance of `OneDashboardRawPageWidgetArrayInput` via:
//
//          OneDashboardRawPageWidgetArray{ OneDashboardRawPageWidgetArgs{...} }
type OneDashboardRawPageWidgetArrayInput interface {
	pulumi.Input

	ToOneDashboardRawPageWidgetArrayOutput() OneDashboardRawPageWidgetArrayOutput
	ToOneDashboardRawPageWidgetArrayOutputWithContext(context.Context) OneDashboardRawPageWidgetArrayOutput
}

type OneDashboardRawPageWidgetArray []OneDashboardRawPageWidgetInput

func (OneDashboardRawPageWidgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardRawPageWidget)(nil)).Elem()
}

func (i OneDashboardRawPageWidgetArray) ToOneDashboardRawPageWidgetArrayOutput() OneDashboardRawPageWidgetArrayOutput {
	return i.ToOneDashboardRawPageWidgetArrayOutputWithContext(context.Background())
}

func (i OneDashboardRawPageWidgetArray) ToOneDashboardRawPageWidgetArrayOutputWithContext(ctx context.Context) OneDashboardRawPageWidgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneDashboardRawPageWidgetArrayOutput)
}

type OneDashboardRawPageWidgetOutput struct{ *pulumi.OutputState }

func (OneDashboardRawPageWidgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneDashboardRawPageWidget)(nil)).Elem()
}

func (o OneDashboardRawPageWidgetOutput) ToOneDashboardRawPageWidgetOutput() OneDashboardRawPageWidgetOutput {
	return o
}

func (o OneDashboardRawPageWidgetOutput) ToOneDashboardRawPageWidgetOutputWithContext(ctx context.Context) OneDashboardRawPageWidgetOutput {
	return o
}

// (Required) Column position of widget from top left, starting at `1`.
func (o OneDashboardRawPageWidgetOutput) Column() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) int { return v.Column }).(pulumi.IntOutput)
}

// (Required) The configuration of the widget.
func (o OneDashboardRawPageWidgetOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) string { return v.Configuration }).(pulumi.StringOutput)
}

// (Optional) Height of the widget. Valid values are `1` to `12` inclusive. Defaults to `3`.
func (o OneDashboardRawPageWidgetOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) *int { return v.Height }).(pulumi.IntPtrOutput)
}

func (o OneDashboardRawPageWidgetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Required) Row position of widget from top left, starting at `1`.
func (o OneDashboardRawPageWidgetOutput) Row() pulumi.IntOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) int { return v.Row }).(pulumi.IntOutput)
}

// (Required) A title for the widget.
func (o OneDashboardRawPageWidgetOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) string { return v.Title }).(pulumi.StringOutput)
}

// (Required) The visualization ID of the widget
func (o OneDashboardRawPageWidgetOutput) VisualizationId() pulumi.StringOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) string { return v.VisualizationId }).(pulumi.StringOutput)
}

// (Optional) Width of the widget. Valid values are `1` to `12` inclusive. Defaults to `4`.
func (o OneDashboardRawPageWidgetOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OneDashboardRawPageWidget) *int { return v.Width }).(pulumi.IntPtrOutput)
}

type OneDashboardRawPageWidgetArrayOutput struct{ *pulumi.OutputState }

func (OneDashboardRawPageWidgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OneDashboardRawPageWidget)(nil)).Elem()
}

func (o OneDashboardRawPageWidgetArrayOutput) ToOneDashboardRawPageWidgetArrayOutput() OneDashboardRawPageWidgetArrayOutput {
	return o
}

func (o OneDashboardRawPageWidgetArrayOutput) ToOneDashboardRawPageWidgetArrayOutputWithContext(ctx context.Context) OneDashboardRawPageWidgetArrayOutput {
	return o
}

func (o OneDashboardRawPageWidgetArrayOutput) Index(i pulumi.IntInput) OneDashboardRawPageWidgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OneDashboardRawPageWidget {
		return vs[0].([]OneDashboardRawPageWidget)[vs[1].(int)]
	}).(OneDashboardRawPageWidgetOutput)
}

type GetAlertChannelConfig struct {
	ApiKey                *string           `pulumi:"apiKey"`
	AuthPassword          *string           `pulumi:"authPassword"`
	AuthType              *string           `pulumi:"authType"`
	AuthUsername          *string           `pulumi:"authUsername"`
	BaseUrl               *string           `pulumi:"baseUrl"`
	Channel               *string           `pulumi:"channel"`
	Headers               map[string]string `pulumi:"headers"`
	IncludeJsonAttachment *string           `pulumi:"includeJsonAttachment"`
	Key                   *string           `pulumi:"key"`
	Payload               map[string]string `pulumi:"payload"`
	PayloadType           *string           `pulumi:"payloadType"`
	Recipients            *string           `pulumi:"recipients"`
	Region                *string           `pulumi:"region"`
	RouteKey              *string           `pulumi:"routeKey"`
	ServiceKey            *string           `pulumi:"serviceKey"`
	Tags                  *string           `pulumi:"tags"`
	Teams                 *string           `pulumi:"teams"`
	Url                   *string           `pulumi:"url"`
	UserId                *string           `pulumi:"userId"`
}

// GetAlertChannelConfigInput is an input type that accepts GetAlertChannelConfigArgs and GetAlertChannelConfigOutput values.
// You can construct a concrete instance of `GetAlertChannelConfigInput` via:
//
//          GetAlertChannelConfigArgs{...}
type GetAlertChannelConfigInput interface {
	pulumi.Input

	ToGetAlertChannelConfigOutput() GetAlertChannelConfigOutput
	ToGetAlertChannelConfigOutputWithContext(context.Context) GetAlertChannelConfigOutput
}

type GetAlertChannelConfigArgs struct {
	ApiKey                pulumi.StringPtrInput `pulumi:"apiKey"`
	AuthPassword          pulumi.StringPtrInput `pulumi:"authPassword"`
	AuthType              pulumi.StringPtrInput `pulumi:"authType"`
	AuthUsername          pulumi.StringPtrInput `pulumi:"authUsername"`
	BaseUrl               pulumi.StringPtrInput `pulumi:"baseUrl"`
	Channel               pulumi.StringPtrInput `pulumi:"channel"`
	Headers               pulumi.StringMapInput `pulumi:"headers"`
	IncludeJsonAttachment pulumi.StringPtrInput `pulumi:"includeJsonAttachment"`
	Key                   pulumi.StringPtrInput `pulumi:"key"`
	Payload               pulumi.StringMapInput `pulumi:"payload"`
	PayloadType           pulumi.StringPtrInput `pulumi:"payloadType"`
	Recipients            pulumi.StringPtrInput `pulumi:"recipients"`
	Region                pulumi.StringPtrInput `pulumi:"region"`
	RouteKey              pulumi.StringPtrInput `pulumi:"routeKey"`
	ServiceKey            pulumi.StringPtrInput `pulumi:"serviceKey"`
	Tags                  pulumi.StringPtrInput `pulumi:"tags"`
	Teams                 pulumi.StringPtrInput `pulumi:"teams"`
	Url                   pulumi.StringPtrInput `pulumi:"url"`
	UserId                pulumi.StringPtrInput `pulumi:"userId"`
}

func (GetAlertChannelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertChannelConfig)(nil)).Elem()
}

func (i GetAlertChannelConfigArgs) ToGetAlertChannelConfigOutput() GetAlertChannelConfigOutput {
	return i.ToGetAlertChannelConfigOutputWithContext(context.Background())
}

func (i GetAlertChannelConfigArgs) ToGetAlertChannelConfigOutputWithContext(ctx context.Context) GetAlertChannelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAlertChannelConfigOutput)
}

type GetAlertChannelConfigOutput struct{ *pulumi.OutputState }

func (GetAlertChannelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertChannelConfig)(nil)).Elem()
}

func (o GetAlertChannelConfigOutput) ToGetAlertChannelConfigOutput() GetAlertChannelConfigOutput {
	return o
}

func (o GetAlertChannelConfigOutput) ToGetAlertChannelConfigOutputWithContext(ctx context.Context) GetAlertChannelConfigOutput {
	return o
}

func (o GetAlertChannelConfigOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.AuthPassword }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) AuthUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.AuthUsername }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

func (o GetAlertChannelConfigOutput) IncludeJsonAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.IncludeJsonAttachment }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Payload() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) map[string]string { return v.Payload }).(pulumi.StringMapOutput)
}

func (o GetAlertChannelConfigOutput) PayloadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.PayloadType }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Recipients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Recipients }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) RouteKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.RouteKey }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) ServiceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.ServiceKey }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Teams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Teams }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o GetAlertChannelConfigOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertChannelConfig) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type GetEntityTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetEntityTagInput is an input type that accepts GetEntityTagArgs and GetEntityTagOutput values.
// You can construct a concrete instance of `GetEntityTagInput` via:
//
//          GetEntityTagArgs{...}
type GetEntityTagInput interface {
	pulumi.Input

	ToGetEntityTagOutput() GetEntityTagOutput
	ToGetEntityTagOutputWithContext(context.Context) GetEntityTagOutput
}

type GetEntityTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetEntityTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEntityTag)(nil)).Elem()
}

func (i GetEntityTagArgs) ToGetEntityTagOutput() GetEntityTagOutput {
	return i.ToGetEntityTagOutputWithContext(context.Background())
}

func (i GetEntityTagArgs) ToGetEntityTagOutputWithContext(ctx context.Context) GetEntityTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEntityTagOutput)
}

type GetEntityTagOutput struct{ *pulumi.OutputState }

func (GetEntityTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEntityTag)(nil)).Elem()
}

func (o GetEntityTagOutput) ToGetEntityTagOutput() GetEntityTagOutput {
	return o
}

func (o GetEntityTagOutput) ToGetEntityTagOutputWithContext(ctx context.Context) GetEntityTagOutput {
	return o
}

func (o GetEntityTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetEntityTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetEntityTag) string { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertChannelConfigOutput{})
	pulumi.RegisterOutputType(AlertChannelConfigPtrOutput{})
	pulumi.RegisterOutputType(AlertConditionTermOutput{})
	pulumi.RegisterOutputType(AlertConditionTermArrayOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleConditionOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleConditionPtrOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleConditionConditionOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleConditionConditionArrayOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleScheduleOutput{})
	pulumi.RegisterOutputType(AlertMutingRuleSchedulePtrOutput{})
	pulumi.RegisterOutputType(DashboardFilterOutput{})
	pulumi.RegisterOutputType(DashboardFilterPtrOutput{})
	pulumi.RegisterOutputType(DashboardWidgetOutput{})
	pulumi.RegisterOutputType(DashboardWidgetArrayOutput{})
	pulumi.RegisterOutputType(DashboardWidgetCompareWithOutput{})
	pulumi.RegisterOutputType(DashboardWidgetCompareWithArrayOutput{})
	pulumi.RegisterOutputType(DashboardWidgetCompareWithPresentationOutput{})
	pulumi.RegisterOutputType(DashboardWidgetMetricOutput{})
	pulumi.RegisterOutputType(DashboardWidgetMetricArrayOutput{})
	pulumi.RegisterOutputType(EntityTagsTagOutput{})
	pulumi.RegisterOutputType(EntityTagsTagArrayOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionCriticalOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionWarningOutput{})
	pulumi.RegisterOutputType(InfraAlertConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionCriticalOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionNrqlOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionNrqlPtrOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionTermOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionTermArrayOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionWarningOutput{})
	pulumi.RegisterOutputType(NrqlAlertConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(OneDashboardPageOutput{})
	pulumi.RegisterOutputType(OneDashboardPageArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetAreaOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetAreaArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetAreaNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetAreaNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBarOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBarArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBarNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBarNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBillboardOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBillboardArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBillboardNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBillboardNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBulletOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBulletArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBulletNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetBulletNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetFunnelOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetFunnelArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetFunnelNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetFunnelNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHeatmapOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHeatmapArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHeatmapNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHeatmapNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHistogramOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHistogramArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHistogramNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetHistogramNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetJsonOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetJsonArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetJsonNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetJsonNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetLineOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetLineArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetLineNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetLineNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetMarkdownOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetMarkdownArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetPyOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetPyArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetPyNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetPyNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetTableOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetTableArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetTableNrqlQueryOutput{})
	pulumi.RegisterOutputType(OneDashboardPageWidgetTableNrqlQueryArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardRawPageOutput{})
	pulumi.RegisterOutputType(OneDashboardRawPageArrayOutput{})
	pulumi.RegisterOutputType(OneDashboardRawPageWidgetOutput{})
	pulumi.RegisterOutputType(OneDashboardRawPageWidgetArrayOutput{})
	pulumi.RegisterOutputType(GetAlertChannelConfigOutput{})
	pulumi.RegisterOutputType(GetEntityTagOutput{})
}
