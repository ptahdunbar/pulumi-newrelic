// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NotificationDestination struct {
	pulumi.CustomResourceState

	// A set of key-value pairs to represent a Notification destination auth.
	Auth pulumi.StringMapOutput `pulumi:"auth"`
	// (Required) The name of the destination.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of notification destination property types.
	Properties NotificationDestinationPropertyArrayOutput `pulumi:"properties"`
	// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNotificationDestination registers a new resource with the given unique name, arguments, and options.
func NewNotificationDestination(ctx *pulumi.Context,
	name string, args *NotificationDestinationArgs, opts ...pulumi.ResourceOption) (*NotificationDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource NotificationDestination
	err := ctx.RegisterResource("newrelic:index/notificationDestination:NotificationDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationDestination gets an existing NotificationDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationDestinationState, opts ...pulumi.ResourceOption) (*NotificationDestination, error) {
	var resource NotificationDestination
	err := ctx.ReadResource("newrelic:index/notificationDestination:NotificationDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationDestination resources.
type notificationDestinationState struct {
	// A set of key-value pairs to represent a Notification destination auth.
	Auth map[string]string `pulumi:"auth"`
	// (Required) The name of the destination.
	Name *string `pulumi:"name"`
	// List of notification destination property types.
	Properties []NotificationDestinationProperty `pulumi:"properties"`
	// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION).
	Type *string `pulumi:"type"`
}

type NotificationDestinationState struct {
	// A set of key-value pairs to represent a Notification destination auth.
	Auth pulumi.StringMapInput
	// (Required) The name of the destination.
	Name pulumi.StringPtrInput
	// List of notification destination property types.
	Properties NotificationDestinationPropertyArrayInput
	// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION).
	Type pulumi.StringPtrInput
}

func (NotificationDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationDestinationState)(nil)).Elem()
}

type notificationDestinationArgs struct {
	// A set of key-value pairs to represent a Notification destination auth.
	Auth map[string]string `pulumi:"auth"`
	// (Required) The name of the destination.
	Name *string `pulumi:"name"`
	// List of notification destination property types.
	Properties []NotificationDestinationProperty `pulumi:"properties"`
	// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION).
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NotificationDestination resource.
type NotificationDestinationArgs struct {
	// A set of key-value pairs to represent a Notification destination auth.
	Auth pulumi.StringMapInput
	// (Required) The name of the destination.
	Name pulumi.StringPtrInput
	// List of notification destination property types.
	Properties NotificationDestinationPropertyArrayInput
	// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
	// PAGERDUTY_SERVICE_INTEGRATION).
	Type pulumi.StringInput
}

func (NotificationDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationDestinationArgs)(nil)).Elem()
}

type NotificationDestinationInput interface {
	pulumi.Input

	ToNotificationDestinationOutput() NotificationDestinationOutput
	ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput
}

func (*NotificationDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationDestination)(nil)).Elem()
}

func (i *NotificationDestination) ToNotificationDestinationOutput() NotificationDestinationOutput {
	return i.ToNotificationDestinationOutputWithContext(context.Background())
}

func (i *NotificationDestination) ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationOutput)
}

// NotificationDestinationArrayInput is an input type that accepts NotificationDestinationArray and NotificationDestinationArrayOutput values.
// You can construct a concrete instance of `NotificationDestinationArrayInput` via:
//
//          NotificationDestinationArray{ NotificationDestinationArgs{...} }
type NotificationDestinationArrayInput interface {
	pulumi.Input

	ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput
	ToNotificationDestinationArrayOutputWithContext(context.Context) NotificationDestinationArrayOutput
}

type NotificationDestinationArray []NotificationDestinationInput

func (NotificationDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationDestination)(nil)).Elem()
}

func (i NotificationDestinationArray) ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput {
	return i.ToNotificationDestinationArrayOutputWithContext(context.Background())
}

func (i NotificationDestinationArray) ToNotificationDestinationArrayOutputWithContext(ctx context.Context) NotificationDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationArrayOutput)
}

// NotificationDestinationMapInput is an input type that accepts NotificationDestinationMap and NotificationDestinationMapOutput values.
// You can construct a concrete instance of `NotificationDestinationMapInput` via:
//
//          NotificationDestinationMap{ "key": NotificationDestinationArgs{...} }
type NotificationDestinationMapInput interface {
	pulumi.Input

	ToNotificationDestinationMapOutput() NotificationDestinationMapOutput
	ToNotificationDestinationMapOutputWithContext(context.Context) NotificationDestinationMapOutput
}

type NotificationDestinationMap map[string]NotificationDestinationInput

func (NotificationDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationDestination)(nil)).Elem()
}

func (i NotificationDestinationMap) ToNotificationDestinationMapOutput() NotificationDestinationMapOutput {
	return i.ToNotificationDestinationMapOutputWithContext(context.Background())
}

func (i NotificationDestinationMap) ToNotificationDestinationMapOutputWithContext(ctx context.Context) NotificationDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationDestinationMapOutput)
}

type NotificationDestinationOutput struct{ *pulumi.OutputState }

func (NotificationDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationOutput) ToNotificationDestinationOutput() NotificationDestinationOutput {
	return o
}

func (o NotificationDestinationOutput) ToNotificationDestinationOutputWithContext(ctx context.Context) NotificationDestinationOutput {
	return o
}

// A set of key-value pairs to represent a Notification destination auth.
func (o NotificationDestinationOutput) Auth() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringMapOutput { return v.Auth }).(pulumi.StringMapOutput)
}

// (Required) The name of the destination.
func (o NotificationDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of notification destination property types.
func (o NotificationDestinationOutput) Properties() NotificationDestinationPropertyArrayOutput {
	return o.ApplyT(func(v *NotificationDestination) NotificationDestinationPropertyArrayOutput { return v.Properties }).(NotificationDestinationPropertyArrayOutput)
}

// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
// PAGERDUTY_SERVICE_INTEGRATION).
func (o NotificationDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationDestination) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NotificationDestinationArrayOutput struct{ *pulumi.OutputState }

func (NotificationDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationArrayOutput) ToNotificationDestinationArrayOutput() NotificationDestinationArrayOutput {
	return o
}

func (o NotificationDestinationArrayOutput) ToNotificationDestinationArrayOutputWithContext(ctx context.Context) NotificationDestinationArrayOutput {
	return o
}

func (o NotificationDestinationArrayOutput) Index(i pulumi.IntInput) NotificationDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationDestination {
		return vs[0].([]*NotificationDestination)[vs[1].(int)]
	}).(NotificationDestinationOutput)
}

type NotificationDestinationMapOutput struct{ *pulumi.OutputState }

func (NotificationDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationDestination)(nil)).Elem()
}

func (o NotificationDestinationMapOutput) ToNotificationDestinationMapOutput() NotificationDestinationMapOutput {
	return o
}

func (o NotificationDestinationMapOutput) ToNotificationDestinationMapOutputWithContext(ctx context.Context) NotificationDestinationMapOutput {
	return o
}

func (o NotificationDestinationMapOutput) MapIndex(k pulumi.StringInput) NotificationDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationDestination {
		return vs[0].(map[string]*NotificationDestination)[vs[1].(string)]
	}).(NotificationDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationInput)(nil)).Elem(), &NotificationDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationArrayInput)(nil)).Elem(), NotificationDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationDestinationMapInput)(nil)).Elem(), NotificationDestinationMap{})
	pulumi.RegisterOutputType(NotificationDestinationOutput{})
	pulumi.RegisterOutputType(NotificationDestinationArrayOutput{})
	pulumi.RegisterOutputType(NotificationDestinationMapOutput{})
}
