// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    public static class GetNotificationDestination
    {
        public static Task<GetNotificationDestinationResult> InvokeAsync(GetNotificationDestinationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNotificationDestinationResult>("newrelic:index/getNotificationDestination:getNotificationDestination", args ?? new GetNotificationDestinationArgs(), options.WithDefaults());

        public static Output<GetNotificationDestinationResult> Invoke(GetNotificationDestinationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNotificationDestinationResult>("newrelic:index/getNotificationDestination:getNotificationDestination", args ?? new GetNotificationDestinationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNotificationDestinationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The New Relic account ID to operate on.  This allows you to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// An indication whether the notification destination is active or not.
        /// </summary>
        [Input("active")]
        public bool? Active { get; set; }

        /// <summary>
        /// \ `auth_token` - A nested block that describes a basic ot token authentication credentials..
        /// </summary>
        [Input("authBasic")]
        public Inputs.GetNotificationDestinationAuthBasicArgs? AuthBasic { get; set; }

        [Input("authToken")]
        public Inputs.GetNotificationDestinationAuthTokenArgs? AuthToken { get; set; }

        /// <summary>
        /// The id of the notification destination in New Relic.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The name of the notification destination.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("properties")]
        private List<Inputs.GetNotificationDestinationPropertyArgs>? _properties;

        /// <summary>
        /// A nested block that describes a notification destination property.
        /// </summary>
        public List<Inputs.GetNotificationDestinationPropertyArgs> Properties
        {
            get => _properties ?? (_properties = new List<Inputs.GetNotificationDestinationPropertyArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// The notification destination type, either: `EMAIL`, `SERVICE_NOW`, `WEBHOOK`, `JIRA`, `MOBILE_PUSH`, `EVENT_BRIDGE`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`, `SLACK` and `SLACK_COLLABORATION`.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetNotificationDestinationArgs()
        {
        }
        public static new GetNotificationDestinationArgs Empty => new GetNotificationDestinationArgs();
    }

    public sealed class GetNotificationDestinationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The New Relic account ID to operate on.  This allows you to override the `account_id` attribute set on the provider. Defaults to the environment variable `NEW_RELIC_ACCOUNT_ID`.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// An indication whether the notification destination is active or not.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// \ `auth_token` - A nested block that describes a basic ot token authentication credentials..
        /// </summary>
        [Input("authBasic")]
        public Input<Inputs.GetNotificationDestinationAuthBasicInputArgs>? AuthBasic { get; set; }

        [Input("authToken")]
        public Input<Inputs.GetNotificationDestinationAuthTokenInputArgs>? AuthToken { get; set; }

        /// <summary>
        /// The id of the notification destination in New Relic.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The name of the notification destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties")]
        private InputList<Inputs.GetNotificationDestinationPropertyInputArgs>? _properties;

        /// <summary>
        /// A nested block that describes a notification destination property.
        /// </summary>
        public InputList<Inputs.GetNotificationDestinationPropertyInputArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.GetNotificationDestinationPropertyInputArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// The notification destination type, either: `EMAIL`, `SERVICE_NOW`, `WEBHOOK`, `JIRA`, `MOBILE_PUSH`, `EVENT_BRIDGE`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`, `SLACK` and `SLACK_COLLABORATION`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetNotificationDestinationInvokeArgs()
        {
        }
        public static new GetNotificationDestinationInvokeArgs Empty => new GetNotificationDestinationInvokeArgs();
    }


    [OutputType]
    public sealed class GetNotificationDestinationResult
    {
        public readonly int AccountId;
        /// <summary>
        /// An indication whether the notification destination is active or not.
        /// </summary>
        public readonly bool? Active;
        /// <summary>
        /// \ `auth_token` - A nested block that describes a basic ot token authentication credentials..
        /// </summary>
        public readonly Outputs.GetNotificationDestinationAuthBasicResult? AuthBasic;
        public readonly Outputs.GetNotificationDestinationAuthTokenResult? AuthToken;
        public readonly string Id;
        public readonly string LastSent;
        /// <summary>
        /// The name of the notification destination.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// A nested block that describes a notification destination property.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNotificationDestinationPropertyResult> Properties;
        /// <summary>
        /// The status of the notification destination.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The notification destination type, either: `EMAIL`, `SERVICE_NOW`, `WEBHOOK`, `JIRA`, `MOBILE_PUSH`, `EVENT_BRIDGE`, `PAGERDUTY_ACCOUNT_INTEGRATION` or `PAGERDUTY_SERVICE_INTEGRATION`, `SLACK` and `SLACK_COLLABORATION`.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetNotificationDestinationResult(
            int accountId,

            bool? active,

            Outputs.GetNotificationDestinationAuthBasicResult? authBasic,

            Outputs.GetNotificationDestinationAuthTokenResult? authToken,

            string id,

            string lastSent,

            string? name,

            ImmutableArray<Outputs.GetNotificationDestinationPropertyResult> properties,

            string status,

            string? type)
        {
            AccountId = accountId;
            Active = active;
            AuthBasic = authBasic;
            AuthToken = authToken;
            Id = id;
            LastSent = lastSent;
            Name = name;
            Properties = properties;
            Status = status;
            Type = type;
        }
    }
}
