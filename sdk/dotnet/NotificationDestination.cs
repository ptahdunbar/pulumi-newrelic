// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    [NewRelicResourceType("newrelic:index/notificationDestination:NotificationDestination")]
    public partial class NotificationDestination : Pulumi.CustomResource
    {
        /// <summary>
        /// A set of key-value pairs to represent a Notification destination auth.
        /// </summary>
        [Output("auth")]
        public Output<ImmutableDictionary<string, string>?> Auth { get; private set; } = null!;

        /// <summary>
        /// (Required) The name of the destination.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of notification destination property types.
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<Outputs.NotificationDestinationProperty>> Properties { get; private set; } = null!;

        /// <summary>
        /// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
        /// PAGERDUTY_SERVICE_INTEGRATION).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationDestination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationDestination(string name, NotificationDestinationArgs args, CustomResourceOptions? options = null)
            : base("newrelic:index/notificationDestination:NotificationDestination", name, args ?? new NotificationDestinationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationDestination(string name, Input<string> id, NotificationDestinationState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:index/notificationDestination:NotificationDestination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationDestination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationDestination Get(string name, Input<string> id, NotificationDestinationState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationDestination(name, id, state, options);
        }
    }

    public sealed class NotificationDestinationArgs : Pulumi.ResourceArgs
    {
        [Input("auth")]
        private InputMap<string>? _auth;

        /// <summary>
        /// A set of key-value pairs to represent a Notification destination auth.
        /// </summary>
        public InputMap<string> Auth
        {
            get => _auth ?? (_auth = new InputMap<string>());
            set => _auth = value;
        }

        /// <summary>
        /// (Required) The name of the destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties")]
        private InputList<Inputs.NotificationDestinationPropertyArgs>? _properties;

        /// <summary>
        /// List of notification destination property types.
        /// </summary>
        public InputList<Inputs.NotificationDestinationPropertyArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NotificationDestinationPropertyArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
        /// PAGERDUTY_SERVICE_INTEGRATION).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public NotificationDestinationArgs()
        {
        }
    }

    public sealed class NotificationDestinationState : Pulumi.ResourceArgs
    {
        [Input("auth")]
        private InputMap<string>? _auth;

        /// <summary>
        /// A set of key-value pairs to represent a Notification destination auth.
        /// </summary>
        public InputMap<string> Auth
        {
            get => _auth ?? (_auth = new InputMap<string>());
            set => _auth = value;
        }

        /// <summary>
        /// (Required) The name of the destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("properties")]
        private InputList<Inputs.NotificationDestinationPropertyGetArgs>? _properties;

        /// <summary>
        /// List of notification destination property types.
        /// </summary>
        public InputList<Inputs.NotificationDestinationPropertyGetArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.NotificationDestinationPropertyGetArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// (Required) The type of the destination. One of: (WEBHOOK, EMAIL, SERVICE_NOW, PAGERDUTY_ACCOUNT_INTEGRATION,
        /// PAGERDUTY_SERVICE_INTEGRATION).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NotificationDestinationState()
        {
        }
    }
}
